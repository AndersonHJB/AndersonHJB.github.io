{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/anzhiyu/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/512.png","path":"img/512.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/comment_bg.png","path":"img/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","path":"img/default_cover.jpg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","path":"js/anzhiyu/ai_abstract.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","path":"js/anzhiyu/comment_barrage.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","path":"js/anzhiyu/people.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","path":"js/anzhiyu/random_friends_post.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","path":"js/anzhiyu/right_click_menu.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","path":"img/siteicon/16.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","path":"img/siteicon/32.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","path":"img/siteicon/apple-icon-180.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","path":"img/siteicon/manifest-icon-192.maskable.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","path":"img/siteicon/manifest-icon-512.maskable.png","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/079A23792.jpg","path":"img/079A23792.jpg","modified":1,"renderable":0},{"_id":"source/img/3Z2A5708.jpg","path":"img/3Z2A5708.jpg","modified":1,"renderable":0},{"_id":"source/img/63c02edf44033.png","path":"img/63c02edf44033.png","modified":1,"renderable":0},{"_id":"source/img/645fa415e8694png.png","path":"img/645fa415e8694png.png","modified":1,"renderable":0},{"_id":"source/img/FPM.svg","path":"img/FPM.svg","modified":1,"renderable":0},{"_id":"source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":0},{"_id":"source/img/gzh.png","path":"img/gzh.png","modified":1,"renderable":0},{"_id":"source/img/xionmaotanjita.svg","path":"img/xionmaotanjita.svg","modified":1,"renderable":0},{"_id":"source/img/album/3Z2A5645.jpg","path":"img/album/3Z2A5645.jpg","modified":1,"renderable":0},{"_id":"source/img/album/bg.webp","path":"img/album/bg.webp","modified":1,"renderable":0},{"_id":"source/img/album/road-I-walked-with-you-bg.webp","path":"img/album/road-I-walked-with-you-bg.webp","modified":1,"renderable":0},{"_id":"source/img/footer/Copyright-BY-NC-SA.svg","path":"img/footer/Copyright-BY-NC-SA.svg","modified":1,"renderable":0},{"_id":"source/img/footer/Bornforthis-下班啦.svg","path":"img/footer/Bornforthis-下班啦.svg","modified":1,"renderable":0},{"_id":"source/img/footer/CDN-多吉云-3693F3.svg","path":"img/footer/CDN-多吉云-3693F3.svg","modified":1,"renderable":0},{"_id":"source/img/footer/Frame-Hexo.svg","path":"img/footer/Frame-Hexo.svg","modified":1,"renderable":0},{"_id":"source/img/footer/Theme-AnZhiYu-2E67D3.svg","path":"img/footer/Theme-AnZhiYu-2E67D3.svg","modified":1,"renderable":0},{"_id":"source/img/footer/bornforthis-上班摸鱼中.svg","path":"img/footer/bornforthis-上班摸鱼中.svg","modified":1,"renderable":0},{"_id":"source/img/footer/Source-Github.svg","path":"img/footer/Source-Github.svg","modified":1,"renderable":0},{"_id":"source/img/icon/icon-ai-01.svg","path":"img/icon/icon-ai-01.svg","modified":1,"renderable":0},{"_id":"source/img/reward/qrcode-alipay.png","path":"img/reward/qrcode-alipay.png","modified":1,"renderable":0},{"_id":"source/img/reward/qrcode-weichat.png","path":"img/reward/qrcode-weichat.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b94be03b9fbcf5980542d4680af817c38c1dc09f","modified":1722780822294},{"_id":"source/_posts/.DS_Store","hash":"2fac7c5fa61e01acb2ab6605b683aa5806061e4c","modified":1723303932709},{"_id":"source/_posts/04-python-string.md","hash":"9213d2c2c77142db7d0a8ff5ef35ee544519a92f","modified":1723301534325},{"_id":"source/_data/album.yml","hash":"721d0ca7d0a8d0426648a9b4965781b335a1a19e","modified":1723013930803},{"_id":"source/dailyPhoto/index.md","hash":"e18d5c26b29e1932799b013641880e8c5e976aee","modified":1723022495294},{"_id":"source/_posts/blog.md","hash":"5a8a39fff50df90693eb098644776fa1e55d0e1e","modified":1723104642416},{"_id":"source/_posts/post-name.md","hash":"3f53b791ecd05839e92205223c2fcc68df6f92ca","modified":1723102209197},{"_id":"source/_posts/hello-world.md","hash":"29bb20ee183d48a995a4c3ef2e5640c948a53c89","modified":1723195957801},{"_id":"source/img/63c02edf44033.png","hash":"2924a1b6ec4e380986e9e793a648075b5883a193","modified":1722848824767},{"_id":"source/img/645fa415e8694png.png","hash":"a152ede5b36d39ebf0f1199506a011cf1962c59f","modified":1722851030631},{"_id":"source/img/FPM.svg","hash":"9761d8b94e8795b854ef0bba96d4eed70e2ce4cb","modified":1722827839373},{"_id":"source/img/favicon.svg","hash":"69232e2a0eff5aaeb86efb83f0592bb28800c036","modified":1715949320912},{"_id":"source/img/xionmaotanjita.svg","hash":"d87e55d39d2adcddd55dd2cfee844ac562371e8c","modified":1722915416118},{"_id":"source/img/gzh.png","hash":"600e2e8221f936413a3ea9eecbdb924e759e323a","modified":1722853583653},{"_id":"source/img/.DS_Store","hash":"5ab67a705199a7b0b19ebd32cadd36aa920f6d81","modified":1723183871327},{"_id":"source/road-I-walked-with-you/index.md","hash":"4206d9a218735deaa370b69fd245e2ce72f66772","modified":1723013416654},{"_id":"source/album/index.md","hash":"05ef179a8ad29fd0d2f6c66a5c361dece0670277","modified":1723078697560},{"_id":"source/_posts/04-python-string/image-20231211161559839.png","hash":"ce0a86af623477a12cf86788c858f646949e0dee","modified":1709095556241},{"_id":"source/_posts/04-python-string/image-20231208141259131.png","hash":"cb4a843032da4d757fce26a381f33bc8e7ebd544","modified":1709095556241},{"_id":"source/img/footer/Copyright-BY-NC-SA.svg","hash":"5fb0185b49b14be559ac7e6dc939230314a7edfc","modified":1723184839550},{"_id":"source/img/footer/Frame-Hexo.svg","hash":"ad099d62bd58260d278a63882e6e162b6fdad910","modified":1723184490446},{"_id":"source/img/footer/Bornforthis-下班啦.svg","hash":"d22b3dcb947685fe64347a9e2c244ede74c1a1c6","modified":1723184331735},{"_id":"source/img/footer/CDN-多吉云-3693F3.svg","hash":"b4da35af6bf5d95d446223e058cb2f90932c21ed","modified":1723186088284},{"_id":"source/img/footer/Theme-AnZhiYu-2E67D3.svg","hash":"8acfa788c4d4b04622cb338b1104ef01eda0c90d","modified":1723184571567},{"_id":"source/img/footer/bornforthis-上班摸鱼中.svg","hash":"5faa7b1c7b42b3d870191a8f6465c8a1ae693b2a","modified":1723184123269},{"_id":"source/img/icon/icon-ai-01.svg","hash":"787f0a661ca800665acc19659e5b720ef4c48b3e","modified":1722838372745},{"_id":"source/img/footer/Source-Github.svg","hash":"340e513ee9b0c90024e3b7d53c6bd4596a2ab15f","modified":1723184809852},{"_id":"source/img/reward/qrcode-weichat.png","hash":"d46017a3e7cb7108b015620f77ac826e82bdbf3c","modified":1723107686574},{"_id":"source/static/js/busuanzi.pure.mini.js","hash":"a30fcd42f277944e6524b99f2412b1f01880b813","modified":1723194814128},{"_id":"source/img/reward/.DS_Store","hash":"4a3daf8fb901aa134dce00c901d4a7876e55aa88","modified":1723109150996},{"_id":"source/_posts/04-python-string/image-20231208133549593.png","hash":"f182f51dc20f2a788882cc01273f45fcb5d7ad69","modified":1709095556240},{"_id":"source/img/album/bg.webp","hash":"5094c6163cbb405e4bc18d3427de5d4593077e2d","modified":1722929757541},{"_id":"source/_posts/04-python-string/image-20231214174641525.png","hash":"5bf82c5533c0a6ea0cc5b3363b9ba1ca7093076d","modified":1709095556242},{"_id":"source/img/album/road-I-walked-with-you-bg.webp","hash":"a45858a5c80aa813827b74f7e0a429f9efb7d4f0","modified":1722930467737},{"_id":"source/_posts/04-python-string/image-20231214175112464.png","hash":"88530c4fdb3f0cd0054210f50687c76bf25d5324","modified":1709095556243},{"_id":"source/img/reward/qrcode-alipay.png","hash":"c03a8b09b2c231a1b7a25219ceea4bb9692252ed","modified":1723107313872},{"_id":"source/_posts/04-python-string/image-20231208131933540.png","hash":"6c5537fe7a2532b2db7666890e836458190d9bd5","modified":1709095556239},{"_id":"source/_posts/04-python-string/image-20231208133942865.png","hash":"359a729546cebcf37c43e42275e5b5b3706a869b","modified":1709095556241},{"_id":"themes/anzhiyu/source/css/_extra/home_top/random-banner.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1722786823806},{"_id":"themes/anzhiyu/.gitignore","hash":"d507747699b68b0ec536b91d8be526c71ccf5c74","modified":1722786823786},{"_id":"themes/anzhiyu/README.md","hash":"46c4c8c308bd18c813da6b37356c7953f0d2e4af","modified":1722786823786},{"_id":"themes/anzhiyu/.DS_Store","hash":"5685d455580888552d49e44acdb4358814ee2625","modified":1722928738716},{"_id":"themes/anzhiyu/README_EN.md","hash":"3b27231432adf2bd180857fc6d3de646dfd444bf","modified":1722786823786},{"_id":"themes/anzhiyu/plugins.yml","hash":"42ddaf22eccf3a3ae3ee516cf121b7c72d72ad4a","modified":1722786823797},{"_id":"themes/anzhiyu/_config.yml","hash":"717cf2611dfd9458ee4280ba4af8f007cb9d7d34","modified":1722786823786},{"_id":"themes/anzhiyu/package.json","hash":"b54ce7a96ca8f4102b42003c0301b154738b8520","modified":1722786823797},{"_id":"themes/anzhiyu/layout/category.pug","hash":"1d55b22a50675d1ecfb95d031ea011245c7c6511","modified":1722786823787},{"_id":"themes/anzhiyu/layout/archive.pug","hash":"b8778e55f1aab2431daa4a64cba991ef40e33224","modified":1722786823787},{"_id":"themes/anzhiyu/layout/index.pug","hash":"cf1b756e06864a47352bb9890519eafcf5d0340d","modified":1722786823796},{"_id":"themes/anzhiyu/layout/page.pug","hash":"98e81d10e6caab2ff79b4a2788d2312acded36ef","modified":1722786823796},{"_id":"themes/anzhiyu/source/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1722786823817},{"_id":"themes/anzhiyu/layout/post.pug","hash":"0d8d8cfd31e97053c908dac3ee19072825a6a2dc","modified":1722786823797},{"_id":"themes/anzhiyu/layout/tag.pug","hash":"354b85519feab71c0233eb240655d0e0ec67021c","modified":1722786823797},{"_id":"themes/anzhiyu/languages/default.yml","hash":"be22c8d1730408a2ac3ec9a57406e297fc1f7ce6","modified":1722786823786},{"_id":"themes/anzhiyu/languages/zh-CN.yml","hash":"dbd5b387322693ed53df84eab709bf04ffeb8b81","modified":1722786823786},{"_id":"themes/anzhiyu/languages/en.yml","hash":"4c46ef35360b8322269417bcae68e609ca8f85be","modified":1722786823786},{"_id":"themes/anzhiyu/languages/zh-TW.yml","hash":"0e0b432912390e3de9d99bc54add99e4d265d3d1","modified":1722786823786},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"3978be1ecdd21be564aa590b17eda6f03cd77e19","modified":1722786823785},{"_id":"themes/anzhiyu/.github/workflows/issue_close_question.yml","hash":"a7f1bf4578faa6092898a9a44bfd467cbb1788dd","modified":1722786823785},{"_id":"themes/anzhiyu/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1722786823786},{"_id":"themes/anzhiyu/sw-rules.js","hash":"ae946d1b197940f8021d81a65474ea474a82c0cf","modified":1722786823827},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"53260c55a97ed93e6a1f9acc23b9d21193cae6ef","modified":1722786823785},{"_id":"themes/anzhiyu/.github/workflows/issue_close_stale.yml","hash":"6151bdec23ded908adf01ba5ecdf3c0da573449d","modified":1722786823785},{"_id":"themes/anzhiyu/.github/workflows/issue_duplicate.yml","hash":"42a8e022434604081fe443d416bd443efd887015","modified":1722786823785},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/config.yml","hash":"a23b745378bc745b15f2dfefcc6a203d5d1d5fcd","modified":1722786823785},{"_id":"themes/anzhiyu/.github/workflows/issue_invalid.yml","hash":"8cdde230c8f9330cc7cd5c149ea5fc258ffb0b8b","modified":1722786823785},{"_id":"themes/anzhiyu/.github/workflows/issue_question.yml","hash":"72ce6e36847f20952d8f8742e4fd1969cd086320","modified":1722786823785},{"_id":"themes/anzhiyu/.github/workflows/issue_wontfix.yml","hash":"3b498c22281bb454f8ee1135a4becee0adc5b9ae","modified":1722786823785},{"_id":"themes/anzhiyu/layout/includes/bbTimeList.pug","hash":"0a0c4cdf69314c3a9ecb078f4213c76129a9ac06","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/404.pug","hash":"aa158d5a661aa2fab4737b9460ce34f6784fdee5","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/additional-js.pug","hash":"d7e42261a79651ce13ff2213947ecb3e4c41ee81","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/categoryGroup.pug","hash":"243f63820db5f3241e682ae8f3baffd6501df3de","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head.pug","hash":"8db5b7382011745f53b99b5b5577ae28140068e2","modified":1722786823788},{"_id":"themes/anzhiyu/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1722786823785},{"_id":"themes/anzhiyu/layout/includes/footer.pug","hash":"50131aa8ad85fd6c08d8e1cb2d3dcfceb5964abe","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/layout.pug","hash":"3bc51657414be0c94bd27752616cc7f7d54f20cd","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/pagination.pug","hash":"1e0be343f9bdc6cefc5ff0dd3c2936ed91d5be86","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/mourn.pug","hash":"d114b9493fbe6551b0c4ad1c1d8886b7f98a0d60","modified":1722786823790},{"_id":"themes/anzhiyu/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1722786823785},{"_id":"themes/anzhiyu/layout/includes/rightside.pug","hash":"d865835bc5432d8ec15fd0cb168643f3e9b77a18","modified":1722786823791},{"_id":"themes/anzhiyu/scripts/events/404.js","hash":"170e72e851257365468024557c767360c3deafbf","modified":1722786823797},{"_id":"themes/anzhiyu/scripts/events/cdn.js","hash":"39aaf1d4fed1382c85776581225747285b7b388c","modified":1722786823797},{"_id":"themes/anzhiyu/layout/includes/sidebar.pug","hash":"fd6d7873df74994ed6a36bd07a438c427db97e18","modified":1722786823791},{"_id":"themes/anzhiyu/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1722786823797},{"_id":"themes/anzhiyu/scripts/events/init.js","hash":"006401bd6f4bb3fc8756e752d6ab93bf770bb77f","modified":1722786823797},{"_id":"themes/anzhiyu/layout/includes/music.pug","hash":"163f5bbeadbe481a809652e6ce453022db26694a","modified":1722786823790},{"_id":"themes/anzhiyu/scripts/events/merge_config.js","hash":"4bc10659ac9b483032a13bd3d7bce9094fd7c58b","modified":1722786823797},{"_id":"themes/anzhiyu/scripts/events/welcome.js","hash":"3177e070519a10fff904595e152a329115d22c61","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/aside_archives.js","hash":"ca03ba2a0a7f2132ac5d3f66cb1bbd9e078aed3f","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/aside_categories.js","hash":"19244d6a9e42c34b9df2250be2467c352fa5fd41","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/catalog_list.js","hash":"aa38fd791d58df3fd518adf144578f160073d06e","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/events/stylus.js","hash":"675eee74f9efcbc846b89eb9ba41f130a95310ee","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/findArchiveLength.js","hash":"d8aa1a4824ba6b0df911af563ae5fb361257a88a","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/get_version.js","hash":"f2b7364706fc4d039da4a486e133baf7accf6836","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/random.js","hash":"d659d1d05c919d1abba2dc55439749e6e5b6e707","modified":1722786823798},{"_id":"themes/anzhiyu/layout/includes/shortcutKey.pug","hash":"dcf8fb7bbddd4a64626f4fcf2523ace2dfce879f","modified":1722786823791},{"_id":"themes/anzhiyu/scripts/helpers/page.js","hash":"0ee9ac8a03e6cf9f2df55c4c5abd83417a7cd1d4","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/sort_attr_post.js","hash":"6b6e9fb0d0dc38e8d7136dc7720c70f0c29619ab","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/filters/post_lazyload.js","hash":"61f06b25c09434340e81c8c3dbbd1a0d58406652","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/helpers/year.js","hash":"94f15ddba7d29cdcc4dd52ed6c35c9c29cc19d37","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/helpers/tags_page_list.js","hash":"35d71c025a3289be188371cc56320c563213c4af","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/helpers/related_post.js","hash":"c5f70efdbfd733f4dfec0ca8fe4aded0eec394cf","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/tag/Introduction-card.js","hash":"61a55f9b1f5f576e6900d2900cb42754575a4cb7","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/filters/random_cover.js","hash":"98275d777b3c388345de3ee8caf5d16900388925","modified":1722786823798},{"_id":"themes/anzhiyu/scripts/tag/bilibili.js","hash":"085e033cb359e8f109968748cedbd0079515e7c6","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/tag/btns.js","hash":"200e1ce72f335caa71dc8423f5c5e2aba1195b61","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/tag/dogeplayer.js","hash":"e9b0d88e38d3caf88b66ea39ca704d45c643ba51","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/tag/button.js","hash":"430c31584930bc5407811c3dbc01be92473cfcbf","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/tag/flink.js","hash":"5b0086d1b726d1068b3d8ee0563ae31485896c4b","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/folding.js","hash":"dc4e409eabebf5769b50c12c9e8c66b749d0ae85","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/gallery.js","hash":"0364b021f2519a937464e585a7e2cbdde57ca412","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/hide.js","hash":"37b81ff46d104554b9a5934bfd434dbfd6a84958","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/iconfont.js","hash":"ea983f7c8dd060ed411044df1c10aa6b72dec34f","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/image.js","hash":"0b7051574af6cf28c378db65f6c6dab722a8e118","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/label.js","hash":"87acd7d5615dd8034c51ba28d4964992d2ffed37","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/checkbox.js","hash":"fa93b169fe74bced502b0d16fe3d6bd17434b8f3","modified":1722786823799},{"_id":"themes/anzhiyu/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/media.js","hash":"76efb072e0716e55deedb044fed1ad585871335b","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/link.js","hash":"a5d49f1d0e4602b0fce158efd0b1ec02c0bfd3e3","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/mermaid.js","hash":"d3d6c8a23ddfecac35f7022eecd4ffc6171a37fa","modified":1722786823800},{"_id":"themes/anzhiyu/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1722786823801},{"_id":"themes/anzhiyu/scripts/tag/site.js","hash":"bc34bfab53f520bec33d273ee599de5905ca19a9","modified":1722786823801},{"_id":"themes/anzhiyu/scripts/tag/tabs.js","hash":"dea5cd52bb9fd658bc03074b2388d91ea528fc2b","modified":1722786823801},{"_id":"themes/anzhiyu/scripts/tag/span.js","hash":"0a2188be1e3ee6ed183c0f16d24795ef31116e10","modified":1722786823801},{"_id":"themes/anzhiyu/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1722786823801},{"_id":"themes/anzhiyu/scripts/tag/tip.js","hash":"e45a0955439dfbe6c0b4d27f8403896a0fb1d33b","modified":1722786823801},{"_id":"themes/anzhiyu/source/css/index.styl","hash":"ddded5cd1da248fdc30556a33877579ff8379a48","modified":1722786823817},{"_id":"themes/anzhiyu/source/css/var.styl","hash":"7bdedada1176e55d5fb72e3cc9f46e01d03b704a","modified":1722786823817},{"_id":"themes/anzhiyu/scripts/helpers/inject_head_js.js","hash":"847bc24452bc23dfc860b219588cfb2bff84cfbf","modified":1722786823798},{"_id":"themes/anzhiyu/source/js/tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1722786823827},{"_id":"themes/anzhiyu/source/js/utils.js","hash":"2519befd6127526c553d21117efc91a3b4a700f4","modified":1722786823827},{"_id":"themes/anzhiyu/source/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1722786823818},{"_id":"themes/anzhiyu/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1722786823818},{"_id":"themes/anzhiyu/source/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1722786823818},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1722786823818},{"_id":"themes/anzhiyu/source/js/main.js","hash":"888563ad7324e565e6f5060ca126d69c7309bef1","modified":1722786823825},{"_id":"themes/anzhiyu/layout/includes/bili-banner/index.pug","hash":"8cb1c404adc6fe188bdceca3c09d3f215048e9bd","modified":1722786823788},{"_id":"themes/anzhiyu/source/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1722786823818},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/ai-info.pug","hash":"0c2e9e58069880c0617208840cf2f0712339ddf0","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/clock.pug","hash":"c13b21cdcbc5280deb26537c58af5443cb66c62f","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/console.pug","hash":"d46c93a7a22129795cc856045967b0e07c5e53c2","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/log-js.pug","hash":"a44b4f89f39d1e32889849c3dd1403dffa2786a4","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/rightmenu.pug","hash":"2747252c6337d8fb7ba773cdb466611607f9a23b","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/head/Open_Graph.pug","hash":"dff5b967a641f385c4661fe66ad62d53cabf857a","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/tags-group-all.pug","hash":"bc16fa91883895544273161cc8672bfe5c010e5e","modified":1722786823787},{"_id":"themes/anzhiyu/layout/includes/head/config.pug","hash":"a26939a08947e936c3d8524a36ec3531edf8c5ef","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head/pwa.pug","hash":"a4cc65381275e09f3f54f6e958d359c89c7b2c4e","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head/config_site.pug","hash":"3038adec24b17f019bdd7d6aa15ebe091b11397d","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/head/preconnect.pug","hash":"56ef61e74598cf60551d363a15fc53842b8dc41b","modified":1722786823788},{"_id":"themes/anzhiyu/layout/includes/header/menu_item.pug","hash":"4537154b8830310ce5dff3c9cfd558f0ec1311a5","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/header/post-info.pug","hash":"0f1503c88d05ada69919e0bdbbf7b2ea1603d20b","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/header/index.pug","hash":"c865d51436cfd5413df6c691a7ab1f0eb600e79c","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/header/social.pug","hash":"2185b69eb54656ed9e401bc47ca3cd9905b022f3","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/loading/pace.pug","hash":"7f04cabd68f75d7f953503283316e1594bbec45f","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/loading/fullpage-loading.pug","hash":"39977280dd32f1435a97f285a75f2a02902472d6","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/loading/index.pug","hash":"f86b0c45874ae1335ab575c29d4f9c8ea09ab92a","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/mixins/article-sort.pug","hash":"7a06f5f24f8e32b3025cf43474db9519d48517e5","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/page/album.pug","hash":"0ca70f1ec4757d6127048d71762752dabf1af2ea","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/mixins/post-ui.pug","hash":"80858e19caf57c275cb7d6acf3bfff7d0c90c774","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/header/nav.pug","hash":"e567624b78d723346193a9b0d28032031997b865","modified":1722786823789},{"_id":"themes/anzhiyu/layout/includes/page/categories.pug","hash":"f23d074ef6875311e74169da7592ecf667539775","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/about.pug","hash":"fa529ca6b5ab9001822668697f410cc3020980ad","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/equipment.pug","hash":"87ca40c49ddfe9c266cd96b4eb3594d7c64c1d55","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/album_detail.pug","hash":"c735533f7671905d06bae5645306cd08abb0b43c","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/essay.pug","hash":"b0a25ded52c72c84bd29593bd7a57046c4b36195","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/tags.pug","hash":"62882d8a699254486add2f7b0f089521732e4869","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/page/flink.pug","hash":"56638092eef96fdb0072967fb95b857e31144fe2","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/page/music.pug","hash":"3cbec3b3dc0f0e812f29c222ebb2d2a3d8c2719f","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/page/room.pug","hash":"c35a2fb076e0196ba28389b5309dde33a2add576","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/page/fcircle.pug","hash":"a4bfc9855bcfc859f0c04e869e0ec8cb8d2a1357","modified":1722786823790},{"_id":"themes/anzhiyu/layout/includes/post/reward.pug","hash":"cdf5ff34ba8efe526cfe77ddf3277d997d172d41","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/popup/index.pug","hash":"3ac8714556f94a614100aeddeb7f7e0cdff2fb9c","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/post/ptool.pug","hash":"173d1a63099109bd909de919281db9f2b2a023f0","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/post/post-copyright.pug","hash":"10638ede3b9ea1ef4e336f5c4d690239ef353843","modified":1722786823791},{"_id":"themes/anzhiyu/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/footerBarSubtitle.pug","hash":"bb2df2fbbdc9fe0f4b9d66928247faa49f70e2e5","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/pjax.pug","hash":"4ee026b34e6ecc2c03cf04933973b496472309c2","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/top/top.pug","hash":"9f849b05e220efa72d56f524a27ab2877e27e9e3","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/widget/card_announcement.pug","hash":"ed8796dd3c5710d745fdcc0021b02a3cda07fd1b","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_archives.pug","hash":"8c095ae91183d6a2aeed64f378e60baaa29d4065","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_archives.pug","hash":"9ca97d85cc7b214e1107d0b4feac4d8ad2fd0ac8","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_author.pug","hash":"b7e11bcd199f343a844315e5d16735205dded9d2","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_tags.pug","hash":"d723516d48cd94a68819df5c61087c9e7339e2af","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_newest_comment.pug","hash":"419eed9a771299c9ffb85fdf38073bbd5bd7775c","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_tags.pug","hash":"3475134643b70cbf0e806806bd2e0d2a7371f8a5","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_post_toc.pug","hash":"638417324111b66c834314b96cbf02e959be58f4","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_recent_post.pug","hash":"544272cb0977b8a941de22f1f58f76d370b2cbbd","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_weixin.pug","hash":"28f11437bcba4df1e53fc1e32df213392b9ca4b6","modified":1722786823796},{"_id":"themes/anzhiyu/layout/includes/widget/card_webinfo.pug","hash":"5ddf285ca0ecbb57cbbbc36a4e9eaaca40406257","modified":1722786823796},{"_id":"themes/anzhiyu/source/css/_global/function.styl","hash":"e91b257ce982b670eb911c7120f379960083c959","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_global/icon.styl","hash":"da488461e8c5e504961c0a8f44b1e3605f72f956","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_global/index.styl","hash":"55850e21e138a0ad8250f4b2ff38412fdb343d1d","modified":1722786823808},{"_id":"themes/anzhiyu/layout/includes/widget/index.pug","hash":"e33c360217b11a7980e780a5bc20e9d31f5dacf5","modified":1722786823796},{"_id":"themes/anzhiyu/source/css/_global/loading.styl","hash":"734c69c16135543267794e12b43e776d501fb6ca","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_highlight/highlight.styl","hash":"4a1f547d921d1b44f1221e60a42666a63a19e5a1","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_highlight/theme.styl","hash":"c074efc93f4f118c3fc3b3d3c9f9abc42e4858b4","modified":1722786823809},{"_id":"themes/anzhiyu/source/css/_layout/404.styl","hash":"02a8df2e9734848cc4670a4b9f6e9a776e995644","modified":1722786823810},{"_id":"themes/anzhiyu/source/css/_layout/aside.styl","hash":"b62fbde63342f779b4dd27492e6da878c25f7dfb","modified":1722786823810},{"_id":"themes/anzhiyu/source/css/_layout/banner.styl","hash":"62f4202467cc9f313361911ed2a2005e66b3b2ca","modified":1722786823810},{"_id":"themes/anzhiyu/source/css/_layout/footer.styl","hash":"ce21052dd27e752c3734083ec1401b96c542bfda","modified":1722786823811},{"_id":"themes/anzhiyu/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1722786823810},{"_id":"themes/anzhiyu/source/css/_layout/comments.styl","hash":"3dbb4c0e1ef79eab1f327d303c3aed61ddc3f58c","modified":1722786823811},{"_id":"themes/anzhiyu/source/css/_layout/home_top.styl","hash":"c975f539ae6bed3b24c9dc3914b412f179ee2543","modified":1722786823811},{"_id":"themes/anzhiyu/source/css/_layout/oneGraphFlow.styl","hash":"1e5843caf8674429a5782712879c4a532074514d","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/head.styl","hash":"bfb5d818394942ea243a1a0379521d4de4ca4010","modified":1722786823811},{"_id":"themes/anzhiyu/source/css/_layout/nav.styl","hash":"200ddfe40c4a820af25fcfa71aa450b22741f6df","modified":1722786823811},{"_id":"themes/anzhiyu/source/css/_layout/pagination.styl","hash":"88f2fbb0ccb061410b07e1ed6303583230e96d4e","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/post.styl","hash":"2a4a8af05bc24edbd14c4160b17489242164727f","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/ptool.styl","hash":"2ffeca0499c6ad1c4ea2ef783d7493b713b24569","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/relatedposts.styl","hash":"c67558ba609b59375f8ee6ad479fcb16ddda9cb6","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/reward.styl","hash":"152b802a38f029dece2b8f8812404cec25975212","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/rightside.styl","hash":"bebc753a414d3fb807b5bf8dfeb87fe602e92e73","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_layout/rightmenu.styl","hash":"cc622c70ff61ef70dfa6445b5b4b09eb92cf9994","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_mode/darkmode.styl","hash":"43391bb6a4d1908c87515851c41b8d97b847b49b","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_layout/third-party.styl","hash":"a6b708dfeda4ad837bbfc76bd74810805ca521a0","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_layout/sidebar.styl","hash":"57d6857a1209dacb6f3fd0eb3c3f539fef3a2daf","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_mode/readmode.styl","hash":"a5a27dea73ed993ce81ca691eff9eb71c2b311a7","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_layout/shortcutKey.styl","hash":"ca7674768558396a8e2f9eaa452575bff099e4e8","modified":1722786823812},{"_id":"themes/anzhiyu/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_page/about.styl","hash":"72a3345b9791fcf51bb74ff6eebfda4674e8f60d","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_page/archives.styl","hash":"8652be12d88083f71a1efb88a2482a0aeda2c65f","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_page/common.styl","hash":"99ca9cb011349c045ed779bd5db9763c2073bbfe","modified":1722786823813},{"_id":"themes/anzhiyu/source/css/_page/equipment.styl","hash":"8ed450c37e8b5b5d6ce04245b54fc0877b0ad0d9","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_page/homepage.styl","hash":"7b2b2b4a7f3139f7db2d535b2ed7167db8bfd0ed","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_page/flink.styl","hash":"990a1b5d937980ec1f6f764f4b5ce371279cc451","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_page/music.styl","hash":"290dd82c05bc21a0f22a7b666f2af233e9e8bbb2","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_search/index.styl","hash":"fd2833ec664a9de9a7b3dd1cade7d65e3ad80ddd","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_page/reward.styl","hash":"3a6e95f58b1692c6ee67a669fc965d9dea026186","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_page/tag_page.styl","hash":"704a74185d0e872ca3358567a2ecede5c2d35910","modified":1722786823814},{"_id":"themes/anzhiyu/source/css/_tags/Introduction-card.styl","hash":"ec70e67c2a8bc1a0ebe536091d97bc326faf9973","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/bilbili.styl","hash":"081833e071be562201c56ec4db000b7ac144a39a","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/btns.styl","hash":"903b571a6e352e5014e35e9a675b7d2d6e5b82bd","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/button.styl","hash":"af1840996356aeae6ffbee49ab86aa7834ab18a0","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/checkbox.styl","hash":"2a31f4c0cd31f67342564ef22254eb317d82f331","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/folding.styl","hash":"537320d4762bef842beabfbde9b27f0e2ece2ba6","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/hide.styl","hash":"810c54530d3799fe492d9c3d4842ab5ca4243092","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/gallery.styl","hash":"697408d915056ae6e6814e0f24ca013f68227f74","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/inline-labels.styl","hash":"d9bdac4ca48b19cc028efc1a084ebf99c38bb8ec","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/image.styl","hash":"4cf305b1d57d0c9bfe948f916fe9b124ee62fc0a","modified":1722786823815},{"_id":"themes/anzhiyu/source/css/_tags/media.styl","hash":"05a249c807cd7760492a9ef5914b3e363d7d1028","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/note.styl","hash":"3b357c94cb8e80039cc1689161637d5b9690ff18","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/site-card.styl","hash":"5ff77bfa663aca406e3a0bd822da0d6e3c3c2c8b","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/span.styl","hash":"f75112e431fcbef352a7ee7f0aa85e8b2f0b4a26","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/timeline.styl","hash":"3076b68fece8ef394cbd44570037e5e479fdd277","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/tabs.styl","hash":"b0dc66d3daafe8c3a022f7235de3d8224cb56ec9","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_tags/tip.styl","hash":"0f712be285681bac71e96c48d0836b8fea52bf6f","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_third-party/normalize.min.css","hash":"007ada04a97d0fcaf55ee840a03f2f10b9abcbff","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_third-party/snackbar.styl","hash":"47a90d6a87744c6e4ced18b95220debef8f278d0","modified":1722786823816},{"_id":"themes/anzhiyu/source/css/_third-party/twikoo.styl","hash":"51475a99ec3281fb98ca8707e28064f91dd9c68a","modified":1722786823817},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1722786823825},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1722786823825},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1722786823825},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1722786823825},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1722786823825},{"_id":"themes/anzhiyu/source/js/search/algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1722786823826},{"_id":"themes/anzhiyu/source/js/search/local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1722786823827},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1722786823824},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1722786823824},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1722786823824},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1722786823824},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1722786823824},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/waline.pug","hash":"b40b0cbd0389f03fed5ddf624fa598613135046a","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/artalk.pug","hash":"6b8e29a8ad921ae50f8c43b8b7459ddc152b05ed","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/index.pug","hash":"a20dd36c318c7a37870fbc9dcecbc03f94ade817","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/index.pug","hash":"9eff7757c825d776edde1c1dd09623a91d891e6b","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/tidio.pug","hash":"76b08a6da3eed8f90304fa6546783e5c04a792fb","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/artalk.pug","hash":"a486578b5b9cd130dbe22e7b4ad5cbe724dc4678","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1722786823792},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/twikoo.pug","hash":"1582986ede8a9c727004d1dc114bd7ee92880641","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/index.pug","hash":"a77f0e963a59ab2e28c7ce294d4bb951a0262877","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/valine.pug","hash":"e54a60b1795721153faaa887b46a68b68bcd3abc","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/js.pug","hash":"d7ec11022237359926a4ff1d3aa8355c1713765e","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/math/katex.pug","hash":"235fb3c8b4da8ec6b010d4d30d3594d3dbfd0bbe","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mermaid.pug","hash":"10f3949da0889c1ec3e3617da290927d834d1f6d","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/index.pug","hash":"6dafa98f6082e909c00396a4793ed3e7c866f824","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1722786823793},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/artalk.pug","hash":"bbaaa94d99c345f7412803a98bf3d83722743dfb","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"3b20540a0e687cb05fd71a716e78f16a175a7d58","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/valine.pug","hash":"3de61f1b229f2928ae120ecfa6166862c1735d18","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1722786823794},{"_id":"themes/anzhiyu/source/css/_search/algolia.styl","hash":"f7cb2effef6b4e587fad385d7c11b4b23c110589","modified":1722786823814},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/waline.pug","hash":"3fbf5700aedaa63ea09e8f68c063961db785fa44","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/search/algolia.pug","hash":"fbdeb32013088e8f7f4c8a6a1f20622e58dc09c2","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/third-party/search/docsearch.pug","hash":"cb42537ea530d6679a46a1db092da0e91756b2c3","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/third-party/runtime/runtime-js.pug","hash":"63391ff01fd55d8c48b3a9e46d83d4af75908ffb","modified":1722786823794},{"_id":"themes/anzhiyu/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/third-party/search/local-search.pug","hash":"d3f133564dda5e2c51661a914ae5aab8fb9dbaf6","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1722786823795},{"_id":"themes/anzhiyu/layout/includes/third-party/share/index.pug","hash":"b0e932171cbdfeb8a98bc1e8b78172f672f5fdfd","modified":1722786823795},{"_id":"themes/anzhiyu/source/css/_extra/album/album.css","hash":"d3938a8e6edcf2be0dff02728f605406feba800d","modified":1722786823801},{"_id":"themes/anzhiyu/source/css/_extra/catalog_list/catalog_list.css","hash":"a1551158577967485ebce34cc3b19040d7e4ab64","modified":1722786823802},{"_id":"themes/anzhiyu/source/css/_extra/anzhiyu/custom.css","hash":"a5dbdba8a227e9cbd6ca7926b526db8bb40f11bd","modified":1722928791508},{"_id":"themes/anzhiyu/source/css/_extra/album/album_detail.css","hash":"b75189ece986fa6b645751791a72d2783fbae05f","modified":1722786823802},{"_id":"themes/anzhiyu/source/css/_extra/aside_weixin/aside_weixin.css","hash":"17015ed4c296ea890e807716c6abe0a11ddcb906","modified":1722786823802},{"_id":"themes/anzhiyu/source/css/_extra/clock/clock.css","hash":"b91f3216c6e859f89d9348bd9517c764e607402d","modified":1722786823803},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/home_essay_bar.css","hash":"bfb259092223dcdfcb1a652330dc8ea1236fe76c","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/essay_page.css","hash":"0d62e0d6b6f57fce49d347c8ce969071933dcd45","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/code/code.css","hash":"976b68722d6698d7687f362532d7a0e6b6050d3e","modified":1722786823803},{"_id":"themes/anzhiyu/source/css/_extra/commentBarrage/commentBarrage.css","hash":"a1355fe5e03c5e5dbd17761cc7a80fa9758c5891","modified":1722786823803},{"_id":"themes/anzhiyu/source/css/_extra/categoryBar/categoryBar.css","hash":"b9ab5612f4d24092388defcb8db7399445a10710","modified":1722786823802},{"_id":"themes/anzhiyu/source/css/_extra/code/details_summary.css","hash":"30b01d74157aaccea84c4c0d7e0ebb65f5a7f9c9","modified":1722786823803},{"_id":"themes/anzhiyu/source/css/_extra/console/console.css","hash":"f61b9504a5f7b33d7508c9c5201c0c21ae9f8d53","modified":1722786823803},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-bangumi.css","hash":"81567514e32d5c2cc647aff121f405c7a7b50897","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/aplayer.css","hash":"00aee0451ccb5b2f402ecb7f358acf78c53cee60","modified":1722786823804},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/waline.pug","hash":"b996993c61e53be6a46dd78634c95ab8e42fb4ab","modified":1722786823793},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-ratio.css","hash":"ad6edf2b75dd717e9dff9fe4ca4db79c1599a6f9","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/categories.css","hash":"563bd4583007329c6e34c28883ee26a39af6c8f3","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/gitcalendar.css","hash":"f99c63423cbedb8f12ccea673d8e79e10a4cfb6c","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/fix/clock.css","hash":"90e0bce1341d9e01aa0efaf9c70256ef5fe6139b","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/comments.css","hash":"667a4182d046cb6bf0561bdb7fe8c788ae79438f","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/dark.css","hash":"febe18af9e0cc45c6a35f0e0ef085c182985afa6","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/hexo-tag-dplayer.css","hash":"90e6ba180e0b9267aa0bf27eb9f0a1d2e9cb3ecc","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/fix/link_page.css","hash":"69e5ed458c0dc10d93ebb7e4943196be1167ed5a","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/fix/fcircle_page.css","hash":"02ce333e7f9ed6b9756a6706475192e2fd3fbd4b","modified":1722786823804},{"_id":"themes/anzhiyu/source/css/_extra/fix/hide-block.css","hash":"15e0c13f8451bfe36fa5e464b86767bd98cab70b","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/fix/overflow.css","hash":"71e3bd9905684e6e2ba6e18282e982d96dc4d61d","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/fix/radius.css","hash":"6ef242f7a79427da9651a26c8a07e4e56ac56a42","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/fix/site-card.css","hash":"0a662f62c69d36ac583528c02346d848aa1d026a","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/footer/footer.css","hash":"d94ed305398eb831b9e7160ce54510b0d25fcf67","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/friends/friends.css","hash":"a2e50f529aa1fd60732d9a892166bb1d3ae725d7","modified":1722786823805},{"_id":"themes/anzhiyu/source/css/_extra/home_top/categorygroup.css","hash":"bc5b8a6cddca8c36a96ea5ecd1e56a5860bbb09a","modified":1722786823806},{"_id":"themes/anzhiyu/source/css/_extra/greeting_box/greeting_box.css","hash":"208ba729979dffdaa2f82639027a09b8c64fc5c2","modified":1722786823806},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top_post_group.css","hash":"04d9a3bd9cb247f4c391af0cd7cb47206974ceaf","modified":1722786823806},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top.css","hash":"4bf724bd2f1a0447532456c60701e79b906c8dd0","modified":1722786823806},{"_id":"themes/anzhiyu/source/css/_extra/home_top/top_group_banner.css","hash":"909b63f4b66c1c324ea302e93b3cb7c038306d0b","modified":1722786823806},{"_id":"themes/anzhiyu/source/css/_extra/home_top/swiperstyle.css","hash":"ea249de8cebc68cda7e62705df2acd7c78d13f37","modified":1722786823806},{"_id":"themes/anzhiyu/source/css/_extra/local_search/local_search.css","hash":"d3bc30e147897fb3026284d4244c4cf195d4588a","modified":1722786823807},{"_id":"themes/anzhiyu/source/css/_extra/reward/about-reward.css","hash":"f95871737b0e883ab70b30948b2cd4339bf36756","modified":1722786823807},{"_id":"themes/anzhiyu/source/css/_extra/reset/reset.css","hash":"0617cd338ebe4be2820d03d88376b30e0f378c1c","modified":1722786823807},{"_id":"themes/anzhiyu/source/css/_extra/single_card/single_card.css","hash":"1559219f059389933e435dd081af5e6e17ef4b75","modified":1722786823807},{"_id":"themes/anzhiyu/source/css/_extra/runtime/runtime.css","hash":"7fd033212b0dcdb06ca7f7a83343ea1b6044d59c","modified":1722786823807},{"_id":"themes/anzhiyu/source/css/_extra/tag/link.css","hash":"dbc87df28d7dfa366ab3c91ac61967ac48d7877c","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_extra/skills/skills.css","hash":"6dcf742c38dcdf988e3d6f545fbfa0227d3155ea","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_extra/room/room.css","hash":"82eb83dc296c045b0388cd9417ff1bc822e46f41","modified":1722786823807},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1722786823809},{"_id":"themes/anzhiyu/source/css/_extra/tag/site.css","hash":"631a068d827a84a46fa03282b4ca38936c4bc4f3","modified":1722786823808},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/index.styl","hash":"75b01603cacde3b58cc2719dce1f72458ecf3842","modified":1722786823809},{"_id":"source/_posts/post-name/image-1.png","hash":"d02e3b545b0d84b5c99c3dc0ac40b2920586780e","modified":1723043692368},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1722786823809},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/index.styl","hash":"7751de787861a9b45cf3879fb18601abc8935bde","modified":1722786823809},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1722786823809},{"_id":"themes/anzhiyu/source/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1722786823817},{"_id":"source/_posts/hello-world/image.png","hash":"c7599a6d4947bec30f7c25c039699ac6b96d3042","modified":1723043493094},{"_id":"source/img/079A23792.jpg","hash":"8c8009b2a81118509e3ef25615fead3ec346cda9","modified":1723091521200},{"_id":"themes/anzhiyu/source/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1722786823820},{"_id":"source/img/album/3Z2A5645.jpg","hash":"32bdd507fec18c872d39ccfeb0b5cdd3d0bcfa60","modified":1722925933543},{"_id":"themes/anzhiyu/source/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1722786823823},{"_id":"source/img/3Z2A5708.jpg","hash":"793a36b69ffd4f35a306ecb56d1903aace55dfd2","modified":1722926093391},{"_id":"public/static/js/busuanzi.pure.mini.js","hash":"a30fcd42f277944e6524b99f2412b1f01880b813","modified":1723308036312},{"_id":"public/search.xml","hash":"6b0048c7a5a85852181ce80ba848d78ba4f0543b","modified":1723308036312},{"_id":"public/anzhiyu/random.js","hash":"20f9a93a9dd211e2a1c17a3f65f6c0f1a5d5b147","modified":1723308036312},{"_id":"public/dailyPhoto/index.html","hash":"0ee47b575cc974b514728ffa276e8163f20b0b88","modified":1723308036312},{"_id":"public/404.html","hash":"65669fa618ac974f4dd9164aa3c2e648a50b896d","modified":1723308036312},{"_id":"public/road-I-walked-with-you/index.html","hash":"9ea3b627815916b41863c8d91b33a4948489cc34","modified":1723308036312},{"_id":"public/album/index.html","hash":"5560213815362d823bd402f971a50dd7a2647a72","modified":1723308036312},{"_id":"public/posts/c0155143.html","hash":"68a96826069ad08dd1217a67befa8138952ed7de","modified":1723308036312},{"_id":"public/posts/9776190d.html","hash":"4bc6062f8d58a889eb7eed811b8a022f940c64c4","modified":1723308036312},{"_id":"public/posts/fa256f4b.html","hash":"defe0bb983035b52bf8f88c9272f778bc3b18c27","modified":1723308036312},{"_id":"public/posts/4a17b156.html","hash":"bc72f480d40d7b47c680984f0d65fcc965a856ab","modified":1723308036312},{"_id":"public/archives/index.html","hash":"eed6ac5731ce127cf58315e323ccc88ba6396adb","modified":1723308036312},{"_id":"public/archives/2023/08/index.html","hash":"51ebc2f5530e648f81c3935d21cef4fcf2ece6fe","modified":1723308036312},{"_id":"public/archives/2023/12/index.html","hash":"bb4181ccecf63f13b129f7fd8bb4b279272bd63e","modified":1723308036312},{"_id":"public/archives/2023/index.html","hash":"e73a40bdb18639b167194bf79ee3bd91e5c0b7c2","modified":1723308036312},{"_id":"public/archives/2024/index.html","hash":"d3200a3de3fe0927cf8c97b8006afb37a772c70b","modified":1723308036312},{"_id":"public/archives/2024/08/index.html","hash":"b3f8accd27bef1a8cc23e32b463e7b2e7153fb39","modified":1723308036312},{"_id":"public/index.html","hash":"166b5dc96be70d2887a24115c5505be92b0b8621","modified":1723308036312},{"_id":"public/tags/Java/index.html","hash":"afcc1dfc9bd26d4c8ae6f49ad8acdfa1d67c2245","modified":1723308036312},{"_id":"public/tags/Python/index.html","hash":"28991dde7df34d3eb327ded7641e616f06b02cbe","modified":1723308036312},{"_id":"public/categories/测试是个分类/index.html","hash":"90338bcfe484eca1a77c05d88ebfcf8af868d773","modified":1723308036312},{"_id":"public/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1723308036312},{"_id":"public/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1723308036312},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1723308036312},{"_id":"public/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1723308036312},{"_id":"public/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1723308036312},{"_id":"public/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1723308036312},{"_id":"public/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1723308036312},{"_id":"public/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1723308036312},{"_id":"public/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1723308036312},{"_id":"public/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1723308036312},{"_id":"public/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1723308036312},{"_id":"public/img/favicon.svg","hash":"69232e2a0eff5aaeb86efb83f0592bb28800c036","modified":1723308036312},{"_id":"public/img/645fa415e8694png.png","hash":"a152ede5b36d39ebf0f1199506a011cf1962c59f","modified":1723308036312},{"_id":"public/img/63c02edf44033.png","hash":"2924a1b6ec4e380986e9e793a648075b5883a193","modified":1723308036312},{"_id":"public/CNAME","hash":"b94be03b9fbcf5980542d4680af817c38c1dc09f","modified":1723308036312},{"_id":"public/img/FPM.svg","hash":"9761d8b94e8795b854ef0bba96d4eed70e2ce4cb","modified":1723308036312},{"_id":"public/img/gzh.png","hash":"600e2e8221f936413a3ea9eecbdb924e759e323a","modified":1723308036312},{"_id":"public/img/xionmaotanjita.svg","hash":"d87e55d39d2adcddd55dd2cfee844ac562371e8c","modified":1723308036312},{"_id":"public/img/footer/Copyright-BY-NC-SA.svg","hash":"5fb0185b49b14be559ac7e6dc939230314a7edfc","modified":1723308036312},{"_id":"public/img/footer/Bornforthis-下班啦.svg","hash":"d22b3dcb947685fe64347a9e2c244ede74c1a1c6","modified":1723308036312},{"_id":"public/img/footer/CDN-多吉云-3693F3.svg","hash":"b4da35af6bf5d95d446223e058cb2f90932c21ed","modified":1723308036312},{"_id":"public/img/footer/Source-Github.svg","hash":"340e513ee9b0c90024e3b7d53c6bd4596a2ab15f","modified":1723308036312},{"_id":"public/img/footer/Theme-AnZhiYu-2E67D3.svg","hash":"8acfa788c4d4b04622cb338b1104ef01eda0c90d","modified":1723308036312},{"_id":"public/img/footer/Frame-Hexo.svg","hash":"ad099d62bd58260d278a63882e6e162b6fdad910","modified":1723308036312},{"_id":"public/img/footer/bornforthis-上班摸鱼中.svg","hash":"5faa7b1c7b42b3d870191a8f6465c8a1ae693b2a","modified":1723308036312},{"_id":"public/img/icon/icon-ai-01.svg","hash":"787f0a661ca800665acc19659e5b720ef4c48b3e","modified":1723308036312},{"_id":"public/img/reward/qrcode-weichat.png","hash":"d46017a3e7cb7108b015620f77ac826e82bdbf3c","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231208141259131.png","hash":"cb4a843032da4d757fce26a381f33bc8e7ebd544","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231211161559839.png","hash":"ce0a86af623477a12cf86788c858f646949e0dee","modified":1723308036312},{"_id":"public/img/album/bg.webp","hash":"5094c6163cbb405e4bc18d3427de5d4593077e2d","modified":1723308036312},{"_id":"public/img/album/road-I-walked-with-you-bg.webp","hash":"a45858a5c80aa813827b74f7e0a429f9efb7d4f0","modified":1723308036312},{"_id":"public/img/reward/qrcode-alipay.png","hash":"c03a8b09b2c231a1b7a25219ceea4bb9692252ed","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231208133549593.png","hash":"f182f51dc20f2a788882cc01273f45fcb5d7ad69","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231214174641525.png","hash":"5bf82c5533c0a6ea0cc5b3363b9ba1ca7093076d","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231214175112464.png","hash":"88530c4fdb3f0cd0054210f50687c76bf25d5324","modified":1723308036312},{"_id":"public/css/index.css","hash":"01a42e71aa2d4cca4a89b7905754fa3d25c9c5b0","modified":1723308036312},{"_id":"public/js/main.js","hash":"888563ad7324e565e6f5060ca126d69c7309bef1","modified":1723308036312},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1723308036312},{"_id":"public/js/utils.js","hash":"2519befd6127526c553d21117efc91a3b4a700f4","modified":1723308036312},{"_id":"public/js/anzhiyu/comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1723308036312},{"_id":"public/js/anzhiyu/random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1723308036312},{"_id":"public/js/anzhiyu/right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1723308036312},{"_id":"public/js/anzhiyu/people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1723308036312},{"_id":"public/js/anzhiyu/ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1723308036312},{"_id":"public/js/search/local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1723308036312},{"_id":"public/js/tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1723308036312},{"_id":"public/js/search/algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1723308036312},{"_id":"public/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231208131933540.png","hash":"6c5537fe7a2532b2db7666890e836458190d9bd5","modified":1723308036312},{"_id":"public/posts/fa256f4b/image-20231208133942865.png","hash":"359a729546cebcf37c43e42275e5b5b3706a869b","modified":1723308036312},{"_id":"public/posts/9776190d/image-1.png","hash":"d02e3b545b0d84b5c99c3dc0ac40b2920586780e","modified":1723308036312},{"_id":"public/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1723308036312},{"_id":"public/posts/4a17b156/image.png","hash":"c7599a6d4947bec30f7c25c039699ac6b96d3042","modified":1723308036312},{"_id":"public/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1723308036312},{"_id":"public/img/079A23792.jpg","hash":"8c8009b2a81118509e3ef25615fead3ec346cda9","modified":1723308036312},{"_id":"public/img/album/3Z2A5645.jpg","hash":"32bdd507fec18c872d39ccfeb0b5cdd3d0bcfa60","modified":1723308036312},{"_id":"public/img/3Z2A5708.jpg","hash":"793a36b69ffd4f35a306ecb56d1903aace55dfd2","modified":1723308036312}],"Category":[{"name":"测试是个分类","_id":"clzod40h90007jp8n2xrx321q"}],"Data":[{"_id":"album","data":[{"class_name":"与你共同走过的路","path_name":"/road-I-walked-with-you","type":2,"description":"因为爱无法停留在某一刻，所以才说爱意涌动～","cover":"/img/album/3Z2A5645.jpg","top_background":"/img/album/road-I-walked-with-you-bg.webp","rowHeight":220,"limit":10,"lazyload":true,"btnLazyload":false,"url":false,"top_link":"/album","top_btn_text":"返回","album_list":[{"date":"2024/08/07 14:25:38","content":"湘潭的一角。","address":"湖南湘潭","from":"AI悦创","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db122.webp"]},{"date":"2022-10-25T00:00:00.000Z","content":"洛阳暴雨后的天空。","address":"河南洛阳","from":"紫菜卷","image":["https://bu.dusays.com/2023/04/09/64329399db122.webp","https://bu.dusays.com/2023/04/09/64329399db2e1.webp"]}]},{"class_name":"我的日常","path_name":"/dailyPhoto","type":1,"description":"这里存放的是有关我自己的一些沙雕生活与有趣的事情。","top_link":"/album","top_btn_text":"返回","top_background":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","cover":"https://bu.dusays.com/2023/04/09/64329399cea5a.webp","album_list":[{"date":"2022-10-24T00:00:00.000Z","content":"老妹的画","image":["https://bu.dusays.com/2023/04/09/643293997b92b.jpeg","https://bu.dusays.com/2023/04/09/643293997b92b.jpeg"]}]}]}],"Page":[{"title":"日常生活","date":"2024-08-06T15:45:01.000Z","aside":false,"top_img":false,"type":"album_detail","_content":"","source":"dailyPhoto/index.md","raw":"---\ntitle: 日常生活\ndate: 2024-08-06 23:45:01\naside: false\ntop_img: false\ntype: \"album_detail\"\n---\n","updated":"2024-08-07T09:21:35.294Z","path":"dailyPhoto/index.html","comments":1,"layout":"page","_id":"clzod40h40000jp8nh164ea7k","content":"","cover":"/img/album/bg.webp","cover_type":"img","excerpt":"","more":""},{"title":"与你共同走过的路","date":"2024-08-06T08:02:05.000Z","aside":false,"top_img":false,"type":"album_detail","_content":"\n","source":"road-I-walked-with-you/index.md","raw":"---\ntitle: 与你共同走过的路\ndate: 2024-08-06 16:02:05\naside: false\ntop_img: false\ntype: \"album_detail\"\n---\n\n","updated":"2024-08-07T06:50:16.654Z","path":"road-I-walked-with-you/index.html","comments":1,"layout":"page","_id":"clzod40h60001jp8n8al40r77","content":"","cover":"/img/album/bg.webp","cover_type":"img","excerpt":"","more":""},{"title":"相册集","date":"2024-08-06T06:06:38.000Z","aside":false,"top_img":false,"type":"album","top_background":"/img/album/bg.webp","_content":"","source":"album/index.md","raw":"---\ntitle: 相册集\ndate: 2024-08-06 14:06:38\naside: false\ntop_img: false\ntype: \"album\"\ntop_background: /img/album/bg.webp\n---","updated":"2024-08-08T00:58:17.560Z","path":"album/index.html","comments":1,"layout":"page","_id":"clzod40h80003jp8n6b9mfdik","content":"","cover":"/img/album/bg.webp","cover_type":"img","excerpt":"","more":""},{"_content":"var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||\"interactive\"===document.readyState||\"complete\"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c>a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.detachEvent(\"onreadystatechange\",e),window==window.top&&(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.attachEvent(\"onreadystatechange\",function(){/loaded|complete/.test(document.readyState)&&e()}),window==window.top&&(c=setInterval(function(){try{a||document.documentElement.doScroll(\"left\")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c=\"BusuanziCallback_\"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace(\"=BusuanziCallback\",\"=\"+c),scriptTag=document.createElement(\"SCRIPT\"),scriptTag.type=\"text/javascript\",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy=\"no-referrer-when-downgrade\",document.getElementsByTagName(\"HEAD\")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),scriptTag.parentElement.removeChild(scriptTag)}catch(c){bszTag.hides()}})}}},bszCaller.fetch(\"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback\",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:[\"site_pv\",\"page_pv\",\"site_uv\"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById(\"busuanzi_value_\"+b);c&&(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"none\")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"inline\")})}};\n","source":"static/js/busuanzi.pure.mini.js","raw":"var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||\"interactive\"===document.readyState||\"complete\"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c>a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.detachEvent(\"onreadystatechange\",e),window==window.top&&(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.attachEvent(\"onreadystatechange\",function(){/loaded|complete/.test(document.readyState)&&e()}),window==window.top&&(c=setInterval(function(){try{a||document.documentElement.doScroll(\"left\")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c=\"BusuanziCallback_\"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace(\"=BusuanziCallback\",\"=\"+c),scriptTag=document.createElement(\"SCRIPT\"),scriptTag.type=\"text/javascript\",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy=\"no-referrer-when-downgrade\",document.getElementsByTagName(\"HEAD\")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),scriptTag.parentElement.removeChild(scriptTag)}catch(c){bszTag.hides()}})}}},bszCaller.fetch(\"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback\",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:[\"site_pv\",\"page_pv\",\"site_uv\"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById(\"busuanzi_value_\"+b);c&&(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"none\")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"inline\")})}};\n","date":"2024-08-09T09:13:34.153Z","updated":"2024-08-09T09:13:34.128Z","path":"static/js/busuanzi.pure.mini.js","layout":"false","title":"","comments":1,"_id":"clzod40h90005jp8nduh71p7z","content":"var bszCaller,bszTag;!function(){var c,d,e,a=!1,b=[];ready=function(c){return a||\"interactive\"===document.readyState||\"complete\"===document.readyState?c.call(document):b.push(function(){return c.call(this)}),this},d=function(){for(var a=0,c=b.length;c>a;a++)b[a].apply(document);b=[]},e=function(){a||(a=!0,d.call(window),document.removeEventListener?document.removeEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.detachEvent(\"onreadystatechange\",e),window==window.top&&(clearInterval(c),c=null)))},document.addEventListener?document.addEventListener(\"DOMContentLoaded\",e,!1):document.attachEvent&&(document.attachEvent(\"onreadystatechange\",function(){/loaded|complete/.test(document.readyState)&&e()}),window==window.top&&(c=setInterval(function(){try{a||document.documentElement.doScroll(\"left\")}catch(b){return}e()},5)))}(),bszCaller={fetch:function(a,b){var c=\"BusuanziCallback_\"+Math.floor(1099511627776*Math.random());window[c]=this.evalCall(b),a=a.replace(\"=BusuanziCallback\",\"=\"+c),scriptTag=document.createElement(\"SCRIPT\"),scriptTag.type=\"text/javascript\",scriptTag.defer=!0,scriptTag.src=a,scriptTag.referrerPolicy=\"no-referrer-when-downgrade\",document.getElementsByTagName(\"HEAD\")[0].appendChild(scriptTag)},evalCall:function(a){return function(b){ready(function(){try{a(b),scriptTag.parentElement.removeChild(scriptTag)}catch(c){bszTag.hides()}})}}},bszCaller.fetch(\"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback\",function(a){bszTag.texts(a),bszTag.shows()}),bszTag={bszs:[\"site_pv\",\"page_pv\",\"site_uv\"],texts:function(a){this.bszs.map(function(b){var c=document.getElementById(\"busuanzi_value_\"+b);c&&(c.innerHTML=a[b])})},hides:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"none\")})},shows:function(){this.bszs.map(function(a){var b=document.getElementById(\"busuanzi_container_\"+a);b&&(b.style.display=\"inline\")})}};\n"}],"Post":[{"title":"blog","abbrlink":"c0155143","date":"2024-08-08T08:10:29.000Z","_content":"","source":"_posts/blog.md","raw":"---\ntitle: blog\nabbrlink: c0155143\ndate: 2024-08-08 16:10:29\ntags:\n---\n","slug":"blog","published":1,"updated":"2024-08-08T08:10:42.416Z","comments":1,"layout":"post","photos":[],"_id":"clzod40h70002jp8nem6i3vnp","content":"","cover":"/img/album/bg.webp","cover_type":"img","excerpt":"","more":""},{"title":"Hello Worldsss","top_img":"/img/079A23792.jpg","date":"2023-08-07T15:14:29.000Z","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n![alt text](./image.png)\n\n### Create a new post\n\n```python\nstring = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\nprint(string)\n\n\n# 输出\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\", line 15\n    string = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\n                ^\nSyntaxError: invalid syntax\n```\n\n```python\nstring = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\\n\\\n浅者见浅，深者见深——黄家宝\\\n\\\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\\n\\\n先实现功能，再去优化，否则一切会很乱。——AI悦创\\\n\\\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello Worldsss\ntop_img: /img/079A23792.jpg\ndate: 2023-08-07 23:14:29\nabbrlink: 4a17b156\ntag: Java\ncategories: 测试是个分类\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n![alt text](./image.png)\n\n### Create a new post\n\n```python\nstring = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\nprint(string)\n\n\n# 输出\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\", line 15\n    string = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\n                ^\nSyntaxError: invalid syntax\n```\n\n```python\nstring = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\\n\\\n浅者见浅，深者见深——黄家宝\\\n\\\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\\n\\\n先实现功能，再去优化，否则一切会很乱。——AI悦创\\\n\\\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-08-09T09:32:37.801Z","comments":1,"layout":"post","photos":[],"_id":"clzod40h80004jp8n36i2h46x","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p><img src=\"/posts/4a17b156/image.png\" alt=\"alt text\"></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&#x27;I&#x27;</span>m bornforthis.<span class=\"string\">&#x27;  # 在英文当中也可以这样缩写</span></span><br><span class=\"line\"><span class=\"string\">print(string)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 输出</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;, line 15</span></span><br><span class=\"line\"><span class=\"string\">    string = &#x27;</span>I<span class=\"string\">&#x27;m bornforthis.&#x27;</span>  <span class=\"comment\"># 在英文当中也可以这样缩写</span></span><br><span class=\"line\">                ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","cover":"/img/album/bg.webp","cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p><img src=\"/posts/4a17b156/image.png\" alt=\"alt text\"></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&#x27;I&#x27;</span>m bornforthis.<span class=\"string\">&#x27;  # 在英文当中也可以这样缩写</span></span><br><span class=\"line\"><span class=\"string\">print(string)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 输出</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;, line 15</span></span><br><span class=\"line\"><span class=\"string\">    string = &#x27;</span>I<span class=\"string\">&#x27;m bornforthis.&#x27;</span>  <span class=\"comment\"># 在英文当中也可以这样缩写</span></span><br><span class=\"line\">                ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"post_name","abbrlink":"9776190d","date":"2024-08-07T15:14:29.000Z","_content":"\n![alt text](image-1.png)","source":"_posts/post-name.md","raw":"---\ntitle: post_name\nabbrlink: 9776190d\ndate: 2024-08-07 23:14:29\ntag: Python\n---\n\n![alt text](image-1.png)","slug":"post-name","published":1,"updated":"2024-08-08T07:30:09.197Z","comments":1,"layout":"post","photos":[],"_id":"clzod40h90006jp8n5bx76ufk","content":"<p><img src=\"/posts/9776190d/image-1.png\" alt=\"alt text\"></p>\n","cover":"/img/079A23792.jpg","cover_type":"img","excerpt":"","more":"<p><img src=\"/posts/9776190d/image-1.png\" alt=\"alt text\"></p>\n"},{"title":"04-str NoteBook","author":"AI悦创","abbrlink":"fa256f4b","date":"2023-12-08T05:18:16.000Z","_content":"\n## 1. 字符串的定义\n\n**字符串是由字母、数字和特殊字符来组成的序列。**\n\n![有序性](04-python-string/image-20231208131933540.png)\n\n## 2. 创建字符串\n\n**如何创建字符串？**\n\n——使用 **<span style=\"color:orange\">单引号、双引号</span>或者<span style=\"color:orange\">三引号</span>**。\n\n```python\nname = 'bornforthis'\nnumber = \"18\"\nparagraph = '''Hello,Bornforthis!\nHello,World!'''\nparagraph_two = \"\"\"Hello,Bornforthis!\nHello,World!\"\"\"\n```\n\n**为什么 Python 同时支持三种创建字符串的方法？**\n\n```python\nstring = 'I am bornforthis.'  # 在英文当中的常规表达式\nprint(string)\n```\n\n但是英文当中可以缩写如下：\n\n```python\nstring = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\nprint(string)\n\n\n# 输出\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\", line 15\n    string = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\n                ^\nSyntaxError: invalid syntax\n```\n\n**因为，开头是单引号，所以 Python 会寻找到下一个第一次出现的单引号进行匹配。而第一个单引号不在字符串的末尾，所以导致整个字符串异常。（没有完全包裹字符串全部内容）**\n\n如何解决上面描述的问题呢？——使用双引号。\n\n```python\nstring = \"I'm bornforthis.\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\nI'm bornforthis.\n```\n\n- 有时候我们需要字符串里面有单引号或双引号，此时发挥作用： **<span style=\"color:orange\">单双引号混用，是第一个原因</span>**\n\n那么三引号呢？\n\n假设我们现在需要存储如下文本：\n\n```python\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创\n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n放入字符串，我们如何在 Python 代码实现呢？\n\n```python\nstring = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创\n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\", line 15\n    string = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创\n                                                     ^\nSyntaxError: EOL while scanning string literal\n```\n\n常规的单引号、双引号是不支持多行文本，但是有一个方法可以间接实现看似多行文本，但实际是单行，在每一行的末尾添加  `\\`：\n\n```python\nstring = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\\n\\\n浅者见浅，深者见深——黄家宝\\\n\\\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\\n\\\n先实现功能，再去优化，否则一切会很乱。——AI悦创\\\n\\\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n从上面的输出可知，每行结尾添加 `\\` 只能实现看起来换行，实际上还是一行。「就是：一行显示不完，换行显示而已，但是本身还是一行」\n\n![](./04-python-string/image-20231208133549593.png)\n\n此时，我们使用三引号测试：\n\n```python\nstring = \"\"\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"\"\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n\n# 输出\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n可以从上面的输出可知，原本什么格式，输出就是什么格式。「原样输出」「三个单引号的效果和上面一样」\n\n- **<span style=\"color:orange\">三个单引号或者三个双引号，实现原样输出。</span>**\n- **<span style=\"color:orange\">多行注释</span>**\n- **<span style=\"color:orange\">单双三引号混用</span>**（代码略）\n\n![多行注释](./04-python-string/image-20231208133942865.png)\n\n## 3. 字符串长度\n\n如何获取一个字符串的长度呢？——使用 `len()`\n\n**`len()`: 返回字符串中字符长度或者字符数。**\n\n```python\nparagraph = \"Hello,Bornforthis!\"\nprint(len(paragraph))\n\n# 输出\n18\n```\n\n在使用 len 获取字符串长度时，是从数字 1 开始数的。\n\n\n\n## 4. 字符串中的字符获取\n\n### 4.1 获取单个字符\n\n```python\nstring = \"bornforthis\"\n\"\"\"\n语法: string = \"bornforthis\"\nselect = string[position]\n\"\"\"\n# 获取字符 b\nselect = string[0]\nprint(select)\n\n# 提取 f\nselect = string[4]\nprint(select)\n\n# s 「使用三种方法实现」\nselect1 = string[10]\nselect2 = string[len(string) - 1]\nselect3 = string[-1]\nprint(select1, select2, select3)\n\n# 输出\nb\nf\ns s s\n```\n\n### 4.2 获取多个连续字符「子字符串」\n\n```python\nstring = \"bornforthis\"\n\"\"\"\n语法: string = \"bornforthis\"\nselect = string[start: end]\nPS: end 记得 +1\n\"\"\"\n# 获取字符 bor\nselect = string[0:2]  # bo\nselect = string[0:3]  # bor\nprint(select)\n\n# 提取 for\nselect = string[4:7]\nprint(select)\n\n# this\nselect = string[7:12]\nprint(select)\n\n# 输出\nbor\nfor\nthis\n```\n\n### 4.3 获取多个不连续的字符\n\n```python\nstring = \"0123456789\"\n\"\"\"\n语法: string = \"0123456789\"\nselect = string[start: end: sep]\nPS: end 记得 +1\n\"\"\"\n# 获取字符 02468\nselect = string[0:len(string):2]\nprint(select)\n\n# 提取 13579\nselect = string[1:len(string):2]\nprint(select)\n\n# 提取 bnri\nstring = \"bornforthis\"\nselect = string[0: len(string):3]\nprint(select)\n\n# 提取 ofts\nselect = string[1: len(string):3]\nprint(select)\n\n# 输出\n02468\n13579\nbnri\nofts\n```\n\n### 4.4 优化\n\n如果，我们要提取的字符是从开头到结尾，则我们可以省略开头和结尾，留空即可。\n\n所以上面 4.3 的代码可以等价如下：\n\n```python\nstring = \"0123456789\"\n\"\"\"\n语法: string = \"0123456789\"\nselect = string[:: sep]\nPS: end 记得 +1\n\"\"\"\n# 获取字符 02468\nselect = string[::2]\nprint(select)\n\n# 提取 13579\nselect = string[1::2]\nprint(select)\n\n# 提取 bnri\nstring = \"bornforthis\"\nselect = string[::3]\nprint(select)\n\n# 提取 ofts\nselect = string[1::3]\nprint(select)\n\n# 输出\n02468\n13579\nbnri\nofts\n```\n\n### 4.5 字符串倒序\n\n#### 4.5.1 实现\n\n字符串的第三个位置，控制的是字符提取的方向。默认为正数 1，如果我们改成 -1，则会变成反方向。\n\n::: warning\n\n正负控制方向，数字大小控制步长。\n\n:::\n\n```python\nstring = \"bornforthis\"\nreverse = string[::-1]\nprint(reverse)\n\n# 输出\nsihtrofnrob\n```\n\n#### 4.5.2 存在的问题\n\n::: info 思考🤔\n\n上面代码 `string[::-1]` 前两位省略了什么数字？尝试填写上去。\n\n:::\n\n你有可能是这么想的：\n\n```python\nstring = \"bornforthis\"\n# print(len(string))\nselect = string[0:11:-1]\nprint(select)  # 无结果\n```\n\n想必你也发现了，没有得到结果也没有报错。\n\n**Why？**\n\n![](./04-python-string/image-20231208141259131.png)\n\n由上面分析，我们应该如何解决？\n\n#### 4.5.3 解决方法\n\n##### 4.5.3.1 方法一：调换位置\n\n- 能否解决：可以\n- 存在什么问题？：少了一个字符\n\n```python\nstring = \"bornforthis\"\nselect = string[11:0:-1]\nprint(select)  # sihtrofnro\n```\n\n**为什么少一个字符？**\n\n——存在一个悖论，因为结束🔚是 0，但是 `0 + 1` 时得到 1，而 1 是从左到右的第二个字符。故而 +1 是无法实现和解决了。\n\n但是，我们可以利用不写结尾，得到最后一个缺失的字符：`string[11::-1]` 。\n\n虽然解决，但是我们偏离了我的一开始的问题：**前两位省略了什么数字？**「因为，又回到了一开始省略的状态」\n\n##### 4.5.3.2 方法二：重写开始结尾\n\n**想想字符串的有序性，从右到左。**\n\n为什么要纠结前面两个空的数字是多少？——为了之后得到某一部分的字符倒序。\n\n```python\nstring = \"bornforthis\"\nselect = string[-1:-12:-1]\nprint(select)  # sihtrofnrob\n```\n\n![](./04-python-string/image-20231211161559839.png)\n\n**小试牛刀：** 获取 `rofn`\n\n```python\nstring = \"bornforthis\"\nselect = string[-5:-9:-1]\nprint(select)  # rofn\n```\n\n## 5. 字符串内置方法\n\n### 5.1 .upper()\n\n将字符串内容，全部转成大写。\n\n```python\nstring = \"bornforthis\"\nupper_string = string.upper()\nprint(upper_string)\n\n# ---output---\nBORNFORTHIS\n```\n\n### 5.2 .lower()\n\n将字符串的内容，全部转成小写。\n\n```python\nstring = \"BORNFORTHIS\"\nlower_string = string.lower()\nprint(lower_string)\n\n# ---output---\nbornforthis\n```\n\n### 5.3 .capitalize()\n\n将字符串首字母，转换成大写。「只对第一个字母大写，其它后面的字符会变成小写」\n\n```python\nstring = \"bornForthis To Aiyc\"\ncapitalize_string = string.capitalize()\nprint(capitalize_string)\n\n# ---output---\nBornforthis to aiyc\n```\n\n### 5.4 .title()\n\n将字符串中的每个单词的首字母，转换成大写，其余的字符都转换成小写。\n\n```python\nstring = \"bornforthis to aiyc\"\ntitle_string = string.title()\nprint(title_string)\n\n# ---output---\nBornforthis To Aiyc\n\n\nstring = \"bornforthis-to-aiyc\"  # 不管是什么间隔，都会转换成首字母大写\ntitle_string = string.title()\nprint(title_string)\n\n# ---output---\nBornforthis-To-Aiyc\n\n\nstring = \"bornforThis to aiYc\"  # 其余的字符都转换成小写\ntitle_string = string.title()\nprint(title_string)\n\n# ---output---\nBornforthis To Aiyc\n```\n\n### 5.5 .startswith()\n\n检测字符串是不是以特定字符或单词开头，返回布尔值。\n\n```python\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"b\")\nprint(startswith_string)\n\n# ---output---\nTrue\n\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"bo\")\nprint(startswith_string)\n\n# ---output---\nTrue\n\n\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"p\")\nprint(startswith_string)\n\n# ---output---\nFalse\n\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"b1\")\nprint(startswith_string)\n\n# ---output---\nFalse\n```\n\n### 5.6 .endswith()\n\n检测字符串是不是以特定字符或单词结尾，返回布尔值。\n\n```python\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"s\")\nprint(endswith_string)\n\n# ---output---\nTrue\n\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"is\")\nprint(endswith_string)\n\n# ---output---\nTrue\n\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"i\")\nprint(endswith_string)\n\n# ---output---\nFalse\n\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"s6\")\nprint(endswith_string)\n\n# ---output---\nFalse\n```\n\n### 5.7 .count()\n\n计算特定字符或单词在目标字符串中存在的次数。\n\n```python\nstring = \"bornforthis\"\ncount_string = string.count('r')\nprint(count_string)\n\n# ---output---\n2\n\nstring = \"bornforthis\"\ncount_string = string.count('or')\nprint(count_string)\n\n# ---output---\n2\n\nstring = \"bornforthis\"\ncount_string = string.count('a')\nprint(count_string)\n\n# ---output---\n0\n\n\nstring = \"bornforthis\"\ncount_string = string.count('ap')\nprint(count_string)\n\n# ---output---\n0\n```\n\n### 5.8 .find()\n\n寻找目标字符或单词在特定字符串中，第一次出现的下标。「也就是出现重复的，也只是返回第一次出现的下标」如果是查找单词，那么 `find()` 返回目标单词的第一个字符的下标。\n\n如果，查询的字符或单词不存在，则返回 `-1`。\n\n```python\nstring = \"bornforthis\"\nfind_string = string.find('b')\nprint(find_string)\n\n# ---output---\n0\n\nstring = \"bornforthis\"\nfind_string = string.find('a')\nprint(find_string)\n\n# ---output---\n-1\n\n\nstring = \"bornforthis\"\nfind_string = string.find('for')\nprint(find_string)\n\n# ---output---\n4\n\n\nstring = \"bornforthis\"\nfind_string = string.find('aiyc')\nprint(find_string)\n\n# ---output---\n-1\n```\n\n### 5.9 .index()\n\n寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 `index()` 返回目标单词的第一个字符的下标。\n\n如果，查询的字符或单词不存在，则**报错**。\n\n```python\nstring = \"bornforthis\"\nindex_result = string.index('b')\nprint(index_result)\n\n# ---output---\n0\n\nstring = \"bornforthis\"\nindex_result = string.index('a')\nprint(index_result)\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\", line 83, in <module>\n    index_result = string.index('a')\nValueError: substring not found\n\nstring = \"bornforthis\"\nindex_result = string.index('for')\nprint(index_result)\n\n# ---output---\n4\n\nstring = \"bornforthis\"\nindex_result = string.index('aiyc')\nprint(index_result)\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\", line 83, in <module>\n    index_result = string.index('aiyc')\nValueError: substring not found\n```\n\n### 5.10 .isdigit()\n\n判断字符串是不是纯数字字符串，字符串中但凡有一个字符是非数字，则返回 False。\n\n```python\nstring = \"12345678\"\nisdigit_result = string.isdigit()\nprint(isdigit_result)\n\n# ---output---\nTrue\n\nstring = \"123 45678\"\nisdigit_result = string.isdigit()\nprint(isdigit_result)\n\n# ---output---\nFalse\n```\n\n### 5.11 .isalpha()\n\n判断字符串是不是纯字母字符串，字符串中但凡有一个非字母的，则返回 False。\n\n```python\nstring = \"bornforthis\"\nisalpha_result = string.isalpha()\nprint(isalpha_result)\n\n# ---output---\nTrue\n\n\nstring = \"born forthis\"\nisalpha_result = string.isalpha()\nprint(isalpha_result)\n\n# ---output---\nFalse\n```\n\n### 5.12 .isalnum()\n\n判断字符串是不是纯数字、纯字母或纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。\n\n```python\nstring = \"bornforthis\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"12345678\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"bornforthis8888888888\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"bornforthis 8888888888\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.13 .isupper()\n\n判断字符串中的字母否全大写，全大写则返回 True，否则返回 False。\n\n```python\nstring = \"BORNFORTHIS\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"BORNFORTHIS12-、\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"BORNforthis\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nFalse\n\n\nstring = \"bornforthis\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.14 .islower()\n\n判断字符串中字母是不是全小写，全小写则返回 True，否则返回 False。\n\n```python\nstring = \"bornforthis\"\nboolean = string.islower()\nprint(boolean)\n\n# ---output---\nTrue\n\nstring = \"bornforthis121-、\"\nboolean = string.islower()\nprint(boolean)\n\n# ---output---\nTrue\n\nstring = \"bornforthisA121-、\"\nboolean = string.islower()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.15 .isspace()\n\n判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。\n\n```python\nstring = \"   \"\nboolean = string.isspace()\nprint(boolean)\n\n# ---output---\nTrue\n\nstring = \"\"\nboolean = string.isspace()\nprint(boolean)\n\n# ---output---\nFalse\n\nstring = \"bornforthis\"\nboolean = string.isspace()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.16 .strip()\n\n默认去掉目标字符串的前后空白字符，如果指定参数，则去掉指定字符。\n\n```python\nstring = \"   bornforthis   \"\nstrip_string = string.strip()\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后空白字符后:\", strip_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n去掉前后空白字符后: bornforthis\n\n\nstring = \"-----bornforthis-----\"\nstrip_string = string.strip('-')\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后 '-' 字符后:\", strip_string)\n\n# ---output---\n原本的字符串: -----bornforthis-----\n去掉前后 '-' 字符后: bornforthis\n\n\nstring = \"--- --bornforthis-- ---\"\nstrip_string = string.strip('-')  # 只去掉连续的减号\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后 '-' 字符后:\", strip_string)\n\n# ---output---\n原本的字符串: --- --bornforthis-- ---\n去掉前后 '-' 字符后:  --bornforthis-- \n\n\n\nstring = \"--- --bornforthis-- ---\"  # 如果想去掉减号和空格呢？\nstrip_string = string.strip('- ')  # 填入要去掉的字符「不计较先后顺序」\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后 '- ' 字符后:\", strip_string)\n\n# ---output---\n原本的字符串: --- --bornforthis-- ---\n去掉前后 '- ' 字符后: bornforthis\n```\n\n### 5.17 .lstrip()\n\n默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。\n\n```python\nstring = \"   bornforthis   \"\nlstrip_string = string.lstrip()\nprint(\"原本的字符串:\", string)\nprint(\"去掉左边空白字符后:\", lstrip_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n去掉左边空白字符后: bornforthis   \n\n\nstring = \"----bornforthis----\"\nlstrip_string = string.lstrip('-')\nprint(\"原本的字符串:\", string)\nprint(\"去掉左边 '-' 后:\", lstrip_string)\n\n\n# ---output---\n原本的字符串: ----bornforthis----\n去掉左边 '-' 后: bornforthis----\n\nstring = \"-- --bornforthis----\"\nlstrip_string = string.lstrip('- ')  # 不分先后顺序\nprint(\"原本的字符串:\", string)\nprint(\"去掉左边 '- ' 后:\", lstrip_string)\n\n# ---output---\n原本的字符串: -- --bornforthis----\n去掉左边 '- ' 后: bornforthis----\n```\n\n### 5.18 .rstrip()\n\n默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。\n\n```python\nstring = \"   bornforthis   \"\nrstrip_string = string.rstrip()\nprint(\"原本的字符串:\", string)\nprint(\"去掉右边空白字符后:\", rstrip_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n去掉右边空白字符后:    bornforthis\n\n\nstring = \"----bornforthis----\"\nrstrip_string = string.rstrip('-')\nprint(\"原本的字符串:\", string)\nprint(\"去掉右边 '-' 后:\", rstrip_string)\n\n# ---output---\n原本的字符串: ----bornforthis----\n去掉右边 '-' 后: ----bornforthis\n\n\nstring = \"----bornforthis-- --\"\nrstrip_string = string.rstrip('- ')  # 不分先后顺序\nprint(\"原本的字符串:\", string)\nprint(\"去掉右边 '- ' 后:\", rstrip_string)\n\n# ---output---\n原本的字符串: ----bornforthis-- --\n去掉右边 '- ' 后: ----bornforthis\n```\n\n### 5.19 .replace()\n\n`.replace(old, new, count)` 第一个位置传入待替换的旧「old」字符，第二个位置传入要替换的新字符「new」，默认替换全部，count 控制替换次数。\n\n```python\nstring = \"   bornforthis   \"\nreplace_string = string.replace(' ', '*')  # 把空白字符替换成 *\nprint(\"原本的字符串:\", string)\nprint(\"替换后:\", replace_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n替换后: ***bornforthis***\n\n\n\nstring = \"ai-bornforthis-ai\"\nreplace_string = string.replace('ai', 'love')  # 把 ai 替换成 love，默认全部替换\nprint(\"原本的字符串:\", string)\nprint(\"替换后:\", replace_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-ai\n替换后: love-bornforthis-love\n\n\n\nstring = \"ai-bornforthis-ai\"\nreplace_string = string.replace('ai', 'love', 1)  # 替换一次\nprint(\"原本的字符串:\", string)\nprint(\"替换后:\", replace_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-ai\n替换后: love-bornforthis-ai\n```\n\n### 5.20 .split()\n\n`.split(sep, maxsplit)` 以特定字符进行分割，默认空格分割。如果传入参数「sep」，则以参数进行分割。返回分割后的列表。maxsplit 用于控制分割几次。\n\n```python\nstring = \"ai bornforthis ai\"\nsplit_string = string.split()\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", split_string)\n\n# ---output---\n原本的字符串: ai bornforthis ai\n分割后: ['ai', 'bornforthis', 'ai']\n\n\nstring = \"ai-bornforthis-ai\"\nsplit_string = string.split('-')  # 以 - 好分割\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", split_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-ai\n分割后: ['ai', 'bornforthis', 'ai']\n\n\nstring = \"ai-bornforthis-love\"\nsplit_string = string.split('-', 1)\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", split_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-love\n分割后: ['ai', 'bornforthis-love']\n```\n\n::: warning\n\n注意⚠️：使用 spilt 分割时，不管每个字符之间有几个空格，都将会正常的分割出来。\n\n```python\ns = \"ai  bornforthis  ai    book\"\nnew_s = s.split()\nprint(new_s)\n\n# ---output---\n['ai', 'bornforthis', 'ai', 'book']\n```\n\n当我们指定 split 的间隔时，spilt 会严格按照我们指定的分割符号来分割。\n\n```python\ns = \"ai  bornforthis  ai    book\"\nnew_s = s.split(' ')\nprint(new_s)\n\n# ---output---\n['ai', '', 'bornforthis', '', 'ai', '', '', '', 'book']\n```\n\n上面多输出的结果空字符串，就是证明。\n\n其实，在学习的过程当中，还是需要经常举一反三的。如果是其它连续字符会不会有这样情况呢？——答案是肯定的，也会有这样的情况。\n\n你可以自行分析和编写代码试一试～\n\n:::\n\n### 5.21 .rsplit()\n\n`.rsplit(sep, maxsplit)` 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。\n\n```python\nstring = \"ai-bornforthis-love\"\nrsplit_string = string.rsplit('-')\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", rsplit_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-love\n分割后: ['ai', 'bornforthis', 'love']\n\n\nstring = \"ai-bornforthis-love\"\nrsplit_string = string.rsplit('-', 1)\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", rsplit_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-love\n分割后: ['ai-bornforthis', 'love']\n```\n\n### 5.22 .join()\n\n以特定字符使字符串间隔。\n\n```python\nstring = \"bornforthis\"\njoin_string = '-'.join(string)\nprint(\"原本的字符串:\", string)\nprint(\"拼接后:\", join_string)\n\n# ---output---\n原本的字符串: bornforthis\n分割后: b-o-r-n-f-o-r-t-h-i-s\n```\n\n## 6. 字符串格式化\n\n```python\nstring = \"Hi Bornforthis,Welcome to XiaMen.\"\nprint(string)\n\n# ---output---\nHi Bornforthis,Welcome to XiaMen.\n```\n\n- 所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。\n- 我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。\n\n当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。\n\n```python\nname = \"Bornforthis\"\nregion = \"XiaMen\"\nstring1 = \"Hi \"\nstring2 = \",Welcome to \"\nstring3 = \".\"\nresult = string1 + name + string2 + region + string3\nprint(result)\n\n# ---output---\nHi Bornforthis,Welcome to XiaMen.\n```\n\n由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。\n\n而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：\n\n```python\nstring = \"Money is \" + 190\nprint(string)\n\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py\", line 1, in <module>\n    string = \"Money is \" + 190\nTypeError: can only concatenate str (not \"int\") to str\n\n\nstring = \"Money is \" + str(190)\nprint(string)\n# ---output---\nMoney is 190\n```\n\n—— **format** 就应运而生了。\n\n### 6.1 .format()\n\n1. 单个花括号 `{}`\n\n```python\nstring = \"Hi {},Welcome to XiaMen.\".format(\"aiyuechuang\")\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to XiaMen.\n\n\n\ntemplate_string = \"Hi {},Welcome to XiaMen.\"\nprint(template_string.format(\"Bornforthis\"))\n\n# ---output---\nHi Bornforthis,Welcome to XiaMen.\n\n\n\nnew_string = template_string.format(\"AI悦创\")\nprint(new_string)\n\n\n# ---output---\nHi AI悦创,Welcome to XiaMen.\n```\n\n2. 一个花括号以上「按顺序填充」\n\n```python\nstring = \"Hi {},Welcome to {}.\".format(\"aiyuechuang\", \"厦门\")\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to 厦门.\n\n\ntemplate_string = \"Hi {},Welcome to {}.\"\nprint(template_string.format(\"Bornforthis\", \"上海\"))\n\n# ---output---\nHi Bornforthis,Welcome to 上海.\n\n\nnew_string = template_string.format(\"AI悦创\", \"北京\")\nprint(new_string)\n\n# ---output---\nHi AI悦创,Welcome to 北京.\n```\n\n3. 多个花括号指定位置\n\n```python\nstring = \"Hi {1},Welcome to {0}.\".format(\"厦门\", \"aiyuechuang\")\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to 厦门.\n\n\ntemplate_string = \"Hi {1},Welcome to {0}.\"\nprint(template_string.format(\"上海\", \"Bornforthis\"))\n\n# ---output---\nHi Bornforthis,Welcome to 上海.\n\n\nnew_string = template_string.format(\"北京\", \"AI悦创\")\nprint(new_string)\n\n# ---output---\nHi AI悦创,Welcome to 北京.\n```\n\n4. 参数指定\n\n```python\nstring = \"Hi {name},Welcome to {region}.\".format(region='厦门', name='aiyuechuang')\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to 厦门.\n\ntemplate_string = \"Hi {name},Welcome to {region}.\"\nprint(template_string.format(name=\"Bornforthis\", region='上海'))\n\n# ---output---\nHi Bornforthis,Welcome to 上海.\n\nnew_string = template_string.format(name='AI悦创', region='北京')\nprint(new_string)\n\n# ---output---\nHi AI悦创,Welcome to 北京.\n```\n\n5. 保留指定小数位\n\n```python\nstring = \"Money is {:.3f}.\".format(190)  # .3f 保留三位小数\nprint(string)\n\n# ---output---\nMoney is 190.000.\n```\n\n> 此时，放入数字是不会报错了。\n\n### 6.2 f\n\n1. 直接读取变量\n\n```python\nname = \"Bornforthis\"\nregion = \"厦门\"\nstring = f\"Hi {name},Welcome to {region}.\"\nprint(string)\n\n# ---output---\nHi Bornforthis,Welcome to 厦门.\n```\n\n2. 保留小数位\n\n```python\nmoney = 190\nstring = f\"Money is {money:.3f}.\"\nprint(string)\n\n\n# ---output---\nMoney is 190.000.\n```\n\n### 6.3 % 格式化\n\n- `%d`: 整数\n- `%s`: 字符串\n- `%f`: 浮点数\n\n1. 单个位置传入\n\n```python\nstring = \"Money is %d\"\nnew_s = string % 13\nprint(new_s)\nprint(string % 19)\nstring = \"Money is %d\" % 190\nprint(string)\n\n# ---output---\nnew_string: Money is 13\n直接放: Money is 19\nMoney is 190\n```\n\n2. 多个位置传入\n\n```python\nstring = \"Money is %d %s\"\nnew_s = string % (13, '发大财')\nprint(new_s)\nprint(string % (888, '暴富'))\nstring = \"Money is %d %s\" % (190, \"超有钱\")\nprint(string)\n\n# ---output---\nMoney is 13 发大财\nMoney is 888 暴富\nMoney is 190 超有钱\n```\n\n```python\nstring = \"Money is %d %s\"\nnew_s = string % (13, 'make a million')\nprint(new_s)\nprint(string % (888, 'sudden wealth'))\nstring = \"Money is %d %s\" % (190, 'super rich')\nprint(string)\n\n# ---output---\nMoney is 13 make a million\nMoney is 888 sudden wealth\nMoney is 190 super rich\n```\n\n3. 保留小数位\n\n```python\nstring = \"Money is %.3f\"\nnew_s = string % 19\nprint(new_s)\nprint(string % 18)\nstring = \"Money is %.3f\" % 180\nprint(string)\n\n\n# ---output---\nMoney is 19.000\nMoney is 18.000\nMoney is 180.000\n```\n\n### 6.4 f 和 format、% 的优缺点\n\n`format` 和 `%` 都像模版，提前做好模版后面有需要时可以直接使用；\n\n而 `f` 就像在银行当中，柜员边问你边登记，不能提前做好模版。\n\n\n\n## 7. 字符串不可变性\n\n字符串是不可变的，不可以改变字符串中的任何元素，如需改变字符串中的元素，则需要新建一个字符串。\n\n```python\ns = \"hello bornforthis\"\ns[0] = \"a\"\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\", line 2, in <module>\n    s[0] = \"a\"\nTypeError: 'str' object does not support item assignment\n```\n\n除了使用 replace 还可以使用字符串拼接：\n\n```python\ns = \"hello bornforthis\"\nnews = \"a\" + s[1:]\nprint(news)\n\n# ---output---\naello bornforthis\n```\n\n## 8. 字符串转义\n\n| 转义字符 | 含义                               | 例子                     |\n| -------- | ---------------------------------- | ------------------------ |\n| `\\\\`     | 反斜杠符号，为了在字符串中得到 `\\` | `s = \"bor\\\\nforthis\"`    |\n| `\\b`     | 退格，类似删除键                   | `s = \"bornff\\borthis\"`   |\n| `\\n`     | 换行                               | `s = \"bornfor\\nthis\"`    |\n| `\\t`     | 制表符                             | `s = \"born\\tfor\\tthis\"`  |\n| `r`      | 取消转义「R 和 r」都可以           | `s = r\"born\\tfor\\tthis\"` |\n\n示例代码：\n\n```python\ns = \"bor\\\\nforthis\"\nprint(s)\n\n# ---output---\nbor\\nforthis\n\n\ns = \"bornff\\borthis\"\nprint(s)\n\n# ---output---\nbornforthis\n\ns = \"bornfor\\nthis\"\nprint(s)\n\n# ---output---\nbornfor\nthis\n\n\n\ns = \"born\\tfor\\tthis\"\nprint(s)\n\n# ---output---\nborn    for    this\n```\n\n## 9. 字符串的连接\n\n```python\ns1 = 'born'\ns2 = 'forthis'\nprint(s1 + s2)  # 形成了一个字符串\nprint(s1, s2)  # 还是两个独立的字符串\n\n# ---output---\nbornforthis\nborn forthis\n\n\ns1 = '*-love-'\nprint(s1 * 10)\n\n# ---output---\n*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-\n```\n\n我想在上面的输出添加末尾加一个 `*` 怎么办呢？\n\n```python\n原本:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-\n目标:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*\n```\n\n**思考一下，如何实现。**\n\n```python\ns1 = '*-love-'\nprint(s1 * 10, end='*')\n```\n\n## 10. 读取用户输入\n\n### 10.1 input() 基本使用\n\n使用 `input()` 获取用户输入。\n\n```python\nuser_input = input()\nprint(user_input)\n\n# ---output---\nbornforthis\nbornforthis\n```\n\n### 10.2 input() 使用输入提示\n\n但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？\n\n![](./04-python-string/image-20231214174641525.png)\n\n如何解决？——使用输入提示。\n\n`input()` 函数里面支持我们写入字符串进行提示。\n\n```python\nuser_input = input('Enter your name:>>>')\nprint(\"user input name:\", user_input)\n\n# ---output---\nEnter your name:>>>bornforthis\nuser input name: bornforthis\n```\n\n![这样就很直观了](./04-python-string/image-20231214175112464.png)\n\n### 10.3 input() 的特点\n\n#### 10.3.1 input() 得到类型皆为字符串「str」\n\n```python\nIn [2]: type(input(':>>>'))  # 使用 type 检测 input 获取用户输入之后的数据类型\n:>>>bornforthis\nOut[2]: str\n\nIn [3]: type(input(':>>>'))\n:>>>12\nOut[3]: str\n\nIn [4]: type(input(':>>>'))\n:>>>12.1\nOut[4]: str\n\nIn [5]: type(input(':>>>'))\n:>>>(1, 2, 3, 4)\nOut[5]: str\n\nIn [6]: type(input(':>>>'))\n:>>>[1, 2, 3, 4]  \nOut[6]: str\n\nIn [7]: type(input(':>>>'))\n:>>>{1, 2, 3, 4, 5}\nOut[7]: str\n\nIn [8]: type(input(':>>>'))\n:>>>{'a': 19, 'b': 20}\nOut[8]: str\n\nIn [9]: type(input(':>>>'))\n:>>>True\nOut[9]: str\n```\n\n通过上面的代码示例，我们可以知道：通过 `input()` 获取用户输入，得到的数据类型都是**字符串**。\n\n得知 `input()` 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。\n\n#### 10.3.2 方法一：强制类型转换\n\n```python\nIn [10]: n = int(input(':>>>'))\n:>>>12\n\nIn [11]: type(n)\nOut[11]: int\n\nIn [12]: # 存在一些问题\n\nIn [13]: s = list(input(':>>>'))\n:>>>[1, 2, 3, 4, 5]\n\nIn [14]: s  # 把每一个字符拆开\nOut[14]: ['[', '1', ',', ' ', '2', ',', ' ', '3', ',', ' ', '4', ',', ' ', '5', ']']\n\nIn [15]: type(s)\nOut[15]: list\n\nIn [16]: b = bool(input(':>>>'))\n:>>>True\n\nIn [17]: b\nOut[17]: True\n\nIn [18]: type(b)\nOut[18]: bool\n```\n\n- 适合：数字「整数、浮点数」、字符串、布尔型\n- 不适合：列表、元组、字典、集合\n\n#### 10.3.3 方法二：使用 eval()\n\n1. `eval()` 的妙用\n\n```python\nIn [28]: s = eval(input(':>>>'))\n:>>>12\n\nIn [29]: type(s), s\nOut[29]: (int, 12)\n\nIn [30]: s = eval(input(':>>>'))\n:>>>[1, 2, 3]\n\nIn [31]: type(s), s\nOut[31]: (list, [1, 2, 3])\n\nIn [32]: s = eval(input(':>>>'))\n:>>>(1, 2, 3)\n\nIn [33]: type(s), s\nOut[33]: (tuple, (1, 2, 3))\n\nIn [34]: s = eval(input(':>>>'))\n:>>>{1, 2, 3}\n\nIn [35]: type(s), s\nOut[35]: (set, {1, 2, 3})\n\nIn [36]: s = eval(input(':>>>'))\n:>>>True\n\nIn [37]: type(s), s\nOut[37]: (bool, True)\n\nIn [38]: s = eval(input(':>>>'))\n:>>>{'a': 1, 'b': 2}\n\nIn [39]: type(s), s\nOut[39]: (dict, {'a': 1, 'b': 2})\n```\n\n2. `eval()` 伴随着的问题\n\n上面的代码看似解决了我们所遇到的问题，但是也伴随着我们需要注意的问题。\n\n```python\nIn [40]: s = eval(input(':>>>'))\n:>>>string \n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[40], line 1\n----> 1 s = eval(input(':>>>'))\n\nFile <string>:1\n\nNameError: name 'string' is not defined\n```\n\n稍微分析一下 `eval()` 的功能“大概”实现原因：\n\n- input 获取用户输入，得到字符串类型。\n\n```python\nIn [44]: s = input(':>>>')\n:>>>[1, 2, 3]\n\nIn [45]: s\nOut[45]: '[1, 2, 3]'\n```\n\n从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」\n\n所以，为什么会导致上面的报错呢？\n\n1. 获取用户输入：`s = eval(input(':>>>'))`\n2. 其中 input 会得到 `'string'`，而通过 `eval` 转换之后，就类似于 `string` 变量。但是我们实际上我们在我们之前的代码中，并没有创建 string 这个变量。\n3. 故而报错，当然没有通过上面的分析也可以大概预料到问题，因为报错很直观：`NameError: name 'string' is not defined` 。\n4. 所以，解决方法很直白：\n    1. 一种是你在获取用户输入之前直接提前创建一个叫做 string 的变量；「显然，不是我们想要的」\n    2. 另一种则是输入的时，有意加上单引号或者双引号、三引号。\n\n::: code-tabs\n\n@tab Code 1\n\n```python\nIn [50]: string = 'hello this string'\n\nIn [51]: s = eval(input(':>>>'))\n:>>>string\n\nIn [52]: s\nOut[52]: 'hello this string'\n\nIn [53]: num = 12\n\nIn [54]: s = eval(input(':>>>'))\n:>>>num\n\nIn [55]: type(s), s\nOut[55]: (int, 12)\n\nIn [56]: s = eval(input(':>>>'))\n:>>>'string'\n\nIn [57]: type(s), s\nOut[57]: (str, 'string')\n```\n\n@tab Code 2\n\n```python\nIn [56]: # Step 1: 探究 eval 的实现原理\n\nIn [57]: s = input(':>>>')\n:>>>[1, 2, 3]  \n\nIn [58]: s\nOut[58]: '[1, 2, 3]'\n\nIn [59]: s = eval(input(\":>>>\"))\n:>>>[1, 2, 3]\n\nIn [60]: s\nOut[60]: [1, 2, 3]\n\nIn [61]: # eval 大体是实现把字符串外面的引号去掉，实现变回原本的数据类型\n\nIn [62]: # Step 2: 探究报错原因\n\nIn [63]: s = input(':>>>')\n:>>>look\n\nIn [64]: s\nOut[64]: 'look'\n\nIn [65]: # 我们可以观察输出的是 'look'，如果直接去掉 look 左右的引号将变成：变量。但变量没有被定义，所以\n    ...: 会报错。\n\nIn [66]: s = eval(input(\":>>>\"))\n:>>>look\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[66], line 1\n----> 1 s = eval(input(\":>>>\"))\n\nFile <string>:1\n\nNameError: name 'look' is not defined\n\nIn [67]: # Step 3: 解决方法\n\nIn [68]: # 既然 eval 是直接去掉 look 外面的引号，导致变量不存在报错。所以我有两种解决方法：\n\nIn [69]: # 方法一：提前创建一个变量\n\nIn [70]: # 方法二：输入的时，有意加上单引号或者双引号、三引号\n\nIn [71]: look = '我提前创建一个 look 变量'  # 方法一\n\nIn [72]: s = eval(input(\":>>>\"))\n:>>>look\n\nIn [73]: s\nOut[73]: '我提前创建一个 look 变量'\n\nIn [74]: s = eval(input(\":>>>\"))  # 方法二：我提前加一个引号，input 也会给它一个引号，最后有两对引号，eval 拆掉一对引号，还剩一对引号。——成功得到字符串\n:>>>'look'\n\nIn [75]: s\nOut[75]: 'look'\n```\n\n:::\n\n3. `eval()` 小技巧\n\n任务要求：获取户输入，实现两位的加减乘除。\n\n```python\nIn [58]: eval(input(':>>>'))\n:>>>1 + 1\nOut[58]: 2  # eval(input(':>>>')) == eval('1 + 1') == 2\n\nIn [59]: eval(input(':>>>'))\n:>>>2 - 1\nOut[59]: 1  # eval(input(':>>>')) == eval('2 - 1') == 1\n\nIn [60]: eval(input(':>>>'))\n:>>>9 * 8\nOut[60]: 72  # eval(input(':>>>')) == eval('9 * 8') == 72\n\nIn [61]: eval(input(':>>>'))\n:>>>9 / 3\nOut[61]: 3.0\n```\n\n#### 10.3.4 浅谈 input 的设计理念\n\n在 Python 中，使用 `input()` 函数时，它会从标准输入（通常是键盘）读取一行文本，并且这一行文本会被当作字符串处理。这是因为用户输入的内容可能包括各种字符，包括数字、字母和符号。由于 `input()` 函数不能预知用户将要输入什么类型的数据，它默认将输入内容作为字符串返回，这样可以保持最大的灵活性和兼容性。\n\n如果你需要将这个字符串转换为其他数据类型，比如整数或浮点数，你可以使用相应的转换函数，例如 `int()` 或 `float()`，来进行转换。这里是一个简单的例子：\n\n```python\n# 使用 input() 获取用户输入，并存储为字符串\nuser_input = input(\"请输入一个数字: \")\n\n# 将字符串转换为整数\nnumber = int(user_input)\n\n# 打印转换后的整数\nprint(\"输入的整数是:\", number)\n```\n\n在这个例子中，如果用户输入的不是一个有效的整数，`int()` 函数会抛出一个 `ValueError`。因此，在实际使用中，通常需要加上错误处理来确保程序的健壮性。\n\n\n\n\n\n## 11. 小试牛刀\n\n获取用户连续输入的两个整数，得到两个整数的和。\n\n**要求：**\n\n- 只能使用一个 input 函数；\n- 用户输入格式：num1 num2\n- 输出计算结果；\n\n**输入：**\n\n```python\n5 6\n```\n\n**输出：**\n\n```python\n11\n```\n\n::: code-tabs\n\n@tab Code1\n\n```python\nnums = eval(input(':>>>').replace(' ', '+'))\nprint(nums)\n```\n\n@tab Code2\n\n```python\nnums = input(':>>>').split()\nsum = int(nums[0]) + int(nums[1])\nprint(sum)\n```\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/04-python-string.md","raw":"---\ntitle: 04-str NoteBook\nauthor: AI悦创\nabbrlink: fa256f4b\ndate: 2023-12-08 13:18:16\n---\n\n## 1. 字符串的定义\n\n**字符串是由字母、数字和特殊字符来组成的序列。**\n\n![有序性](04-python-string/image-20231208131933540.png)\n\n## 2. 创建字符串\n\n**如何创建字符串？**\n\n——使用 **<span style=\"color:orange\">单引号、双引号</span>或者<span style=\"color:orange\">三引号</span>**。\n\n```python\nname = 'bornforthis'\nnumber = \"18\"\nparagraph = '''Hello,Bornforthis!\nHello,World!'''\nparagraph_two = \"\"\"Hello,Bornforthis!\nHello,World!\"\"\"\n```\n\n**为什么 Python 同时支持三种创建字符串的方法？**\n\n```python\nstring = 'I am bornforthis.'  # 在英文当中的常规表达式\nprint(string)\n```\n\n但是英文当中可以缩写如下：\n\n```python\nstring = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\nprint(string)\n\n\n# 输出\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\", line 15\n    string = 'I'm bornforthis.'  # 在英文当中也可以这样缩写\n                ^\nSyntaxError: invalid syntax\n```\n\n**因为，开头是单引号，所以 Python 会寻找到下一个第一次出现的单引号进行匹配。而第一个单引号不在字符串的末尾，所以导致整个字符串异常。（没有完全包裹字符串全部内容）**\n\n如何解决上面描述的问题呢？——使用双引号。\n\n```python\nstring = \"I'm bornforthis.\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\nI'm bornforthis.\n```\n\n- 有时候我们需要字符串里面有单引号或双引号，此时发挥作用： **<span style=\"color:orange\">单双引号混用，是第一个原因</span>**\n\n那么三引号呢？\n\n假设我们现在需要存储如下文本：\n\n```python\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创\n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n放入字符串，我们如何在 Python 代码实现呢？\n\n```python\nstring = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创\n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py\", line 15\n    string = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创\n                                                     ^\nSyntaxError: EOL while scanning string literal\n```\n\n常规的单引号、双引号是不支持多行文本，但是有一个方法可以间接实现看似多行文本，但实际是单行，在每一行的末尾添加  `\\`：\n\n```python\nstring = \"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\\n\\\n浅者见浅，深者见深——黄家宝\\\n\\\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\\n\\\n先实现功能，再去优化，否则一切会很乱。——AI悦创\\\n\\\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n# 输出\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n从上面的输出可知，每行结尾添加 `\\` 只能实现看起来换行，实际上还是一行。「就是：一行显示不完，换行显示而已，但是本身还是一行」\n\n![](./04-python-string/image-20231208133549593.png)\n\n此时，我们使用三引号测试：\n\n```python\nstring = \"\"\"我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\"\"\"  # 外面使用双引号进行包裹即可\nprint(string)\n\n\n# 输出\n我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \n\n浅者见浅，深者见深——黄家宝\n\n起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\n\n先实现功能，再去优化，否则一切会很乱。——AI悦创\n\n凡是你不能清晰写下来的东西，都是你还没有真正理解的东西\n```\n\n可以从上面的输出可知，原本什么格式，输出就是什么格式。「原样输出」「三个单引号的效果和上面一样」\n\n- **<span style=\"color:orange\">三个单引号或者三个双引号，实现原样输出。</span>**\n- **<span style=\"color:orange\">多行注释</span>**\n- **<span style=\"color:orange\">单双三引号混用</span>**（代码略）\n\n![多行注释](./04-python-string/image-20231208133942865.png)\n\n## 3. 字符串长度\n\n如何获取一个字符串的长度呢？——使用 `len()`\n\n**`len()`: 返回字符串中字符长度或者字符数。**\n\n```python\nparagraph = \"Hello,Bornforthis!\"\nprint(len(paragraph))\n\n# 输出\n18\n```\n\n在使用 len 获取字符串长度时，是从数字 1 开始数的。\n\n\n\n## 4. 字符串中的字符获取\n\n### 4.1 获取单个字符\n\n```python\nstring = \"bornforthis\"\n\"\"\"\n语法: string = \"bornforthis\"\nselect = string[position]\n\"\"\"\n# 获取字符 b\nselect = string[0]\nprint(select)\n\n# 提取 f\nselect = string[4]\nprint(select)\n\n# s 「使用三种方法实现」\nselect1 = string[10]\nselect2 = string[len(string) - 1]\nselect3 = string[-1]\nprint(select1, select2, select3)\n\n# 输出\nb\nf\ns s s\n```\n\n### 4.2 获取多个连续字符「子字符串」\n\n```python\nstring = \"bornforthis\"\n\"\"\"\n语法: string = \"bornforthis\"\nselect = string[start: end]\nPS: end 记得 +1\n\"\"\"\n# 获取字符 bor\nselect = string[0:2]  # bo\nselect = string[0:3]  # bor\nprint(select)\n\n# 提取 for\nselect = string[4:7]\nprint(select)\n\n# this\nselect = string[7:12]\nprint(select)\n\n# 输出\nbor\nfor\nthis\n```\n\n### 4.3 获取多个不连续的字符\n\n```python\nstring = \"0123456789\"\n\"\"\"\n语法: string = \"0123456789\"\nselect = string[start: end: sep]\nPS: end 记得 +1\n\"\"\"\n# 获取字符 02468\nselect = string[0:len(string):2]\nprint(select)\n\n# 提取 13579\nselect = string[1:len(string):2]\nprint(select)\n\n# 提取 bnri\nstring = \"bornforthis\"\nselect = string[0: len(string):3]\nprint(select)\n\n# 提取 ofts\nselect = string[1: len(string):3]\nprint(select)\n\n# 输出\n02468\n13579\nbnri\nofts\n```\n\n### 4.4 优化\n\n如果，我们要提取的字符是从开头到结尾，则我们可以省略开头和结尾，留空即可。\n\n所以上面 4.3 的代码可以等价如下：\n\n```python\nstring = \"0123456789\"\n\"\"\"\n语法: string = \"0123456789\"\nselect = string[:: sep]\nPS: end 记得 +1\n\"\"\"\n# 获取字符 02468\nselect = string[::2]\nprint(select)\n\n# 提取 13579\nselect = string[1::2]\nprint(select)\n\n# 提取 bnri\nstring = \"bornforthis\"\nselect = string[::3]\nprint(select)\n\n# 提取 ofts\nselect = string[1::3]\nprint(select)\n\n# 输出\n02468\n13579\nbnri\nofts\n```\n\n### 4.5 字符串倒序\n\n#### 4.5.1 实现\n\n字符串的第三个位置，控制的是字符提取的方向。默认为正数 1，如果我们改成 -1，则会变成反方向。\n\n::: warning\n\n正负控制方向，数字大小控制步长。\n\n:::\n\n```python\nstring = \"bornforthis\"\nreverse = string[::-1]\nprint(reverse)\n\n# 输出\nsihtrofnrob\n```\n\n#### 4.5.2 存在的问题\n\n::: info 思考🤔\n\n上面代码 `string[::-1]` 前两位省略了什么数字？尝试填写上去。\n\n:::\n\n你有可能是这么想的：\n\n```python\nstring = \"bornforthis\"\n# print(len(string))\nselect = string[0:11:-1]\nprint(select)  # 无结果\n```\n\n想必你也发现了，没有得到结果也没有报错。\n\n**Why？**\n\n![](./04-python-string/image-20231208141259131.png)\n\n由上面分析，我们应该如何解决？\n\n#### 4.5.3 解决方法\n\n##### 4.5.3.1 方法一：调换位置\n\n- 能否解决：可以\n- 存在什么问题？：少了一个字符\n\n```python\nstring = \"bornforthis\"\nselect = string[11:0:-1]\nprint(select)  # sihtrofnro\n```\n\n**为什么少一个字符？**\n\n——存在一个悖论，因为结束🔚是 0，但是 `0 + 1` 时得到 1，而 1 是从左到右的第二个字符。故而 +1 是无法实现和解决了。\n\n但是，我们可以利用不写结尾，得到最后一个缺失的字符：`string[11::-1]` 。\n\n虽然解决，但是我们偏离了我的一开始的问题：**前两位省略了什么数字？**「因为，又回到了一开始省略的状态」\n\n##### 4.5.3.2 方法二：重写开始结尾\n\n**想想字符串的有序性，从右到左。**\n\n为什么要纠结前面两个空的数字是多少？——为了之后得到某一部分的字符倒序。\n\n```python\nstring = \"bornforthis\"\nselect = string[-1:-12:-1]\nprint(select)  # sihtrofnrob\n```\n\n![](./04-python-string/image-20231211161559839.png)\n\n**小试牛刀：** 获取 `rofn`\n\n```python\nstring = \"bornforthis\"\nselect = string[-5:-9:-1]\nprint(select)  # rofn\n```\n\n## 5. 字符串内置方法\n\n### 5.1 .upper()\n\n将字符串内容，全部转成大写。\n\n```python\nstring = \"bornforthis\"\nupper_string = string.upper()\nprint(upper_string)\n\n# ---output---\nBORNFORTHIS\n```\n\n### 5.2 .lower()\n\n将字符串的内容，全部转成小写。\n\n```python\nstring = \"BORNFORTHIS\"\nlower_string = string.lower()\nprint(lower_string)\n\n# ---output---\nbornforthis\n```\n\n### 5.3 .capitalize()\n\n将字符串首字母，转换成大写。「只对第一个字母大写，其它后面的字符会变成小写」\n\n```python\nstring = \"bornForthis To Aiyc\"\ncapitalize_string = string.capitalize()\nprint(capitalize_string)\n\n# ---output---\nBornforthis to aiyc\n```\n\n### 5.4 .title()\n\n将字符串中的每个单词的首字母，转换成大写，其余的字符都转换成小写。\n\n```python\nstring = \"bornforthis to aiyc\"\ntitle_string = string.title()\nprint(title_string)\n\n# ---output---\nBornforthis To Aiyc\n\n\nstring = \"bornforthis-to-aiyc\"  # 不管是什么间隔，都会转换成首字母大写\ntitle_string = string.title()\nprint(title_string)\n\n# ---output---\nBornforthis-To-Aiyc\n\n\nstring = \"bornforThis to aiYc\"  # 其余的字符都转换成小写\ntitle_string = string.title()\nprint(title_string)\n\n# ---output---\nBornforthis To Aiyc\n```\n\n### 5.5 .startswith()\n\n检测字符串是不是以特定字符或单词开头，返回布尔值。\n\n```python\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"b\")\nprint(startswith_string)\n\n# ---output---\nTrue\n\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"bo\")\nprint(startswith_string)\n\n# ---output---\nTrue\n\n\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"p\")\nprint(startswith_string)\n\n# ---output---\nFalse\n\nstring = \"bornforthis\"\nstartswith_string = string.startswith(\"b1\")\nprint(startswith_string)\n\n# ---output---\nFalse\n```\n\n### 5.6 .endswith()\n\n检测字符串是不是以特定字符或单词结尾，返回布尔值。\n\n```python\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"s\")\nprint(endswith_string)\n\n# ---output---\nTrue\n\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"is\")\nprint(endswith_string)\n\n# ---output---\nTrue\n\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"i\")\nprint(endswith_string)\n\n# ---output---\nFalse\n\nstring = \"bornforthis\"\nendswith_string = string.endswith(\"s6\")\nprint(endswith_string)\n\n# ---output---\nFalse\n```\n\n### 5.7 .count()\n\n计算特定字符或单词在目标字符串中存在的次数。\n\n```python\nstring = \"bornforthis\"\ncount_string = string.count('r')\nprint(count_string)\n\n# ---output---\n2\n\nstring = \"bornforthis\"\ncount_string = string.count('or')\nprint(count_string)\n\n# ---output---\n2\n\nstring = \"bornforthis\"\ncount_string = string.count('a')\nprint(count_string)\n\n# ---output---\n0\n\n\nstring = \"bornforthis\"\ncount_string = string.count('ap')\nprint(count_string)\n\n# ---output---\n0\n```\n\n### 5.8 .find()\n\n寻找目标字符或单词在特定字符串中，第一次出现的下标。「也就是出现重复的，也只是返回第一次出现的下标」如果是查找单词，那么 `find()` 返回目标单词的第一个字符的下标。\n\n如果，查询的字符或单词不存在，则返回 `-1`。\n\n```python\nstring = \"bornforthis\"\nfind_string = string.find('b')\nprint(find_string)\n\n# ---output---\n0\n\nstring = \"bornforthis\"\nfind_string = string.find('a')\nprint(find_string)\n\n# ---output---\n-1\n\n\nstring = \"bornforthis\"\nfind_string = string.find('for')\nprint(find_string)\n\n# ---output---\n4\n\n\nstring = \"bornforthis\"\nfind_string = string.find('aiyc')\nprint(find_string)\n\n# ---output---\n-1\n```\n\n### 5.9 .index()\n\n寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 `index()` 返回目标单词的第一个字符的下标。\n\n如果，查询的字符或单词不存在，则**报错**。\n\n```python\nstring = \"bornforthis\"\nindex_result = string.index('b')\nprint(index_result)\n\n# ---output---\n0\n\nstring = \"bornforthis\"\nindex_result = string.index('a')\nprint(index_result)\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\", line 83, in <module>\n    index_result = string.index('a')\nValueError: substring not found\n\nstring = \"bornforthis\"\nindex_result = string.index('for')\nprint(index_result)\n\n# ---output---\n4\n\nstring = \"bornforthis\"\nindex_result = string.index('aiyc')\nprint(index_result)\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\", line 83, in <module>\n    index_result = string.index('aiyc')\nValueError: substring not found\n```\n\n### 5.10 .isdigit()\n\n判断字符串是不是纯数字字符串，字符串中但凡有一个字符是非数字，则返回 False。\n\n```python\nstring = \"12345678\"\nisdigit_result = string.isdigit()\nprint(isdigit_result)\n\n# ---output---\nTrue\n\nstring = \"123 45678\"\nisdigit_result = string.isdigit()\nprint(isdigit_result)\n\n# ---output---\nFalse\n```\n\n### 5.11 .isalpha()\n\n判断字符串是不是纯字母字符串，字符串中但凡有一个非字母的，则返回 False。\n\n```python\nstring = \"bornforthis\"\nisalpha_result = string.isalpha()\nprint(isalpha_result)\n\n# ---output---\nTrue\n\n\nstring = \"born forthis\"\nisalpha_result = string.isalpha()\nprint(isalpha_result)\n\n# ---output---\nFalse\n```\n\n### 5.12 .isalnum()\n\n判断字符串是不是纯数字、纯字母或纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。\n\n```python\nstring = \"bornforthis\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"12345678\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"bornforthis8888888888\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"bornforthis 8888888888\"\nboolean = string.isalnum()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.13 .isupper()\n\n判断字符串中的字母否全大写，全大写则返回 True，否则返回 False。\n\n```python\nstring = \"BORNFORTHIS\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"BORNFORTHIS12-、\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nTrue\n\n\nstring = \"BORNforthis\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nFalse\n\n\nstring = \"bornforthis\"\nboolean = string.isupper()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.14 .islower()\n\n判断字符串中字母是不是全小写，全小写则返回 True，否则返回 False。\n\n```python\nstring = \"bornforthis\"\nboolean = string.islower()\nprint(boolean)\n\n# ---output---\nTrue\n\nstring = \"bornforthis121-、\"\nboolean = string.islower()\nprint(boolean)\n\n# ---output---\nTrue\n\nstring = \"bornforthisA121-、\"\nboolean = string.islower()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.15 .isspace()\n\n判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。\n\n```python\nstring = \"   \"\nboolean = string.isspace()\nprint(boolean)\n\n# ---output---\nTrue\n\nstring = \"\"\nboolean = string.isspace()\nprint(boolean)\n\n# ---output---\nFalse\n\nstring = \"bornforthis\"\nboolean = string.isspace()\nprint(boolean)\n\n# ---output---\nFalse\n```\n\n### 5.16 .strip()\n\n默认去掉目标字符串的前后空白字符，如果指定参数，则去掉指定字符。\n\n```python\nstring = \"   bornforthis   \"\nstrip_string = string.strip()\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后空白字符后:\", strip_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n去掉前后空白字符后: bornforthis\n\n\nstring = \"-----bornforthis-----\"\nstrip_string = string.strip('-')\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后 '-' 字符后:\", strip_string)\n\n# ---output---\n原本的字符串: -----bornforthis-----\n去掉前后 '-' 字符后: bornforthis\n\n\nstring = \"--- --bornforthis-- ---\"\nstrip_string = string.strip('-')  # 只去掉连续的减号\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后 '-' 字符后:\", strip_string)\n\n# ---output---\n原本的字符串: --- --bornforthis-- ---\n去掉前后 '-' 字符后:  --bornforthis-- \n\n\n\nstring = \"--- --bornforthis-- ---\"  # 如果想去掉减号和空格呢？\nstrip_string = string.strip('- ')  # 填入要去掉的字符「不计较先后顺序」\nprint(\"原本的字符串:\", string)\nprint(\"去掉前后 '- ' 字符后:\", strip_string)\n\n# ---output---\n原本的字符串: --- --bornforthis-- ---\n去掉前后 '- ' 字符后: bornforthis\n```\n\n### 5.17 .lstrip()\n\n默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。\n\n```python\nstring = \"   bornforthis   \"\nlstrip_string = string.lstrip()\nprint(\"原本的字符串:\", string)\nprint(\"去掉左边空白字符后:\", lstrip_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n去掉左边空白字符后: bornforthis   \n\n\nstring = \"----bornforthis----\"\nlstrip_string = string.lstrip('-')\nprint(\"原本的字符串:\", string)\nprint(\"去掉左边 '-' 后:\", lstrip_string)\n\n\n# ---output---\n原本的字符串: ----bornforthis----\n去掉左边 '-' 后: bornforthis----\n\nstring = \"-- --bornforthis----\"\nlstrip_string = string.lstrip('- ')  # 不分先后顺序\nprint(\"原本的字符串:\", string)\nprint(\"去掉左边 '- ' 后:\", lstrip_string)\n\n# ---output---\n原本的字符串: -- --bornforthis----\n去掉左边 '- ' 后: bornforthis----\n```\n\n### 5.18 .rstrip()\n\n默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。\n\n```python\nstring = \"   bornforthis   \"\nrstrip_string = string.rstrip()\nprint(\"原本的字符串:\", string)\nprint(\"去掉右边空白字符后:\", rstrip_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n去掉右边空白字符后:    bornforthis\n\n\nstring = \"----bornforthis----\"\nrstrip_string = string.rstrip('-')\nprint(\"原本的字符串:\", string)\nprint(\"去掉右边 '-' 后:\", rstrip_string)\n\n# ---output---\n原本的字符串: ----bornforthis----\n去掉右边 '-' 后: ----bornforthis\n\n\nstring = \"----bornforthis-- --\"\nrstrip_string = string.rstrip('- ')  # 不分先后顺序\nprint(\"原本的字符串:\", string)\nprint(\"去掉右边 '- ' 后:\", rstrip_string)\n\n# ---output---\n原本的字符串: ----bornforthis-- --\n去掉右边 '- ' 后: ----bornforthis\n```\n\n### 5.19 .replace()\n\n`.replace(old, new, count)` 第一个位置传入待替换的旧「old」字符，第二个位置传入要替换的新字符「new」，默认替换全部，count 控制替换次数。\n\n```python\nstring = \"   bornforthis   \"\nreplace_string = string.replace(' ', '*')  # 把空白字符替换成 *\nprint(\"原本的字符串:\", string)\nprint(\"替换后:\", replace_string)\n\n# ---output---\n原本的字符串:    bornforthis   \n替换后: ***bornforthis***\n\n\n\nstring = \"ai-bornforthis-ai\"\nreplace_string = string.replace('ai', 'love')  # 把 ai 替换成 love，默认全部替换\nprint(\"原本的字符串:\", string)\nprint(\"替换后:\", replace_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-ai\n替换后: love-bornforthis-love\n\n\n\nstring = \"ai-bornforthis-ai\"\nreplace_string = string.replace('ai', 'love', 1)  # 替换一次\nprint(\"原本的字符串:\", string)\nprint(\"替换后:\", replace_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-ai\n替换后: love-bornforthis-ai\n```\n\n### 5.20 .split()\n\n`.split(sep, maxsplit)` 以特定字符进行分割，默认空格分割。如果传入参数「sep」，则以参数进行分割。返回分割后的列表。maxsplit 用于控制分割几次。\n\n```python\nstring = \"ai bornforthis ai\"\nsplit_string = string.split()\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", split_string)\n\n# ---output---\n原本的字符串: ai bornforthis ai\n分割后: ['ai', 'bornforthis', 'ai']\n\n\nstring = \"ai-bornforthis-ai\"\nsplit_string = string.split('-')  # 以 - 好分割\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", split_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-ai\n分割后: ['ai', 'bornforthis', 'ai']\n\n\nstring = \"ai-bornforthis-love\"\nsplit_string = string.split('-', 1)\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", split_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-love\n分割后: ['ai', 'bornforthis-love']\n```\n\n::: warning\n\n注意⚠️：使用 spilt 分割时，不管每个字符之间有几个空格，都将会正常的分割出来。\n\n```python\ns = \"ai  bornforthis  ai    book\"\nnew_s = s.split()\nprint(new_s)\n\n# ---output---\n['ai', 'bornforthis', 'ai', 'book']\n```\n\n当我们指定 split 的间隔时，spilt 会严格按照我们指定的分割符号来分割。\n\n```python\ns = \"ai  bornforthis  ai    book\"\nnew_s = s.split(' ')\nprint(new_s)\n\n# ---output---\n['ai', '', 'bornforthis', '', 'ai', '', '', '', 'book']\n```\n\n上面多输出的结果空字符串，就是证明。\n\n其实，在学习的过程当中，还是需要经常举一反三的。如果是其它连续字符会不会有这样情况呢？——答案是肯定的，也会有这样的情况。\n\n你可以自行分析和编写代码试一试～\n\n:::\n\n### 5.21 .rsplit()\n\n`.rsplit(sep, maxsplit)` 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。\n\n```python\nstring = \"ai-bornforthis-love\"\nrsplit_string = string.rsplit('-')\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", rsplit_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-love\n分割后: ['ai', 'bornforthis', 'love']\n\n\nstring = \"ai-bornforthis-love\"\nrsplit_string = string.rsplit('-', 1)\nprint(\"原本的字符串:\", string)\nprint(\"分割后:\", rsplit_string)\n\n# ---output---\n原本的字符串: ai-bornforthis-love\n分割后: ['ai-bornforthis', 'love']\n```\n\n### 5.22 .join()\n\n以特定字符使字符串间隔。\n\n```python\nstring = \"bornforthis\"\njoin_string = '-'.join(string)\nprint(\"原本的字符串:\", string)\nprint(\"拼接后:\", join_string)\n\n# ---output---\n原本的字符串: bornforthis\n分割后: b-o-r-n-f-o-r-t-h-i-s\n```\n\n## 6. 字符串格式化\n\n```python\nstring = \"Hi Bornforthis,Welcome to XiaMen.\"\nprint(string)\n\n# ---output---\nHi Bornforthis,Welcome to XiaMen.\n```\n\n- 所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。\n- 我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。\n\n当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。\n\n```python\nname = \"Bornforthis\"\nregion = \"XiaMen\"\nstring1 = \"Hi \"\nstring2 = \",Welcome to \"\nstring3 = \".\"\nresult = string1 + name + string2 + region + string3\nprint(result)\n\n# ---output---\nHi Bornforthis,Welcome to XiaMen.\n```\n\n由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。\n\n而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：\n\n```python\nstring = \"Money is \" + 190\nprint(string)\n\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py\", line 1, in <module>\n    string = \"Money is \" + 190\nTypeError: can only concatenate str (not \"int\") to str\n\n\nstring = \"Money is \" + str(190)\nprint(string)\n# ---output---\nMoney is 190\n```\n\n—— **format** 就应运而生了。\n\n### 6.1 .format()\n\n1. 单个花括号 `{}`\n\n```python\nstring = \"Hi {},Welcome to XiaMen.\".format(\"aiyuechuang\")\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to XiaMen.\n\n\n\ntemplate_string = \"Hi {},Welcome to XiaMen.\"\nprint(template_string.format(\"Bornforthis\"))\n\n# ---output---\nHi Bornforthis,Welcome to XiaMen.\n\n\n\nnew_string = template_string.format(\"AI悦创\")\nprint(new_string)\n\n\n# ---output---\nHi AI悦创,Welcome to XiaMen.\n```\n\n2. 一个花括号以上「按顺序填充」\n\n```python\nstring = \"Hi {},Welcome to {}.\".format(\"aiyuechuang\", \"厦门\")\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to 厦门.\n\n\ntemplate_string = \"Hi {},Welcome to {}.\"\nprint(template_string.format(\"Bornforthis\", \"上海\"))\n\n# ---output---\nHi Bornforthis,Welcome to 上海.\n\n\nnew_string = template_string.format(\"AI悦创\", \"北京\")\nprint(new_string)\n\n# ---output---\nHi AI悦创,Welcome to 北京.\n```\n\n3. 多个花括号指定位置\n\n```python\nstring = \"Hi {1},Welcome to {0}.\".format(\"厦门\", \"aiyuechuang\")\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to 厦门.\n\n\ntemplate_string = \"Hi {1},Welcome to {0}.\"\nprint(template_string.format(\"上海\", \"Bornforthis\"))\n\n# ---output---\nHi Bornforthis,Welcome to 上海.\n\n\nnew_string = template_string.format(\"北京\", \"AI悦创\")\nprint(new_string)\n\n# ---output---\nHi AI悦创,Welcome to 北京.\n```\n\n4. 参数指定\n\n```python\nstring = \"Hi {name},Welcome to {region}.\".format(region='厦门', name='aiyuechuang')\nprint(string)\n\n# ---output---\nHi aiyuechuang,Welcome to 厦门.\n\ntemplate_string = \"Hi {name},Welcome to {region}.\"\nprint(template_string.format(name=\"Bornforthis\", region='上海'))\n\n# ---output---\nHi Bornforthis,Welcome to 上海.\n\nnew_string = template_string.format(name='AI悦创', region='北京')\nprint(new_string)\n\n# ---output---\nHi AI悦创,Welcome to 北京.\n```\n\n5. 保留指定小数位\n\n```python\nstring = \"Money is {:.3f}.\".format(190)  # .3f 保留三位小数\nprint(string)\n\n# ---output---\nMoney is 190.000.\n```\n\n> 此时，放入数字是不会报错了。\n\n### 6.2 f\n\n1. 直接读取变量\n\n```python\nname = \"Bornforthis\"\nregion = \"厦门\"\nstring = f\"Hi {name},Welcome to {region}.\"\nprint(string)\n\n# ---output---\nHi Bornforthis,Welcome to 厦门.\n```\n\n2. 保留小数位\n\n```python\nmoney = 190\nstring = f\"Money is {money:.3f}.\"\nprint(string)\n\n\n# ---output---\nMoney is 190.000.\n```\n\n### 6.3 % 格式化\n\n- `%d`: 整数\n- `%s`: 字符串\n- `%f`: 浮点数\n\n1. 单个位置传入\n\n```python\nstring = \"Money is %d\"\nnew_s = string % 13\nprint(new_s)\nprint(string % 19)\nstring = \"Money is %d\" % 190\nprint(string)\n\n# ---output---\nnew_string: Money is 13\n直接放: Money is 19\nMoney is 190\n```\n\n2. 多个位置传入\n\n```python\nstring = \"Money is %d %s\"\nnew_s = string % (13, '发大财')\nprint(new_s)\nprint(string % (888, '暴富'))\nstring = \"Money is %d %s\" % (190, \"超有钱\")\nprint(string)\n\n# ---output---\nMoney is 13 发大财\nMoney is 888 暴富\nMoney is 190 超有钱\n```\n\n```python\nstring = \"Money is %d %s\"\nnew_s = string % (13, 'make a million')\nprint(new_s)\nprint(string % (888, 'sudden wealth'))\nstring = \"Money is %d %s\" % (190, 'super rich')\nprint(string)\n\n# ---output---\nMoney is 13 make a million\nMoney is 888 sudden wealth\nMoney is 190 super rich\n```\n\n3. 保留小数位\n\n```python\nstring = \"Money is %.3f\"\nnew_s = string % 19\nprint(new_s)\nprint(string % 18)\nstring = \"Money is %.3f\" % 180\nprint(string)\n\n\n# ---output---\nMoney is 19.000\nMoney is 18.000\nMoney is 180.000\n```\n\n### 6.4 f 和 format、% 的优缺点\n\n`format` 和 `%` 都像模版，提前做好模版后面有需要时可以直接使用；\n\n而 `f` 就像在银行当中，柜员边问你边登记，不能提前做好模版。\n\n\n\n## 7. 字符串不可变性\n\n字符串是不可变的，不可以改变字符串中的任何元素，如需改变字符串中的元素，则需要新建一个字符串。\n\n```python\ns = \"hello bornforthis\"\ns[0] = \"a\"\n\n# ---output---\nTraceback (most recent call last):\n  File \"/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py\", line 2, in <module>\n    s[0] = \"a\"\nTypeError: 'str' object does not support item assignment\n```\n\n除了使用 replace 还可以使用字符串拼接：\n\n```python\ns = \"hello bornforthis\"\nnews = \"a\" + s[1:]\nprint(news)\n\n# ---output---\naello bornforthis\n```\n\n## 8. 字符串转义\n\n| 转义字符 | 含义                               | 例子                     |\n| -------- | ---------------------------------- | ------------------------ |\n| `\\\\`     | 反斜杠符号，为了在字符串中得到 `\\` | `s = \"bor\\\\nforthis\"`    |\n| `\\b`     | 退格，类似删除键                   | `s = \"bornff\\borthis\"`   |\n| `\\n`     | 换行                               | `s = \"bornfor\\nthis\"`    |\n| `\\t`     | 制表符                             | `s = \"born\\tfor\\tthis\"`  |\n| `r`      | 取消转义「R 和 r」都可以           | `s = r\"born\\tfor\\tthis\"` |\n\n示例代码：\n\n```python\ns = \"bor\\\\nforthis\"\nprint(s)\n\n# ---output---\nbor\\nforthis\n\n\ns = \"bornff\\borthis\"\nprint(s)\n\n# ---output---\nbornforthis\n\ns = \"bornfor\\nthis\"\nprint(s)\n\n# ---output---\nbornfor\nthis\n\n\n\ns = \"born\\tfor\\tthis\"\nprint(s)\n\n# ---output---\nborn    for    this\n```\n\n## 9. 字符串的连接\n\n```python\ns1 = 'born'\ns2 = 'forthis'\nprint(s1 + s2)  # 形成了一个字符串\nprint(s1, s2)  # 还是两个独立的字符串\n\n# ---output---\nbornforthis\nborn forthis\n\n\ns1 = '*-love-'\nprint(s1 * 10)\n\n# ---output---\n*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-\n```\n\n我想在上面的输出添加末尾加一个 `*` 怎么办呢？\n\n```python\n原本:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-\n目标:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*\n```\n\n**思考一下，如何实现。**\n\n```python\ns1 = '*-love-'\nprint(s1 * 10, end='*')\n```\n\n## 10. 读取用户输入\n\n### 10.1 input() 基本使用\n\n使用 `input()` 获取用户输入。\n\n```python\nuser_input = input()\nprint(user_input)\n\n# ---output---\nbornforthis\nbornforthis\n```\n\n### 10.2 input() 使用输入提示\n\n但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？\n\n![](./04-python-string/image-20231214174641525.png)\n\n如何解决？——使用输入提示。\n\n`input()` 函数里面支持我们写入字符串进行提示。\n\n```python\nuser_input = input('Enter your name:>>>')\nprint(\"user input name:\", user_input)\n\n# ---output---\nEnter your name:>>>bornforthis\nuser input name: bornforthis\n```\n\n![这样就很直观了](./04-python-string/image-20231214175112464.png)\n\n### 10.3 input() 的特点\n\n#### 10.3.1 input() 得到类型皆为字符串「str」\n\n```python\nIn [2]: type(input(':>>>'))  # 使用 type 检测 input 获取用户输入之后的数据类型\n:>>>bornforthis\nOut[2]: str\n\nIn [3]: type(input(':>>>'))\n:>>>12\nOut[3]: str\n\nIn [4]: type(input(':>>>'))\n:>>>12.1\nOut[4]: str\n\nIn [5]: type(input(':>>>'))\n:>>>(1, 2, 3, 4)\nOut[5]: str\n\nIn [6]: type(input(':>>>'))\n:>>>[1, 2, 3, 4]  \nOut[6]: str\n\nIn [7]: type(input(':>>>'))\n:>>>{1, 2, 3, 4, 5}\nOut[7]: str\n\nIn [8]: type(input(':>>>'))\n:>>>{'a': 19, 'b': 20}\nOut[8]: str\n\nIn [9]: type(input(':>>>'))\n:>>>True\nOut[9]: str\n```\n\n通过上面的代码示例，我们可以知道：通过 `input()` 获取用户输入，得到的数据类型都是**字符串**。\n\n得知 `input()` 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。\n\n#### 10.3.2 方法一：强制类型转换\n\n```python\nIn [10]: n = int(input(':>>>'))\n:>>>12\n\nIn [11]: type(n)\nOut[11]: int\n\nIn [12]: # 存在一些问题\n\nIn [13]: s = list(input(':>>>'))\n:>>>[1, 2, 3, 4, 5]\n\nIn [14]: s  # 把每一个字符拆开\nOut[14]: ['[', '1', ',', ' ', '2', ',', ' ', '3', ',', ' ', '4', ',', ' ', '5', ']']\n\nIn [15]: type(s)\nOut[15]: list\n\nIn [16]: b = bool(input(':>>>'))\n:>>>True\n\nIn [17]: b\nOut[17]: True\n\nIn [18]: type(b)\nOut[18]: bool\n```\n\n- 适合：数字「整数、浮点数」、字符串、布尔型\n- 不适合：列表、元组、字典、集合\n\n#### 10.3.3 方法二：使用 eval()\n\n1. `eval()` 的妙用\n\n```python\nIn [28]: s = eval(input(':>>>'))\n:>>>12\n\nIn [29]: type(s), s\nOut[29]: (int, 12)\n\nIn [30]: s = eval(input(':>>>'))\n:>>>[1, 2, 3]\n\nIn [31]: type(s), s\nOut[31]: (list, [1, 2, 3])\n\nIn [32]: s = eval(input(':>>>'))\n:>>>(1, 2, 3)\n\nIn [33]: type(s), s\nOut[33]: (tuple, (1, 2, 3))\n\nIn [34]: s = eval(input(':>>>'))\n:>>>{1, 2, 3}\n\nIn [35]: type(s), s\nOut[35]: (set, {1, 2, 3})\n\nIn [36]: s = eval(input(':>>>'))\n:>>>True\n\nIn [37]: type(s), s\nOut[37]: (bool, True)\n\nIn [38]: s = eval(input(':>>>'))\n:>>>{'a': 1, 'b': 2}\n\nIn [39]: type(s), s\nOut[39]: (dict, {'a': 1, 'b': 2})\n```\n\n2. `eval()` 伴随着的问题\n\n上面的代码看似解决了我们所遇到的问题，但是也伴随着我们需要注意的问题。\n\n```python\nIn [40]: s = eval(input(':>>>'))\n:>>>string \n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[40], line 1\n----> 1 s = eval(input(':>>>'))\n\nFile <string>:1\n\nNameError: name 'string' is not defined\n```\n\n稍微分析一下 `eval()` 的功能“大概”实现原因：\n\n- input 获取用户输入，得到字符串类型。\n\n```python\nIn [44]: s = input(':>>>')\n:>>>[1, 2, 3]\n\nIn [45]: s\nOut[45]: '[1, 2, 3]'\n```\n\n从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」\n\n所以，为什么会导致上面的报错呢？\n\n1. 获取用户输入：`s = eval(input(':>>>'))`\n2. 其中 input 会得到 `'string'`，而通过 `eval` 转换之后，就类似于 `string` 变量。但是我们实际上我们在我们之前的代码中，并没有创建 string 这个变量。\n3. 故而报错，当然没有通过上面的分析也可以大概预料到问题，因为报错很直观：`NameError: name 'string' is not defined` 。\n4. 所以，解决方法很直白：\n    1. 一种是你在获取用户输入之前直接提前创建一个叫做 string 的变量；「显然，不是我们想要的」\n    2. 另一种则是输入的时，有意加上单引号或者双引号、三引号。\n\n::: code-tabs\n\n@tab Code 1\n\n```python\nIn [50]: string = 'hello this string'\n\nIn [51]: s = eval(input(':>>>'))\n:>>>string\n\nIn [52]: s\nOut[52]: 'hello this string'\n\nIn [53]: num = 12\n\nIn [54]: s = eval(input(':>>>'))\n:>>>num\n\nIn [55]: type(s), s\nOut[55]: (int, 12)\n\nIn [56]: s = eval(input(':>>>'))\n:>>>'string'\n\nIn [57]: type(s), s\nOut[57]: (str, 'string')\n```\n\n@tab Code 2\n\n```python\nIn [56]: # Step 1: 探究 eval 的实现原理\n\nIn [57]: s = input(':>>>')\n:>>>[1, 2, 3]  \n\nIn [58]: s\nOut[58]: '[1, 2, 3]'\n\nIn [59]: s = eval(input(\":>>>\"))\n:>>>[1, 2, 3]\n\nIn [60]: s\nOut[60]: [1, 2, 3]\n\nIn [61]: # eval 大体是实现把字符串外面的引号去掉，实现变回原本的数据类型\n\nIn [62]: # Step 2: 探究报错原因\n\nIn [63]: s = input(':>>>')\n:>>>look\n\nIn [64]: s\nOut[64]: 'look'\n\nIn [65]: # 我们可以观察输出的是 'look'，如果直接去掉 look 左右的引号将变成：变量。但变量没有被定义，所以\n    ...: 会报错。\n\nIn [66]: s = eval(input(\":>>>\"))\n:>>>look\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[66], line 1\n----> 1 s = eval(input(\":>>>\"))\n\nFile <string>:1\n\nNameError: name 'look' is not defined\n\nIn [67]: # Step 3: 解决方法\n\nIn [68]: # 既然 eval 是直接去掉 look 外面的引号，导致变量不存在报错。所以我有两种解决方法：\n\nIn [69]: # 方法一：提前创建一个变量\n\nIn [70]: # 方法二：输入的时，有意加上单引号或者双引号、三引号\n\nIn [71]: look = '我提前创建一个 look 变量'  # 方法一\n\nIn [72]: s = eval(input(\":>>>\"))\n:>>>look\n\nIn [73]: s\nOut[73]: '我提前创建一个 look 变量'\n\nIn [74]: s = eval(input(\":>>>\"))  # 方法二：我提前加一个引号，input 也会给它一个引号，最后有两对引号，eval 拆掉一对引号，还剩一对引号。——成功得到字符串\n:>>>'look'\n\nIn [75]: s\nOut[75]: 'look'\n```\n\n:::\n\n3. `eval()` 小技巧\n\n任务要求：获取户输入，实现两位的加减乘除。\n\n```python\nIn [58]: eval(input(':>>>'))\n:>>>1 + 1\nOut[58]: 2  # eval(input(':>>>')) == eval('1 + 1') == 2\n\nIn [59]: eval(input(':>>>'))\n:>>>2 - 1\nOut[59]: 1  # eval(input(':>>>')) == eval('2 - 1') == 1\n\nIn [60]: eval(input(':>>>'))\n:>>>9 * 8\nOut[60]: 72  # eval(input(':>>>')) == eval('9 * 8') == 72\n\nIn [61]: eval(input(':>>>'))\n:>>>9 / 3\nOut[61]: 3.0\n```\n\n#### 10.3.4 浅谈 input 的设计理念\n\n在 Python 中，使用 `input()` 函数时，它会从标准输入（通常是键盘）读取一行文本，并且这一行文本会被当作字符串处理。这是因为用户输入的内容可能包括各种字符，包括数字、字母和符号。由于 `input()` 函数不能预知用户将要输入什么类型的数据，它默认将输入内容作为字符串返回，这样可以保持最大的灵活性和兼容性。\n\n如果你需要将这个字符串转换为其他数据类型，比如整数或浮点数，你可以使用相应的转换函数，例如 `int()` 或 `float()`，来进行转换。这里是一个简单的例子：\n\n```python\n# 使用 input() 获取用户输入，并存储为字符串\nuser_input = input(\"请输入一个数字: \")\n\n# 将字符串转换为整数\nnumber = int(user_input)\n\n# 打印转换后的整数\nprint(\"输入的整数是:\", number)\n```\n\n在这个例子中，如果用户输入的不是一个有效的整数，`int()` 函数会抛出一个 `ValueError`。因此，在实际使用中，通常需要加上错误处理来确保程序的健壮性。\n\n\n\n\n\n## 11. 小试牛刀\n\n获取用户连续输入的两个整数，得到两个整数的和。\n\n**要求：**\n\n- 只能使用一个 input 函数；\n- 用户输入格式：num1 num2\n- 输出计算结果；\n\n**输入：**\n\n```python\n5 6\n```\n\n**输出：**\n\n```python\n11\n```\n\n::: code-tabs\n\n@tab Code1\n\n```python\nnums = eval(input(':>>>').replace(' ', '+'))\nprint(nums)\n```\n\n@tab Code2\n\n```python\nnums = input(':>>>').split()\nsum = int(nums[0]) + int(nums[1])\nprint(sum)\n```\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"04-python-string","published":1,"updated":"2024-08-10T14:52:14.325Z","comments":1,"layout":"post","photos":[],"_id":"clzod40ha0009jp8n0g701onu","content":"<h2 id=\"1-字符串的定义\"><a href=\"#1-字符串的定义\" class=\"headerlink\" title=\"1. 字符串的定义\"></a>1. 字符串的定义</h2><p><strong>字符串是由字母、数字和特殊字符来组成的序列。</strong></p>\n<img src=\"/posts/fa256f4b/image-20231208131933540.png\" class=\"\" title=\"有序性\">\n\n<h2 id=\"2-创建字符串\"><a href=\"#2-创建字符串\" class=\"headerlink\" title=\"2. 创建字符串\"></a>2. 创建字符串</h2><p><strong>如何创建字符串？</strong></p>\n<p>——使用 **<span style=\"color:orange\">单引号、双引号</span>或者<span style=\"color:orange\">三引号</span>**。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;bornforthis&#x27;</span></span><br><span class=\"line\">number = <span class=\"string\">&quot;18&quot;</span></span><br><span class=\"line\">paragraph = <span class=\"string\">&#x27;&#x27;&#x27;Hello,Bornforthis!</span></span><br><span class=\"line\"><span class=\"string\">Hello,World!&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">paragraph_two = <span class=\"string\">&quot;&quot;&quot;Hello,Bornforthis!</span></span><br><span class=\"line\"><span class=\"string\">Hello,World!&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么 Python 同时支持三种创建字符串的方法？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&#x27;I am bornforthis.&#x27;</span>  <span class=\"comment\"># 在英文当中的常规表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br></pre></td></tr></table></figure>\n\n<p>但是英文当中可以缩写如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&#x27;I&#x27;</span>m bornforthis.<span class=\"string\">&#x27;  # 在英文当中也可以这样缩写</span></span><br><span class=\"line\"><span class=\"string\">print(string)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 输出</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;, line 15</span></span><br><span class=\"line\"><span class=\"string\">    string = &#x27;</span>I<span class=\"string\">&#x27;m bornforthis.&#x27;</span>  <span class=\"comment\"># 在英文当中也可以这样缩写</span></span><br><span class=\"line\">                ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n\n<p><strong>因为，开头是单引号，所以 Python 会寻找到下一个第一次出现的单引号进行匹配。而第一个单引号不在字符串的末尾，所以导致整个字符串异常。（没有完全包裹字符串全部内容）</strong></p>\n<p>如何解决上面描述的问题呢？——使用双引号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;I&#x27;m bornforthis.&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">I<span class=\"string\">&#x27;m bornforthis.</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有时候我们需要字符串里面有单引号或双引号，此时发挥作用： <strong><span style=\"color:orange\">单双引号混用，是第一个原因</span></strong></li>\n</ul>\n<p>那么三引号呢？</p>\n<p>假设我们现在需要存储如下文本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span><br><span class=\"line\"></span><br><span class=\"line\">浅者见浅，深者见深——黄家宝</span><br><span class=\"line\"></span><br><span class=\"line\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span><br><span class=\"line\"></span><br><span class=\"line\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span><br><span class=\"line\"></span><br><span class=\"line\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<p>放入字符串，我们如何在 Python 代码实现呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;</span>, line <span class=\"number\">15</span></span><br><span class=\"line\">    string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\">                                                     ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure>\n\n<p>常规的单引号、双引号是不支持多行文本，但是有一个方法可以间接实现看似多行文本，但实际是单行，在每一行的末尾添加  <code>\\</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<p>从上面的输出可知，每行结尾添加 <code>\\</code> 只能实现看起来换行，实际上还是一行。「就是：一行显示不完，换行显示而已，但是本身还是一行」</p>\n<p><img src=\"/./04-python-string/image-20231208133549593.png\"></p>\n<p>此时，我们使用三引号测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;&quot;&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;&quot;&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 </span><br><span class=\"line\"></span><br><span class=\"line\">浅者见浅，深者见深——黄家宝</span><br><span class=\"line\"></span><br><span class=\"line\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span><br><span class=\"line\"></span><br><span class=\"line\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span><br><span class=\"line\"></span><br><span class=\"line\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<p>可以从上面的输出可知，原本什么格式，输出就是什么格式。「原样输出」「三个单引号的效果和上面一样」</p>\n<ul>\n<li><strong><span style=\"color:orange\">三个单引号或者三个双引号，实现原样输出。</span></strong></li>\n<li><strong><span style=\"color:orange\">多行注释</span></strong></li>\n<li>**<span style=\"color:orange\">单双三引号混用</span>**（代码略）</li>\n</ul>\n<p><img src=\"/./04-python-string/image-20231208133942865.png\" alt=\"多行注释\"></p>\n<h2 id=\"3-字符串长度\"><a href=\"#3-字符串长度\" class=\"headerlink\" title=\"3. 字符串长度\"></a>3. 字符串长度</h2><p>如何获取一个字符串的长度呢？——使用 <code>len()</code></p>\n<p><strong><code>len()</code>: 返回字符串中字符长度或者字符数。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paragraph = <span class=\"string\">&quot;Hello,Bornforthis!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(paragraph))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用 len 获取字符串长度时，是从数字 1 开始数的。</p>\n<h2 id=\"4-字符串中的字符获取\"><a href=\"#4-字符串中的字符获取\" class=\"headerlink\" title=\"4. 字符串中的字符获取\"></a>4. 字符串中的字符获取</h2><h3 id=\"4-1-获取单个字符\"><a href=\"#4-1-获取单个字符\" class=\"headerlink\" title=\"4.1 获取单个字符\"></a>4.1 获取单个字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[position]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 b</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 f</span></span><br><span class=\"line\">select = string[<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># s 「使用三种方法实现」</span></span><br><span class=\"line\">select1 = string[<span class=\"number\">10</span>]</span><br><span class=\"line\">select2 = string[<span class=\"built_in\">len</span>(string) - <span class=\"number\">1</span>]</span><br><span class=\"line\">select3 = string[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select1, select2, select3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">b</span><br><span class=\"line\">f</span><br><span class=\"line\">s s s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-获取多个连续字符「子字符串」\"><a href=\"#4-2-获取多个连续字符「子字符串」\" class=\"headerlink\" title=\"4.2 获取多个连续字符「子字符串」\"></a>4.2 获取多个连续字符「子字符串」</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[start: end]</span></span><br><span class=\"line\"><span class=\"string\">PS: end 记得 +1</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 bor</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"number\">2</span>]  <span class=\"comment\"># bo</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># bor</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 for</span></span><br><span class=\"line\">select = string[<span class=\"number\">4</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this</span></span><br><span class=\"line\">select = string[<span class=\"number\">7</span>:<span class=\"number\">12</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">bor</span><br><span class=\"line\"><span class=\"keyword\">for</span></span><br><span class=\"line\">this</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-获取多个不连续的字符\"><a href=\"#4-3-获取多个不连续的字符\" class=\"headerlink\" title=\"4.3 获取多个不连续的字符\"></a>4.3 获取多个不连续的字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[start: end: sep]</span></span><br><span class=\"line\"><span class=\"string\">PS: end 记得 +1</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 02468</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"built_in\">len</span>(string):<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 13579</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>:<span class=\"built_in\">len</span>(string):<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 bnri</span></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>: <span class=\"built_in\">len</span>(string):<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 ofts</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>: <span class=\"built_in\">len</span>(string):<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">02468</span><br><span class=\"line\"><span class=\"number\">13579</span></span><br><span class=\"line\">bnri</span><br><span class=\"line\">ofts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-优化\"><a href=\"#4-4-优化\" class=\"headerlink\" title=\"4.4 优化\"></a>4.4 优化</h3><p>如果，我们要提取的字符是从开头到结尾，则我们可以省略开头和结尾，留空即可。</p>\n<p>所以上面 4.3 的代码可以等价如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[:: sep]</span></span><br><span class=\"line\"><span class=\"string\">PS: end 记得 +1</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 02468</span></span><br><span class=\"line\">select = string[::<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 13579</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>::<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 bnri</span></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[::<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 ofts</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>::<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">02468</span><br><span class=\"line\"><span class=\"number\">13579</span></span><br><span class=\"line\">bnri</span><br><span class=\"line\">ofts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-字符串倒序\"><a href=\"#4-5-字符串倒序\" class=\"headerlink\" title=\"4.5 字符串倒序\"></a>4.5 字符串倒序</h3><h4 id=\"4-5-1-实现\"><a href=\"#4-5-1-实现\" class=\"headerlink\" title=\"4.5.1 实现\"></a>4.5.1 实现</h4><p>字符串的第三个位置，控制的是字符提取的方向。默认为正数 1，如果我们改成 -1，则会变成反方向。</p>\n<p>::: warning</p>\n<p>正负控制方向，数字大小控制步长。</p>\n<p>:::</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">reverse = string[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reverse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">sihtrofnrob</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-2-存在的问题\"><a href=\"#4-5-2-存在的问题\" class=\"headerlink\" title=\"4.5.2 存在的问题\"></a>4.5.2 存在的问题</h4><p>::: info 思考🤔</p>\n<p>上面代码 <code>string[::-1]</code> 前两位省略了什么数字？尝试填写上去。</p>\n<p>:::</p>\n<p>你有可能是这么想的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># print(len(string))</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"number\">11</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># 无结果</span></span><br></pre></td></tr></table></figure>\n\n<p>想必你也发现了，没有得到结果也没有报错。</p>\n<p><strong>Why？</strong></p>\n<p><img src=\"/./04-python-string/image-20231208141259131.png\"></p>\n<p>由上面分析，我们应该如何解决？</p>\n<h4 id=\"4-5-3-解决方法\"><a href=\"#4-5-3-解决方法\" class=\"headerlink\" title=\"4.5.3 解决方法\"></a>4.5.3 解决方法</h4><h5 id=\"4-5-3-1-方法一：调换位置\"><a href=\"#4-5-3-1-方法一：调换位置\" class=\"headerlink\" title=\"4.5.3.1 方法一：调换位置\"></a>4.5.3.1 方法一：调换位置</h5><ul>\n<li>能否解决：可以</li>\n<li>存在什么问题？：少了一个字符</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[<span class=\"number\">11</span>:<span class=\"number\">0</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># sihtrofnro</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么少一个字符？</strong></p>\n<p>——存在一个悖论，因为结束🔚是 0，但是 <code>0 + 1</code> 时得到 1，而 1 是从左到右的第二个字符。故而 +1 是无法实现和解决了。</p>\n<p>但是，我们可以利用不写结尾，得到最后一个缺失的字符：<code>string[11::-1]</code> 。</p>\n<p>虽然解决，但是我们偏离了我的一开始的问题：<strong>前两位省略了什么数字？</strong>「因为，又回到了一开始省略的状态」</p>\n<h5 id=\"4-5-3-2-方法二：重写开始结尾\"><a href=\"#4-5-3-2-方法二：重写开始结尾\" class=\"headerlink\" title=\"4.5.3.2 方法二：重写开始结尾\"></a>4.5.3.2 方法二：重写开始结尾</h5><p><strong>想想字符串的有序性，从右到左。</strong></p>\n<p>为什么要纠结前面两个空的数字是多少？——为了之后得到某一部分的字符倒序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[-<span class=\"number\">1</span>:-<span class=\"number\">12</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># sihtrofnrob</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./04-python-string/image-20231211161559839.png\"></p>\n<p><strong>小试牛刀：</strong> 获取 <code>rofn</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[-<span class=\"number\">5</span>:-<span class=\"number\">9</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># rofn</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-字符串内置方法\"><a href=\"#5-字符串内置方法\" class=\"headerlink\" title=\"5. 字符串内置方法\"></a>5. 字符串内置方法</h2><h3 id=\"5-1-upper\"><a href=\"#5-1-upper\" class=\"headerlink\" title=\"5.1 .upper()\"></a>5.1 .upper()</h3><p>将字符串内容，全部转成大写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">upper_string = string.upper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(upper_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">BORNFORTHIS</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-lower\"><a href=\"#5-2-lower\" class=\"headerlink\" title=\"5.2 .lower()\"></a>5.2 .lower()</h3><p>将字符串的内容，全部转成小写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;BORNFORTHIS&quot;</span></span><br><span class=\"line\">lower_string = string.lower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lower_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-capitalize\"><a href=\"#5-3-capitalize\" class=\"headerlink\" title=\"5.3 .capitalize()\"></a>5.3 .capitalize()</h3><p>将字符串首字母，转换成大写。「只对第一个字母大写，其它后面的字符会变成小写」</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornForthis To Aiyc&quot;</span></span><br><span class=\"line\">capitalize_string = string.capitalize()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(capitalize_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis to aiyc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-title\"><a href=\"#5-4-title\" class=\"headerlink\" title=\"5.4 .title()\"></a>5.4 .title()</h3><p>将字符串中的每个单词的首字母，转换成大写，其余的字符都转换成小写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis to aiyc&quot;</span></span><br><span class=\"line\">title_string = string.title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(title_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis To Aiyc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis-to-aiyc&quot;</span>  <span class=\"comment\"># 不管是什么间隔，都会转换成首字母大写</span></span><br><span class=\"line\">title_string = string.title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(title_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis-To-Aiyc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforThis to aiYc&quot;</span>  <span class=\"comment\"># 其余的字符都转换成小写</span></span><br><span class=\"line\">title_string = string.title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(title_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis To Aiyc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-startswith\"><a href=\"#5-5-startswith\" class=\"headerlink\" title=\"5.5 .startswith()\"></a>5.5 .startswith()</h3><p>检测字符串是不是以特定字符或单词开头，返回布尔值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;bo&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;p&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;b1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6-endswith\"><a href=\"#5-6-endswith\" class=\"headerlink\" title=\"5.6 .endswith()\"></a>5.6 .endswith()</h3><p>检测字符串是不是以特定字符或单词结尾，返回布尔值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;s&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;is&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;i&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;s6&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7-count\"><a href=\"#5-7-count\" class=\"headerlink\" title=\"5.7 .count()\"></a>5.7 .count()</h3><p>计算特定字符或单词在目标字符串中存在的次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;or&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;ap&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-8-find\"><a href=\"#5-8-find\" class=\"headerlink\" title=\"5.8 .find()\"></a>5.8 .find()</h3><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。「也就是出现重复的，也只是返回第一次出现的下标」如果是查找单词，那么 <code>find()</code> 返回目标单词的第一个字符的下标。</p>\n<p>如果，查询的字符或单词不存在，则返回 <code>-1</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;for&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;aiyc&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-9-index\"><a href=\"#5-9-index\" class=\"headerlink\" title=\"5.9 .index()\"></a>5.9 .index()</h3><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 <code>index()</code> 返回目标单词的第一个字符的下标。</p>\n<p>如果，查询的字符或单词不存在，则<strong>报错</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class=\"number\">83</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    index_result = string.index(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">ValueError: substring <span class=\"keyword\">not</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;for&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;aiyc&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class=\"number\">83</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    index_result = string.index(<span class=\"string\">&#x27;aiyc&#x27;</span>)</span><br><span class=\"line\">ValueError: substring <span class=\"keyword\">not</span> found</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-10-isdigit\"><a href=\"#5-10-isdigit\" class=\"headerlink\" title=\"5.10 .isdigit()\"></a>5.10 .isdigit()</h3><p>判断字符串是不是纯数字字符串，字符串中但凡有一个字符是非数字，则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;12345678&quot;</span></span><br><span class=\"line\">isdigit_result = string.isdigit()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isdigit_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;123 45678&quot;</span></span><br><span class=\"line\">isdigit_result = string.isdigit()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isdigit_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-11-isalpha\"><a href=\"#5-11-isalpha\" class=\"headerlink\" title=\"5.11 .isalpha()\"></a>5.11 .isalpha()</h3><p>判断字符串是不是纯字母字符串，字符串中但凡有一个非字母的，则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">isalpha_result = string.isalpha()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isalpha_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;born forthis&quot;</span></span><br><span class=\"line\">isalpha_result = string.isalpha()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isalpha_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-12-isalnum\"><a href=\"#5-12-isalnum\" class=\"headerlink\" title=\"5.12 .isalnum()\"></a>5.12 .isalnum()</h3><p>判断字符串是不是纯数字、纯字母或纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;12345678&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis8888888888&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis 8888888888&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-13-isupper\"><a href=\"#5-13-isupper\" class=\"headerlink\" title=\"5.13 .isupper()\"></a>5.13 .isupper()</h3><p>判断字符串中的字母否全大写，全大写则返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;BORNFORTHIS&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;BORNFORTHIS12-、&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;BORNforthis&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-14-islower\"><a href=\"#5-14-islower\" class=\"headerlink\" title=\"5.14 .islower()\"></a>5.14 .islower()</h3><p>判断字符串中字母是不是全小写，全小写则返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis121-、&quot;</span></span><br><span class=\"line\">boolean = string.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthisA121-、&quot;</span></span><br><span class=\"line\">boolean = string.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-15-isspace\"><a href=\"#5-15-isspace\" class=\"headerlink\" title=\"5.15 .isspace()\"></a>5.15 .isspace()</h3><p>判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   &quot;</span></span><br><span class=\"line\">boolean = string.isspace()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">boolean = string.isspace()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.isspace()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-16-strip\"><a href=\"#5-16-strip\" class=\"headerlink\" title=\"5.16 .strip()\"></a>5.16 .strip()</h3><p>默认去掉目标字符串的前后空白字符，如果指定参数，则去掉指定字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">strip_string = string.strip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后空白字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">去掉前后空白字符后: bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;-----bornforthis-----&quot;</span></span><br><span class=\"line\">strip_string = string.strip(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后 &#x27;-&#x27; 字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: -----bornforthis-----</span><br><span class=\"line\">去掉前后 <span class=\"string\">&#x27;-&#x27;</span> 字符后: bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;--- --bornforthis-- ---&quot;</span></span><br><span class=\"line\">strip_string = string.strip(<span class=\"string\">&#x27;-&#x27;</span>)  <span class=\"comment\"># 只去掉连续的减号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后 &#x27;-&#x27; 字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: --- --bornforthis-- ---</span><br><span class=\"line\">去掉前后 <span class=\"string\">&#x27;-&#x27;</span> 字符后:  --bornforthis-- </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;--- --bornforthis-- ---&quot;</span>  <span class=\"comment\"># 如果想去掉减号和空格呢？</span></span><br><span class=\"line\">strip_string = string.strip(<span class=\"string\">&#x27;- &#x27;</span>)  <span class=\"comment\"># 填入要去掉的字符「不计较先后顺序」</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后 &#x27;- &#x27; 字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: --- --bornforthis-- ---</span><br><span class=\"line\">去掉前后 <span class=\"string\">&#x27;- &#x27;</span> 字符后: bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-17-lstrip\"><a href=\"#5-17-lstrip\" class=\"headerlink\" title=\"5.17 .lstrip()\"></a>5.17 .lstrip()</h3><p>默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">lstrip_string = string.lstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉左边空白字符后:&quot;</span>, lstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">去掉左边空白字符后: bornforthis   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;----bornforthis----&quot;</span></span><br><span class=\"line\">lstrip_string = string.lstrip(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉左边 &#x27;-&#x27; 后:&quot;</span>, lstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ----bornforthis----</span><br><span class=\"line\">去掉左边 <span class=\"string\">&#x27;-&#x27;</span> 后: bornforthis----</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;-- --bornforthis----&quot;</span></span><br><span class=\"line\">lstrip_string = string.lstrip(<span class=\"string\">&#x27;- &#x27;</span>)  <span class=\"comment\"># 不分先后顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉左边 &#x27;- &#x27; 后:&quot;</span>, lstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: -- --bornforthis----</span><br><span class=\"line\">去掉左边 <span class=\"string\">&#x27;- &#x27;</span> 后: bornforthis----</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-18-rstrip\"><a href=\"#5-18-rstrip\" class=\"headerlink\" title=\"5.18 .rstrip()\"></a>5.18 .rstrip()</h3><p>默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">rstrip_string = string.rstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉右边空白字符后:&quot;</span>, rstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">去掉右边空白字符后:    bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;----bornforthis----&quot;</span></span><br><span class=\"line\">rstrip_string = string.rstrip(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉右边 &#x27;-&#x27; 后:&quot;</span>, rstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ----bornforthis----</span><br><span class=\"line\">去掉右边 <span class=\"string\">&#x27;-&#x27;</span> 后: ----bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;----bornforthis-- --&quot;</span></span><br><span class=\"line\">rstrip_string = string.rstrip(<span class=\"string\">&#x27;- &#x27;</span>)  <span class=\"comment\"># 不分先后顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉右边 &#x27;- &#x27; 后:&quot;</span>, rstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ----bornforthis-- --</span><br><span class=\"line\">去掉右边 <span class=\"string\">&#x27;- &#x27;</span> 后: ----bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-19-replace\"><a href=\"#5-19-replace\" class=\"headerlink\" title=\"5.19 .replace()\"></a>5.19 .replace()</h3><p><code>.replace(old, new, count)</code> 第一个位置传入待替换的旧「old」字符，第二个位置传入要替换的新字符「new」，默认替换全部，count 控制替换次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">replace_string = string.replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)  <span class=\"comment\"># 把空白字符替换成 *</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换后:&quot;</span>, replace_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">替换后: ***bornforthis***</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-ai&quot;</span></span><br><span class=\"line\">replace_string = string.replace(<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>)  <span class=\"comment\"># 把 ai 替换成 love，默认全部替换</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换后:&quot;</span>, replace_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-ai</span><br><span class=\"line\">替换后: love-bornforthis-love</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-ai&quot;</span></span><br><span class=\"line\">replace_string = string.replace(<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>, <span class=\"number\">1</span>)  <span class=\"comment\"># 替换一次</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换后:&quot;</span>, replace_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-ai</span><br><span class=\"line\">替换后: love-bornforthis-ai</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-20-split\"><a href=\"#5-20-split\" class=\"headerlink\" title=\"5.20 .split()\"></a>5.20 .split()</h3><p><code>.split(sep, maxsplit)</code> 以特定字符进行分割，默认空格分割。如果传入参数「sep」，则以参数进行分割。返回分割后的列表。maxsplit 用于控制分割几次。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;ai bornforthis ai&quot;</span></span><br><span class=\"line\">split_string = string.split()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, split_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai bornforthis ai</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-ai&quot;</span></span><br><span class=\"line\">split_string = string.split(<span class=\"string\">&#x27;-&#x27;</span>)  <span class=\"comment\"># 以 - 好分割</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, split_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-ai</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-love&quot;</span></span><br><span class=\"line\">split_string = string.split(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, split_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-love</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis-love&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>::: warning</p>\n<p>注意⚠️：使用 spilt 分割时，不管每个字符之间有几个空格，都将会正常的分割出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;ai  bornforthis  ai    book&quot;</span></span><br><span class=\"line\">new_s = s.split()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;book&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>当我们指定 split 的间隔时，spilt 会严格按照我们指定的分割符号来分割。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;ai  bornforthis  ai    book&quot;</span></span><br><span class=\"line\">new_s = s.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;book&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面多输出的结果空字符串，就是证明。</p>\n<p>其实，在学习的过程当中，还是需要经常举一反三的。如果是其它连续字符会不会有这样情况呢？——答案是肯定的，也会有这样的情况。</p>\n<p>你可以自行分析和编写代码试一试～</p>\n<p>:::</p>\n<h3 id=\"5-21-rsplit\"><a href=\"#5-21-rsplit\" class=\"headerlink\" title=\"5.21 .rsplit()\"></a>5.21 .rsplit()</h3><p><code>.rsplit(sep, maxsplit)</code> 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-love&quot;</span></span><br><span class=\"line\">rsplit_string = string.rsplit(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, rsplit_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-love</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-love&quot;</span></span><br><span class=\"line\">rsplit_string = string.rsplit(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, rsplit_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-love</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai-bornforthis&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-22-join\"><a href=\"#5-22-join\" class=\"headerlink\" title=\"5.22 .join()\"></a>5.22 .join()</h3><p>以特定字符使字符串间隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">join_string = <span class=\"string\">&#x27;-&#x27;</span>.join(string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;拼接后:&quot;</span>, join_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: bornforthis</span><br><span class=\"line\">分割后: b-o-r-n-f-o-r-t-h-i-s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-字符串格式化\"><a href=\"#6-字符串格式化\" class=\"headerlink\" title=\"6. 字符串格式化\"></a>6. 字符串格式化</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi Bornforthis,Welcome to XiaMen.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to XiaMen.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。</li>\n<li>我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。</li>\n</ul>\n<p>当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;Bornforthis&quot;</span></span><br><span class=\"line\">region = <span class=\"string\">&quot;XiaMen&quot;</span></span><br><span class=\"line\">string1 = <span class=\"string\">&quot;Hi &quot;</span></span><br><span class=\"line\">string2 = <span class=\"string\">&quot;,Welcome to &quot;</span></span><br><span class=\"line\">string3 = <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">result = string1 + name + string2 + region + string3</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to XiaMen.</span><br></pre></td></tr></table></figure>\n\n<p>由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。</p>\n<p>而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is &quot;</span> + <span class=\"number\">190</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    string = <span class=\"string\">&quot;Money is &quot;</span> + <span class=\"number\">190</span></span><br><span class=\"line\">TypeError: can only concatenate <span class=\"built_in\">str</span> (<span class=\"keyword\">not</span> <span class=\"string\">&quot;int&quot;</span>) to <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is &quot;</span> + <span class=\"built_in\">str</span>(<span class=\"number\">190</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span></span><br></pre></td></tr></table></figure>\n\n<p>—— <strong>format</strong> 就应运而生了。</p>\n<h3 id=\"6-1-format\"><a href=\"#6-1-format\" class=\"headerlink\" title=\"6.1 .format()\"></a>6.1 .format()</h3><ol>\n<li>单个花括号 <code>&#123;&#125;</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to XiaMen.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;aiyuechuang&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to XiaMen.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to XiaMen.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;Bornforthis&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to XiaMen.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;AI悦创&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to XiaMen.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>一个花括号以上「按顺序填充」</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to &#123;&#125;.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;aiyuechuang&quot;</span>, <span class=\"string\">&quot;厦门&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to 厦门.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to &#123;&#125;.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;Bornforthis&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 上海.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;AI悦创&quot;</span>, <span class=\"string\">&quot;北京&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>多个花括号指定位置</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;1&#125;,Welcome to &#123;0&#125;.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;厦门&quot;</span>, <span class=\"string\">&quot;aiyuechuang&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to 厦门.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;1&#125;,Welcome to &#123;0&#125;.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;Bornforthis&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 上海.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;AI悦创&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>参数指定</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;name&#125;,Welcome to &#123;region&#125;.&quot;</span>.<span class=\"built_in\">format</span>(region=<span class=\"string\">&#x27;厦门&#x27;</span>, name=<span class=\"string\">&#x27;aiyuechuang&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to 厦门.</span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;name&#125;,Welcome to &#123;region&#125;.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;Bornforthis&quot;</span>, region=<span class=\"string\">&#x27;上海&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 上海.</span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(name=<span class=\"string\">&#x27;AI悦创&#x27;</span>, region=<span class=\"string\">&#x27;北京&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>保留指定小数位</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is &#123;:.3f&#125;.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">190</span>)  <span class=\"comment\"># .3f 保留三位小数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190.000</span>.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时，放入数字是不会报错了。</p>\n</blockquote>\n<h3 id=\"6-2-f\"><a href=\"#6-2-f\" class=\"headerlink\" title=\"6.2 f\"></a>6.2 f</h3><ol>\n<li>直接读取变量</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;Bornforthis&quot;</span></span><br><span class=\"line\">region = <span class=\"string\">&quot;厦门&quot;</span></span><br><span class=\"line\">string = <span class=\"string\">f&quot;Hi <span class=\"subst\">&#123;name&#125;</span>,Welcome to <span class=\"subst\">&#123;region&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 厦门.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>保留小数位</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">money = <span class=\"number\">190</span></span><br><span class=\"line\">string = <span class=\"string\">f&quot;Money is <span class=\"subst\">&#123;money:<span class=\"number\">.3</span>f&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190.000</span>.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-格式化\"><a href=\"#6-3-格式化\" class=\"headerlink\" title=\"6.3 % 格式化\"></a>6.3 % 格式化</h3><ul>\n<li><code>%d</code>: 整数</li>\n<li><code>%s</code>: 字符串</li>\n<li><code>%f</code>: 浮点数</li>\n</ul>\n<ol>\n<li>单个位置传入</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %d&quot;</span></span><br><span class=\"line\">new_s = string % <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % <span class=\"number\">19</span>)</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %d&quot;</span> % <span class=\"number\">190</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">new_string: Money <span class=\"keyword\">is</span> <span class=\"number\">13</span></span><br><span class=\"line\">直接放: Money <span class=\"keyword\">is</span> <span class=\"number\">19</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>多个位置传入</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span></span><br><span class=\"line\">new_s = string % (<span class=\"number\">13</span>, <span class=\"string\">&#x27;发大财&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % (<span class=\"number\">888</span>, <span class=\"string\">&#x27;暴富&#x27;</span>))</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span> % (<span class=\"number\">190</span>, <span class=\"string\">&quot;超有钱&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">13</span> 发大财</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">888</span> 暴富</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span> 超有钱</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span></span><br><span class=\"line\">new_s = string % (<span class=\"number\">13</span>, <span class=\"string\">&#x27;make a million&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % (<span class=\"number\">888</span>, <span class=\"string\">&#x27;sudden wealth&#x27;</span>))</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span> % (<span class=\"number\">190</span>, <span class=\"string\">&#x27;super rich&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">13</span> make a million</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">888</span> sudden wealth</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span> <span class=\"built_in\">super</span> rich</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>保留小数位</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %.3f&quot;</span></span><br><span class=\"line\">new_s = string % <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % <span class=\"number\">18</span>)</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %.3f&quot;</span> % <span class=\"number\">180</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">19.000</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">18.000</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">180.000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-f-和-format、-的优缺点\"><a href=\"#6-4-f-和-format、-的优缺点\" class=\"headerlink\" title=\"6.4 f 和 format、% 的优缺点\"></a>6.4 f 和 format、% 的优缺点</h3><p><code>format</code> 和 <code>%</code> 都像模版，提前做好模版后面有需要时可以直接使用；</p>\n<p>而 <code>f</code> 就像在银行当中，柜员边问你边登记，不能提前做好模版。</p>\n<h2 id=\"7-字符串不可变性\"><a href=\"#7-字符串不可变性\" class=\"headerlink\" title=\"7. 字符串不可变性\"></a>7. 字符串不可变性</h2><p>字符串是不可变的，不可以改变字符串中的任何元素，如需改变字符串中的元素，则需要新建一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;hello bornforthis&quot;</span></span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">TypeError: <span class=\"string\">&#x27;str&#x27;</span> <span class=\"built_in\">object</span> does <span class=\"keyword\">not</span> support item assignment</span><br></pre></td></tr></table></figure>\n\n<p>除了使用 replace 还可以使用字符串拼接：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;hello bornforthis&quot;</span></span><br><span class=\"line\">news = <span class=\"string\">&quot;a&quot;</span> + s[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(news)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">aello bornforthis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-字符串转义\"><a href=\"#8-字符串转义\" class=\"headerlink\" title=\"8. 字符串转义\"></a>8. 字符串转义</h2><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>含义</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\\\</code></td>\n<td>反斜杠符号，为了在字符串中得到 <code>\\</code></td>\n<td><code>s = &quot;bor\\\\nforthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格，类似删除键</td>\n<td><code>s = &quot;bornff\\borthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n<td><code>s = &quot;bornfor\\nthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n<td><code>s = &quot;born\\tfor\\tthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>r</code></td>\n<td>取消转义「R 和 r」都可以</td>\n<td><code>s = r&quot;born\\tfor\\tthis&quot;</code></td>\n</tr>\n</tbody></table>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;bor\\\\nforthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bor\\nforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">&quot;bornff\\borthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">&quot;bornfor\\nthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornfor</span><br><span class=\"line\">this</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">&quot;born\\tfor\\tthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">born    <span class=\"keyword\">for</span>    this</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-字符串的连接\"><a href=\"#9-字符串的连接\" class=\"headerlink\" title=\"9. 字符串的连接\"></a>9. 字符串的连接</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 = <span class=\"string\">&#x27;born&#x27;</span></span><br><span class=\"line\">s2 = <span class=\"string\">&#x27;forthis&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 + s2)  <span class=\"comment\"># 形成了一个字符串</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1, s2)  <span class=\"comment\"># 还是两个独立的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br><span class=\"line\">born forthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = <span class=\"string\">&#x27;*-love-&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-</span><br></pre></td></tr></table></figure>\n\n<p>我想在上面的输出添加末尾加一个 <code>*</code> 怎么办呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原本:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-</span><br><span class=\"line\">目标:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*</span><br></pre></td></tr></table></figure>\n\n<p><strong>思考一下，如何实现。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 = <span class=\"string\">&#x27;*-love-&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 * <span class=\"number\">10</span>, end=<span class=\"string\">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-读取用户输入\"><a href=\"#10-读取用户输入\" class=\"headerlink\" title=\"10. 读取用户输入\"></a>10. 读取用户输入</h2><h3 id=\"10-1-input-基本使用\"><a href=\"#10-1-input-基本使用\" class=\"headerlink\" title=\"10.1 input() 基本使用\"></a>10.1 input() 基本使用</h3><p>使用 <code>input()</code> 获取用户输入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_input = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(user_input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br><span class=\"line\">bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-input-使用输入提示\"><a href=\"#10-2-input-使用输入提示\" class=\"headerlink\" title=\"10.2 input() 使用输入提示\"></a>10.2 input() 使用输入提示</h3><p>但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？</p>\n<p><img src=\"/./04-python-string/image-20231214174641525.png\"></p>\n<p>如何解决？——使用输入提示。</p>\n<p><code>input()</code> 函数里面支持我们写入字符串进行提示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_input = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Enter your name:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;user input name:&quot;</span>, user_input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Enter your name:&gt;&gt;&gt;bornforthis</span><br><span class=\"line\">user <span class=\"built_in\">input</span> name: bornforthis</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./04-python-string/image-20231214175112464.png\" alt=\"这样就很直观了\"></p>\n<h3 id=\"10-3-input-的特点\"><a href=\"#10-3-input-的特点\" class=\"headerlink\" title=\"10.3 input() 的特点\"></a>10.3 input() 的特点</h3><h4 id=\"10-3-1-input-得到类型皆为字符串「str」\"><a href=\"#10-3-1-input-得到类型皆为字符串「str」\" class=\"headerlink\" title=\"10.3.1 input() 得到类型皆为字符串「str」\"></a>10.3.1 input() 得到类型皆为字符串「str」</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">2</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))  <span class=\"comment\"># 使用 type 检测 input 获取用户输入之后的数据类型</span></span><br><span class=\"line\">:&gt;&gt;&gt;bornforthis</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">3</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12</span></span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12.1</span></span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">6</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]  </span><br><span class=\"line\">Out[<span class=\"number\">6</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">7</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">Out[<span class=\"number\">7</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">8</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">19</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">Out[<span class=\"number\">8</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">9</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"literal\">True</span></span><br><span class=\"line\">Out[<span class=\"number\">9</span>]: <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的代码示例，我们可以知道：通过 <code>input()</code> 获取用户输入，得到的数据类型都是<strong>字符串</strong>。</p>\n<p>得知 <code>input()</code> 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。</p>\n<h4 id=\"10-3-2-方法一：强制类型转换\"><a href=\"#10-3-2-方法一：强制类型转换\" class=\"headerlink\" title=\"10.3.2 方法一：强制类型转换\"></a>10.3.2 方法一：强制类型转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">10</span>]: n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">11</span>]: <span class=\"built_in\">type</span>(n)</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: <span class=\"built_in\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: <span class=\"comment\"># 存在一些问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">13</span>]: s = <span class=\"built_in\">list</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">14</span>]: s  <span class=\"comment\"># 把每一个字符拆开</span></span><br><span class=\"line\">Out[<span class=\"number\">14</span>]: [<span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;]&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">15</span>]: <span class=\"built_in\">type</span>(s)</span><br><span class=\"line\">Out[<span class=\"number\">15</span>]: <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">16</span>]: b = <span class=\"built_in\">bool</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">17</span>]: b</span><br><span class=\"line\">Out[<span class=\"number\">17</span>]: <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">18</span>]: <span class=\"built_in\">type</span>(b)</span><br><span class=\"line\">Out[<span class=\"number\">18</span>]: <span class=\"built_in\">bool</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>适合：数字「整数、浮点数」、字符串、布尔型</li>\n<li>不适合：列表、元组、字典、集合</li>\n</ul>\n<h4 id=\"10-3-3-方法二：使用-eval\"><a href=\"#10-3-3-方法二：使用-eval\" class=\"headerlink\" title=\"10.3.3 方法二：使用 eval()\"></a>10.3.3 方法二：使用 eval()</h4><ol>\n<li><code>eval()</code> 的妙用</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">28</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">29</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">29</span>]: (<span class=\"built_in\">int</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">30</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">31</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">31</span>]: (<span class=\"built_in\">list</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">32</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">33</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">33</span>]: (<span class=\"built_in\">tuple</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">34</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">35</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">35</span>]: (<span class=\"built_in\">set</span>, &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">36</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">37</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">37</span>]: (<span class=\"built_in\">bool</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">38</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">39</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">39</span>]: (<span class=\"built_in\">dict</span>, &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>eval()</code> 伴随着的问题</li>\n</ol>\n<p>上面的代码看似解决了我们所遇到的问题，但是也伴随着我们需要注意的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">40</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;string </span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">NameError                                 Traceback (most recent call last)</span><br><span class=\"line\">Cell In[<span class=\"number\">40</span>], line <span class=\"number\">1</span></span><br><span class=\"line\">----&gt; <span class=\"number\">1</span> s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">File &lt;string&gt;:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;string&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n\n<p>稍微分析一下 <code>eval()</code> 的功能“大概”实现原因：</p>\n<ul>\n<li>input 获取用户输入，得到字符串类型。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">44</span>]: s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">45</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">45</span>]: <span class=\"string\">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」</p>\n<p>所以，为什么会导致上面的报错呢？</p>\n<ol>\n<li>获取用户输入：<code>s = eval(input(&#39;:&gt;&gt;&gt;&#39;))</code></li>\n<li>其中 input 会得到 <code>&#39;string&#39;</code>，而通过 <code>eval</code> 转换之后，就类似于 <code>string</code> 变量。但是我们实际上我们在我们之前的代码中，并没有创建 string 这个变量。</li>\n<li>故而报错，当然没有通过上面的分析也可以大概预料到问题，因为报错很直观：<code>NameError: name &#39;string&#39; is not defined</code> 。</li>\n<li>所以，解决方法很直白：<ol>\n<li>一种是你在获取用户输入之前直接提前创建一个叫做 string 的变量；「显然，不是我们想要的」</li>\n<li>另一种则是输入的时，有意加上单引号或者双引号、三引号。</li>\n</ol>\n</li>\n</ol>\n<p>::: code-tabs</p>\n<p>@tab Code 1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">50</span>]: string = <span class=\"string\">&#x27;hello this string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;string</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">52</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">52</span>]: <span class=\"string\">&#x27;hello this string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">53</span>]: num = <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">54</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;num</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">55</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">55</span>]: (<span class=\"built_in\">int</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">56</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">57</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">57</span>]: (<span class=\"built_in\">str</span>, <span class=\"string\">&#x27;string&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>@tab Code 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">56</span>]: <span class=\"comment\"># Step 1: 探究 eval 的实现原理</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">57</span>]: s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">58</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">58</span>]: <span class=\"string\">&#x27;[1, 2, 3]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">59</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: <span class=\"comment\"># eval 大体是实现把字符串外面的引号去掉，实现变回原本的数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: <span class=\"comment\"># Step 2: 探究报错原因</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">63</span>]: s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\">:&gt;&gt;&gt;look</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">64</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">64</span>]: <span class=\"string\">&#x27;look&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">65</span>]: <span class=\"comment\"># 我们可以观察输出的是 &#x27;look&#x27;，如果直接去掉 look 左右的引号将变成：变量。但变量没有被定义，所以</span></span><br><span class=\"line\">    ...: 会报错。</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;look</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">NameError                                 Traceback (most recent call last)</span><br><span class=\"line\">Cell In[<span class=\"number\">66</span>], line <span class=\"number\">1</span></span><br><span class=\"line\">----&gt; <span class=\"number\">1</span> s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">File &lt;string&gt;:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;look&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: <span class=\"comment\"># Step 3: 解决方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">68</span>]: <span class=\"comment\"># 既然 eval 是直接去掉 look 外面的引号，导致变量不存在报错。所以我有两种解决方法：</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">69</span>]: <span class=\"comment\"># 方法一：提前创建一个变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">70</span>]: <span class=\"comment\"># 方法二：输入的时，有意加上单引号或者双引号、三引号</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: look = <span class=\"string\">&#x27;我提前创建一个 look 变量&#x27;</span>  <span class=\"comment\"># 方法一</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">72</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;look</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">73</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">73</span>]: <span class=\"string\">&#x27;我提前创建一个 look 变量&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">74</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))  <span class=\"comment\"># 方法二：我提前加一个引号，input 也会给它一个引号，最后有两对引号，eval 拆掉一对引号，还剩一对引号。——成功得到字符串</span></span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"string\">&#x27;look&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">75</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">75</span>]: <span class=\"string\">&#x27;look&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>:::</p>\n<ol start=\"3\">\n<li><code>eval()</code> 小技巧</li>\n</ol>\n<p>任务要求：获取户输入，实现两位的加减乘除。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">58</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\">Out[<span class=\"number\">58</span>]: <span class=\"number\">2</span>  <span class=\"comment\"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;1 + 1&#x27;) == 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">59</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">2</span> - <span class=\"number\">1</span></span><br><span class=\"line\">Out[<span class=\"number\">59</span>]: <span class=\"number\">1</span>  <span class=\"comment\"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;2 - 1&#x27;) == 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">60</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">9</span> * <span class=\"number\">8</span></span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"number\">72</span>  <span class=\"comment\"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;9 * 8&#x27;) == 72</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">9</span> / <span class=\"number\">3</span></span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-3-4-浅谈-input-的设计理念\"><a href=\"#10-3-4-浅谈-input-的设计理念\" class=\"headerlink\" title=\"10.3.4 浅谈 input 的设计理念\"></a>10.3.4 浅谈 input 的设计理念</h4><p>在 Python 中，使用 <code>input()</code> 函数时，它会从标准输入（通常是键盘）读取一行文本，并且这一行文本会被当作字符串处理。这是因为用户输入的内容可能包括各种字符，包括数字、字母和符号。由于 <code>input()</code> 函数不能预知用户将要输入什么类型的数据，它默认将输入内容作为字符串返回，这样可以保持最大的灵活性和兼容性。</p>\n<p>如果你需要将这个字符串转换为其他数据类型，比如整数或浮点数，你可以使用相应的转换函数，例如 <code>int()</code> 或 <code>float()</code>，来进行转换。这里是一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 input() 获取用户输入，并存储为字符串</span></span><br><span class=\"line\">user_input = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个数字: &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字符串转换为整数</span></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(user_input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印转换后的整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入的整数是:&quot;</span>, number)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，如果用户输入的不是一个有效的整数，<code>int()</code> 函数会抛出一个 <code>ValueError</code>。因此，在实际使用中，通常需要加上错误处理来确保程序的健壮性。</p>\n<h2 id=\"11-小试牛刀\"><a href=\"#11-小试牛刀\" class=\"headerlink\" title=\"11. 小试牛刀\"></a>11. 小试牛刀</h2><p>获取用户连续输入的两个整数，得到两个整数的和。</p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>只能使用一个 input 函数；</li>\n<li>用户输入格式：num1 num2</li>\n<li>输出计算结果；</li>\n</ul>\n<p><strong>输入：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p>::: code-tabs</p>\n<p>@tab Code1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>).replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nums)</span><br></pre></td></tr></table></figure>\n\n<p>@tab Code2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>).split()</span><br><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"built_in\">int</span>(nums[<span class=\"number\">0</span>]) + <span class=\"built_in\">int</span>(nums[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure>\n\n<p>:::</p>\n","cover":"/img/album/bg.webp","cover_type":"img","excerpt":"","more":"<h2 id=\"1-字符串的定义\"><a href=\"#1-字符串的定义\" class=\"headerlink\" title=\"1. 字符串的定义\"></a>1. 字符串的定义</h2><p><strong>字符串是由字母、数字和特殊字符来组成的序列。</strong></p>\n<img src=\"/posts/fa256f4b/image-20231208131933540.png\" class=\"\" title=\"有序性\">\n\n<h2 id=\"2-创建字符串\"><a href=\"#2-创建字符串\" class=\"headerlink\" title=\"2. 创建字符串\"></a>2. 创建字符串</h2><p><strong>如何创建字符串？</strong></p>\n<p>——使用 **<span style=\"color:orange\">单引号、双引号</span>或者<span style=\"color:orange\">三引号</span>**。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&#x27;bornforthis&#x27;</span></span><br><span class=\"line\">number = <span class=\"string\">&quot;18&quot;</span></span><br><span class=\"line\">paragraph = <span class=\"string\">&#x27;&#x27;&#x27;Hello,Bornforthis!</span></span><br><span class=\"line\"><span class=\"string\">Hello,World!&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">paragraph_two = <span class=\"string\">&quot;&quot;&quot;Hello,Bornforthis!</span></span><br><span class=\"line\"><span class=\"string\">Hello,World!&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么 Python 同时支持三种创建字符串的方法？</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&#x27;I am bornforthis.&#x27;</span>  <span class=\"comment\"># 在英文当中的常规表达式</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br></pre></td></tr></table></figure>\n\n<p>但是英文当中可以缩写如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&#x27;I&#x27;</span>m bornforthis.<span class=\"string\">&#x27;  # 在英文当中也可以这样缩写</span></span><br><span class=\"line\"><span class=\"string\">print(string)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 输出</span></span><br><span class=\"line\"><span class=\"string\">  File &quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;, line 15</span></span><br><span class=\"line\"><span class=\"string\">    string = &#x27;</span>I<span class=\"string\">&#x27;m bornforthis.&#x27;</span>  <span class=\"comment\"># 在英文当中也可以这样缩写</span></span><br><span class=\"line\">                ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n\n<p><strong>因为，开头是单引号，所以 Python 会寻找到下一个第一次出现的单引号进行匹配。而第一个单引号不在字符串的末尾，所以导致整个字符串异常。（没有完全包裹字符串全部内容）</strong></p>\n<p>如何解决上面描述的问题呢？——使用双引号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;I&#x27;m bornforthis.&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">I<span class=\"string\">&#x27;m bornforthis.</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>有时候我们需要字符串里面有单引号或双引号，此时发挥作用： <strong><span style=\"color:orange\">单双引号混用，是第一个原因</span></strong></li>\n</ul>\n<p>那么三引号呢？</p>\n<p>假设我们现在需要存储如下文本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span><br><span class=\"line\"></span><br><span class=\"line\">浅者见浅，深者见深——黄家宝</span><br><span class=\"line\"></span><br><span class=\"line\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span><br><span class=\"line\"></span><br><span class=\"line\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span><br><span class=\"line\"></span><br><span class=\"line\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<p>放入字符串，我们如何在 Python 代码实现呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;</span>, line <span class=\"number\">15</span></span><br><span class=\"line\">    string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\">                                                     ^</span></span><br><span class=\"line\"><span class=\"string\">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure>\n\n<p>常规的单引号、双引号是不支持多行文本，但是有一个方法可以间接实现看似多行文本，但实际是单行，在每一行的末尾添加  <code>\\</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创\\</span></span><br><span class=\"line\"><span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<p>从上面的输出可知，每行结尾添加 <code>\\</code> 只能实现看起来换行，实际上还是一行。「就是：一行显示不完，换行显示而已，但是本身还是一行」</p>\n<p><img src=\"/./04-python-string/image-20231208133549593.png\"></p>\n<p>此时，我们使用三引号测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;&quot;&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">浅者见浅，深者见深——黄家宝</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;&quot;&quot;</span>  <span class=\"comment\"># 外面使用双引号进行包裹即可</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 </span><br><span class=\"line\"></span><br><span class=\"line\">浅者见浅，深者见深——黄家宝</span><br><span class=\"line\"></span><br><span class=\"line\">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span><br><span class=\"line\"></span><br><span class=\"line\">先实现功能，再去优化，否则一切会很乱。——AI悦创</span><br><span class=\"line\"></span><br><span class=\"line\">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure>\n\n<p>可以从上面的输出可知，原本什么格式，输出就是什么格式。「原样输出」「三个单引号的效果和上面一样」</p>\n<ul>\n<li><strong><span style=\"color:orange\">三个单引号或者三个双引号，实现原样输出。</span></strong></li>\n<li><strong><span style=\"color:orange\">多行注释</span></strong></li>\n<li>**<span style=\"color:orange\">单双三引号混用</span>**（代码略）</li>\n</ul>\n<p><img src=\"/./04-python-string/image-20231208133942865.png\" alt=\"多行注释\"></p>\n<h2 id=\"3-字符串长度\"><a href=\"#3-字符串长度\" class=\"headerlink\" title=\"3. 字符串长度\"></a>3. 字符串长度</h2><p>如何获取一个字符串的长度呢？——使用 <code>len()</code></p>\n<p><strong><code>len()</code>: 返回字符串中字符长度或者字符数。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paragraph = <span class=\"string\">&quot;Hello,Bornforthis!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(paragraph))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用 len 获取字符串长度时，是从数字 1 开始数的。</p>\n<h2 id=\"4-字符串中的字符获取\"><a href=\"#4-字符串中的字符获取\" class=\"headerlink\" title=\"4. 字符串中的字符获取\"></a>4. 字符串中的字符获取</h2><h3 id=\"4-1-获取单个字符\"><a href=\"#4-1-获取单个字符\" class=\"headerlink\" title=\"4.1 获取单个字符\"></a>4.1 获取单个字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[position]</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 b</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 f</span></span><br><span class=\"line\">select = string[<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># s 「使用三种方法实现」</span></span><br><span class=\"line\">select1 = string[<span class=\"number\">10</span>]</span><br><span class=\"line\">select2 = string[<span class=\"built_in\">len</span>(string) - <span class=\"number\">1</span>]</span><br><span class=\"line\">select3 = string[-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select1, select2, select3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">b</span><br><span class=\"line\">f</span><br><span class=\"line\">s s s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-获取多个连续字符「子字符串」\"><a href=\"#4-2-获取多个连续字符「子字符串」\" class=\"headerlink\" title=\"4.2 获取多个连续字符「子字符串」\"></a>4.2 获取多个连续字符「子字符串」</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[start: end]</span></span><br><span class=\"line\"><span class=\"string\">PS: end 记得 +1</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 bor</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"number\">2</span>]  <span class=\"comment\"># bo</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"number\">3</span>]  <span class=\"comment\"># bor</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 for</span></span><br><span class=\"line\">select = string[<span class=\"number\">4</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this</span></span><br><span class=\"line\">select = string[<span class=\"number\">7</span>:<span class=\"number\">12</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">bor</span><br><span class=\"line\"><span class=\"keyword\">for</span></span><br><span class=\"line\">this</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-获取多个不连续的字符\"><a href=\"#4-3-获取多个不连续的字符\" class=\"headerlink\" title=\"4.3 获取多个不连续的字符\"></a>4.3 获取多个不连续的字符</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[start: end: sep]</span></span><br><span class=\"line\"><span class=\"string\">PS: end 记得 +1</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 02468</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"built_in\">len</span>(string):<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 13579</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>:<span class=\"built_in\">len</span>(string):<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 bnri</span></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>: <span class=\"built_in\">len</span>(string):<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 ofts</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>: <span class=\"built_in\">len</span>(string):<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">02468</span><br><span class=\"line\"><span class=\"number\">13579</span></span><br><span class=\"line\">bnri</span><br><span class=\"line\">ofts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-优化\"><a href=\"#4-4-优化\" class=\"headerlink\" title=\"4.4 优化\"></a>4.4 优化</h3><p>如果，我们要提取的字符是从开头到结尾，则我们可以省略开头和结尾，留空即可。</p>\n<p>所以上面 4.3 的代码可以等价如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">语法: string = &quot;0123456789&quot;</span></span><br><span class=\"line\"><span class=\"string\">select = string[:: sep]</span></span><br><span class=\"line\"><span class=\"string\">PS: end 记得 +1</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 获取字符 02468</span></span><br><span class=\"line\">select = string[::<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 13579</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>::<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 bnri</span></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[::<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 ofts</span></span><br><span class=\"line\">select = string[<span class=\"number\">1</span>::<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">02468</span><br><span class=\"line\"><span class=\"number\">13579</span></span><br><span class=\"line\">bnri</span><br><span class=\"line\">ofts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-字符串倒序\"><a href=\"#4-5-字符串倒序\" class=\"headerlink\" title=\"4.5 字符串倒序\"></a>4.5 字符串倒序</h3><h4 id=\"4-5-1-实现\"><a href=\"#4-5-1-实现\" class=\"headerlink\" title=\"4.5.1 实现\"></a>4.5.1 实现</h4><p>字符串的第三个位置，控制的是字符提取的方向。默认为正数 1，如果我们改成 -1，则会变成反方向。</p>\n<p>::: warning</p>\n<p>正负控制方向，数字大小控制步长。</p>\n<p>:::</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">reverse = string[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(reverse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">sihtrofnrob</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-2-存在的问题\"><a href=\"#4-5-2-存在的问题\" class=\"headerlink\" title=\"4.5.2 存在的问题\"></a>4.5.2 存在的问题</h4><p>::: info 思考🤔</p>\n<p>上面代码 <code>string[::-1]</code> 前两位省略了什么数字？尝试填写上去。</p>\n<p>:::</p>\n<p>你有可能是这么想的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># print(len(string))</span></span><br><span class=\"line\">select = string[<span class=\"number\">0</span>:<span class=\"number\">11</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># 无结果</span></span><br></pre></td></tr></table></figure>\n\n<p>想必你也发现了，没有得到结果也没有报错。</p>\n<p><strong>Why？</strong></p>\n<p><img src=\"/./04-python-string/image-20231208141259131.png\"></p>\n<p>由上面分析，我们应该如何解决？</p>\n<h4 id=\"4-5-3-解决方法\"><a href=\"#4-5-3-解决方法\" class=\"headerlink\" title=\"4.5.3 解决方法\"></a>4.5.3 解决方法</h4><h5 id=\"4-5-3-1-方法一：调换位置\"><a href=\"#4-5-3-1-方法一：调换位置\" class=\"headerlink\" title=\"4.5.3.1 方法一：调换位置\"></a>4.5.3.1 方法一：调换位置</h5><ul>\n<li>能否解决：可以</li>\n<li>存在什么问题？：少了一个字符</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[<span class=\"number\">11</span>:<span class=\"number\">0</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># sihtrofnro</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么少一个字符？</strong></p>\n<p>——存在一个悖论，因为结束🔚是 0，但是 <code>0 + 1</code> 时得到 1，而 1 是从左到右的第二个字符。故而 +1 是无法实现和解决了。</p>\n<p>但是，我们可以利用不写结尾，得到最后一个缺失的字符：<code>string[11::-1]</code> 。</p>\n<p>虽然解决，但是我们偏离了我的一开始的问题：<strong>前两位省略了什么数字？</strong>「因为，又回到了一开始省略的状态」</p>\n<h5 id=\"4-5-3-2-方法二：重写开始结尾\"><a href=\"#4-5-3-2-方法二：重写开始结尾\" class=\"headerlink\" title=\"4.5.3.2 方法二：重写开始结尾\"></a>4.5.3.2 方法二：重写开始结尾</h5><p><strong>想想字符串的有序性，从右到左。</strong></p>\n<p>为什么要纠结前面两个空的数字是多少？——为了之后得到某一部分的字符倒序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[-<span class=\"number\">1</span>:-<span class=\"number\">12</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># sihtrofnrob</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./04-python-string/image-20231211161559839.png\"></p>\n<p><strong>小试牛刀：</strong> 获取 <code>rofn</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">select = string[-<span class=\"number\">5</span>:-<span class=\"number\">9</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(select)  <span class=\"comment\"># rofn</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-字符串内置方法\"><a href=\"#5-字符串内置方法\" class=\"headerlink\" title=\"5. 字符串内置方法\"></a>5. 字符串内置方法</h2><h3 id=\"5-1-upper\"><a href=\"#5-1-upper\" class=\"headerlink\" title=\"5.1 .upper()\"></a>5.1 .upper()</h3><p>将字符串内容，全部转成大写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">upper_string = string.upper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(upper_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">BORNFORTHIS</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-lower\"><a href=\"#5-2-lower\" class=\"headerlink\" title=\"5.2 .lower()\"></a>5.2 .lower()</h3><p>将字符串的内容，全部转成小写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;BORNFORTHIS&quot;</span></span><br><span class=\"line\">lower_string = string.lower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lower_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-capitalize\"><a href=\"#5-3-capitalize\" class=\"headerlink\" title=\"5.3 .capitalize()\"></a>5.3 .capitalize()</h3><p>将字符串首字母，转换成大写。「只对第一个字母大写，其它后面的字符会变成小写」</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornForthis To Aiyc&quot;</span></span><br><span class=\"line\">capitalize_string = string.capitalize()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(capitalize_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis to aiyc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-title\"><a href=\"#5-4-title\" class=\"headerlink\" title=\"5.4 .title()\"></a>5.4 .title()</h3><p>将字符串中的每个单词的首字母，转换成大写，其余的字符都转换成小写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis to aiyc&quot;</span></span><br><span class=\"line\">title_string = string.title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(title_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis To Aiyc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis-to-aiyc&quot;</span>  <span class=\"comment\"># 不管是什么间隔，都会转换成首字母大写</span></span><br><span class=\"line\">title_string = string.title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(title_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis-To-Aiyc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforThis to aiYc&quot;</span>  <span class=\"comment\"># 其余的字符都转换成小写</span></span><br><span class=\"line\">title_string = string.title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(title_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Bornforthis To Aiyc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-5-startswith\"><a href=\"#5-5-startswith\" class=\"headerlink\" title=\"5.5 .startswith()\"></a>5.5 .startswith()</h3><p>检测字符串是不是以特定字符或单词开头，返回布尔值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;b&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;bo&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;p&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">startswith_string = string.startswith(<span class=\"string\">&quot;b1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(startswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-6-endswith\"><a href=\"#5-6-endswith\" class=\"headerlink\" title=\"5.6 .endswith()\"></a>5.6 .endswith()</h3><p>检测字符串是不是以特定字符或单词结尾，返回布尔值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;s&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;is&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;i&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">endswith_string = string.endswith(<span class=\"string\">&quot;s6&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(endswith_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7-count\"><a href=\"#5-7-count\" class=\"headerlink\" title=\"5.7 .count()\"></a>5.7 .count()</h3><p>计算特定字符或单词在目标字符串中存在的次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;or&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">count_string = string.count(<span class=\"string\">&#x27;ap&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-8-find\"><a href=\"#5-8-find\" class=\"headerlink\" title=\"5.8 .find()\"></a>5.8 .find()</h3><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。「也就是出现重复的，也只是返回第一次出现的下标」如果是查找单词，那么 <code>find()</code> 返回目标单词的第一个字符的下标。</p>\n<p>如果，查询的字符或单词不存在，则返回 <code>-1</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;for&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">find_string = string.find(<span class=\"string\">&#x27;aiyc&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(find_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-9-index\"><a href=\"#5-9-index\" class=\"headerlink\" title=\"5.9 .index()\"></a>5.9 .index()</h3><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 <code>index()</code> 返回目标单词的第一个字符的下标。</p>\n<p>如果，查询的字符或单词不存在，则<strong>报错</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class=\"number\">83</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    index_result = string.index(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">ValueError: substring <span class=\"keyword\">not</span> found</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;for&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">index_result = string.index(<span class=\"string\">&#x27;aiyc&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(index_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class=\"number\">83</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    index_result = string.index(<span class=\"string\">&#x27;aiyc&#x27;</span>)</span><br><span class=\"line\">ValueError: substring <span class=\"keyword\">not</span> found</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-10-isdigit\"><a href=\"#5-10-isdigit\" class=\"headerlink\" title=\"5.10 .isdigit()\"></a>5.10 .isdigit()</h3><p>判断字符串是不是纯数字字符串，字符串中但凡有一个字符是非数字，则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;12345678&quot;</span></span><br><span class=\"line\">isdigit_result = string.isdigit()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isdigit_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;123 45678&quot;</span></span><br><span class=\"line\">isdigit_result = string.isdigit()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isdigit_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-11-isalpha\"><a href=\"#5-11-isalpha\" class=\"headerlink\" title=\"5.11 .isalpha()\"></a>5.11 .isalpha()</h3><p>判断字符串是不是纯字母字符串，字符串中但凡有一个非字母的，则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">isalpha_result = string.isalpha()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isalpha_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;born forthis&quot;</span></span><br><span class=\"line\">isalpha_result = string.isalpha()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(isalpha_result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-12-isalnum\"><a href=\"#5-12-isalnum\" class=\"headerlink\" title=\"5.12 .isalnum()\"></a>5.12 .isalnum()</h3><p>判断字符串是不是纯数字、纯字母或纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;12345678&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis8888888888&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis 8888888888&quot;</span></span><br><span class=\"line\">boolean = string.isalnum()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-13-isupper\"><a href=\"#5-13-isupper\" class=\"headerlink\" title=\"5.13 .isupper()\"></a>5.13 .isupper()</h3><p>判断字符串中的字母否全大写，全大写则返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;BORNFORTHIS&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;BORNFORTHIS12-、&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;BORNforthis&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.isupper()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-14-islower\"><a href=\"#5-14-islower\" class=\"headerlink\" title=\"5.14 .islower()\"></a>5.14 .islower()</h3><p>判断字符串中字母是不是全小写，全小写则返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis121-、&quot;</span></span><br><span class=\"line\">boolean = string.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthisA121-、&quot;</span></span><br><span class=\"line\">boolean = string.islower()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-15-isspace\"><a href=\"#5-15-isspace\" class=\"headerlink\" title=\"5.15 .isspace()\"></a>5.15 .isspace()</h3><p>判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   &quot;</span></span><br><span class=\"line\">boolean = string.isspace()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">boolean = string.isspace()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">boolean = string.isspace()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-16-strip\"><a href=\"#5-16-strip\" class=\"headerlink\" title=\"5.16 .strip()\"></a>5.16 .strip()</h3><p>默认去掉目标字符串的前后空白字符，如果指定参数，则去掉指定字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">strip_string = string.strip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后空白字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">去掉前后空白字符后: bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;-----bornforthis-----&quot;</span></span><br><span class=\"line\">strip_string = string.strip(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后 &#x27;-&#x27; 字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: -----bornforthis-----</span><br><span class=\"line\">去掉前后 <span class=\"string\">&#x27;-&#x27;</span> 字符后: bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;--- --bornforthis-- ---&quot;</span></span><br><span class=\"line\">strip_string = string.strip(<span class=\"string\">&#x27;-&#x27;</span>)  <span class=\"comment\"># 只去掉连续的减号</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后 &#x27;-&#x27; 字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: --- --bornforthis-- ---</span><br><span class=\"line\">去掉前后 <span class=\"string\">&#x27;-&#x27;</span> 字符后:  --bornforthis-- </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;--- --bornforthis-- ---&quot;</span>  <span class=\"comment\"># 如果想去掉减号和空格呢？</span></span><br><span class=\"line\">strip_string = string.strip(<span class=\"string\">&#x27;- &#x27;</span>)  <span class=\"comment\"># 填入要去掉的字符「不计较先后顺序」</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉前后 &#x27;- &#x27; 字符后:&quot;</span>, strip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: --- --bornforthis-- ---</span><br><span class=\"line\">去掉前后 <span class=\"string\">&#x27;- &#x27;</span> 字符后: bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-17-lstrip\"><a href=\"#5-17-lstrip\" class=\"headerlink\" title=\"5.17 .lstrip()\"></a>5.17 .lstrip()</h3><p>默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">lstrip_string = string.lstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉左边空白字符后:&quot;</span>, lstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">去掉左边空白字符后: bornforthis   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;----bornforthis----&quot;</span></span><br><span class=\"line\">lstrip_string = string.lstrip(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉左边 &#x27;-&#x27; 后:&quot;</span>, lstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ----bornforthis----</span><br><span class=\"line\">去掉左边 <span class=\"string\">&#x27;-&#x27;</span> 后: bornforthis----</span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;-- --bornforthis----&quot;</span></span><br><span class=\"line\">lstrip_string = string.lstrip(<span class=\"string\">&#x27;- &#x27;</span>)  <span class=\"comment\"># 不分先后顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉左边 &#x27;- &#x27; 后:&quot;</span>, lstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: -- --bornforthis----</span><br><span class=\"line\">去掉左边 <span class=\"string\">&#x27;- &#x27;</span> 后: bornforthis----</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-18-rstrip\"><a href=\"#5-18-rstrip\" class=\"headerlink\" title=\"5.18 .rstrip()\"></a>5.18 .rstrip()</h3><p>默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">rstrip_string = string.rstrip()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉右边空白字符后:&quot;</span>, rstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">去掉右边空白字符后:    bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;----bornforthis----&quot;</span></span><br><span class=\"line\">rstrip_string = string.rstrip(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉右边 &#x27;-&#x27; 后:&quot;</span>, rstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ----bornforthis----</span><br><span class=\"line\">去掉右边 <span class=\"string\">&#x27;-&#x27;</span> 后: ----bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;----bornforthis-- --&quot;</span></span><br><span class=\"line\">rstrip_string = string.rstrip(<span class=\"string\">&#x27;- &#x27;</span>)  <span class=\"comment\"># 不分先后顺序</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;去掉右边 &#x27;- &#x27; 后:&quot;</span>, rstrip_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ----bornforthis-- --</span><br><span class=\"line\">去掉右边 <span class=\"string\">&#x27;- &#x27;</span> 后: ----bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-19-replace\"><a href=\"#5-19-replace\" class=\"headerlink\" title=\"5.19 .replace()\"></a>5.19 .replace()</h3><p><code>.replace(old, new, count)</code> 第一个位置传入待替换的旧「old」字符，第二个位置传入要替换的新字符「new」，默认替换全部，count 控制替换次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;   bornforthis   &quot;</span></span><br><span class=\"line\">replace_string = string.replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)  <span class=\"comment\"># 把空白字符替换成 *</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换后:&quot;</span>, replace_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串:    bornforthis   </span><br><span class=\"line\">替换后: ***bornforthis***</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-ai&quot;</span></span><br><span class=\"line\">replace_string = string.replace(<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>)  <span class=\"comment\"># 把 ai 替换成 love，默认全部替换</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换后:&quot;</span>, replace_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-ai</span><br><span class=\"line\">替换后: love-bornforthis-love</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-ai&quot;</span></span><br><span class=\"line\">replace_string = string.replace(<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>, <span class=\"number\">1</span>)  <span class=\"comment\"># 替换一次</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;替换后:&quot;</span>, replace_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-ai</span><br><span class=\"line\">替换后: love-bornforthis-ai</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-20-split\"><a href=\"#5-20-split\" class=\"headerlink\" title=\"5.20 .split()\"></a>5.20 .split()</h3><p><code>.split(sep, maxsplit)</code> 以特定字符进行分割，默认空格分割。如果传入参数「sep」，则以参数进行分割。返回分割后的列表。maxsplit 用于控制分割几次。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;ai bornforthis ai&quot;</span></span><br><span class=\"line\">split_string = string.split()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, split_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai bornforthis ai</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-ai&quot;</span></span><br><span class=\"line\">split_string = string.split(<span class=\"string\">&#x27;-&#x27;</span>)  <span class=\"comment\"># 以 - 好分割</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, split_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-ai</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-love&quot;</span></span><br><span class=\"line\">split_string = string.split(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, split_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-love</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis-love&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>::: warning</p>\n<p>注意⚠️：使用 spilt 分割时，不管每个字符之间有几个空格，都将会正常的分割出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;ai  bornforthis  ai    book&quot;</span></span><br><span class=\"line\">new_s = s.split()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;book&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>当我们指定 split 的间隔时，spilt 会严格按照我们指定的分割符号来分割。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;ai  bornforthis  ai    book&quot;</span></span><br><span class=\"line\">new_s = s.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">[<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;book&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面多输出的结果空字符串，就是证明。</p>\n<p>其实，在学习的过程当中，还是需要经常举一反三的。如果是其它连续字符会不会有这样情况呢？——答案是肯定的，也会有这样的情况。</p>\n<p>你可以自行分析和编写代码试一试～</p>\n<p>:::</p>\n<h3 id=\"5-21-rsplit\"><a href=\"#5-21-rsplit\" class=\"headerlink\" title=\"5.21 .rsplit()\"></a>5.21 .rsplit()</h3><p><code>.rsplit(sep, maxsplit)</code> 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-love&quot;</span></span><br><span class=\"line\">rsplit_string = string.rsplit(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, rsplit_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-love</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai&#x27;</span>, <span class=\"string\">&#x27;bornforthis&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;ai-bornforthis-love&quot;</span></span><br><span class=\"line\">rsplit_string = string.rsplit(<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;分割后:&quot;</span>, rsplit_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: ai-bornforthis-love</span><br><span class=\"line\">分割后: [<span class=\"string\">&#x27;ai-bornforthis&#x27;</span>, <span class=\"string\">&#x27;love&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-22-join\"><a href=\"#5-22-join\" class=\"headerlink\" title=\"5.22 .join()\"></a>5.22 .join()</h3><p>以特定字符使字符串间隔。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;bornforthis&quot;</span></span><br><span class=\"line\">join_string = <span class=\"string\">&#x27;-&#x27;</span>.join(string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;原本的字符串:&quot;</span>, string)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;拼接后:&quot;</span>, join_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">原本的字符串: bornforthis</span><br><span class=\"line\">分割后: b-o-r-n-f-o-r-t-h-i-s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-字符串格式化\"><a href=\"#6-字符串格式化\" class=\"headerlink\" title=\"6. 字符串格式化\"></a>6. 字符串格式化</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi Bornforthis,Welcome to XiaMen.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to XiaMen.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。</li>\n<li>我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。</li>\n</ul>\n<p>当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;Bornforthis&quot;</span></span><br><span class=\"line\">region = <span class=\"string\">&quot;XiaMen&quot;</span></span><br><span class=\"line\">string1 = <span class=\"string\">&quot;Hi &quot;</span></span><br><span class=\"line\">string2 = <span class=\"string\">&quot;,Welcome to &quot;</span></span><br><span class=\"line\">string3 = <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">result = string1 + name + string2 + region + string3</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to XiaMen.</span><br></pre></td></tr></table></figure>\n\n<p>由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。</p>\n<p>而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is &quot;</span> + <span class=\"number\">190</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    string = <span class=\"string\">&quot;Money is &quot;</span> + <span class=\"number\">190</span></span><br><span class=\"line\">TypeError: can only concatenate <span class=\"built_in\">str</span> (<span class=\"keyword\">not</span> <span class=\"string\">&quot;int&quot;</span>) to <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is &quot;</span> + <span class=\"built_in\">str</span>(<span class=\"number\">190</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span></span><br></pre></td></tr></table></figure>\n\n<p>—— <strong>format</strong> 就应运而生了。</p>\n<h3 id=\"6-1-format\"><a href=\"#6-1-format\" class=\"headerlink\" title=\"6.1 .format()\"></a>6.1 .format()</h3><ol>\n<li>单个花括号 <code>&#123;&#125;</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to XiaMen.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;aiyuechuang&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to XiaMen.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to XiaMen.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;Bornforthis&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to XiaMen.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;AI悦创&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to XiaMen.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>一个花括号以上「按顺序填充」</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to &#123;&#125;.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;aiyuechuang&quot;</span>, <span class=\"string\">&quot;厦门&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to 厦门.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;&#125;,Welcome to &#123;&#125;.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;Bornforthis&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 上海.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;AI悦创&quot;</span>, <span class=\"string\">&quot;北京&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>多个花括号指定位置</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;1&#125;,Welcome to &#123;0&#125;.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;厦门&quot;</span>, <span class=\"string\">&quot;aiyuechuang&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to 厦门.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;1&#125;,Welcome to &#123;0&#125;.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;上海&quot;</span>, <span class=\"string\">&quot;Bornforthis&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 上海.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;AI悦创&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>参数指定</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Hi &#123;name&#125;,Welcome to &#123;region&#125;.&quot;</span>.<span class=\"built_in\">format</span>(region=<span class=\"string\">&#x27;厦门&#x27;</span>, name=<span class=\"string\">&#x27;aiyuechuang&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi aiyuechuang,Welcome to 厦门.</span><br><span class=\"line\"></span><br><span class=\"line\">template_string = <span class=\"string\">&quot;Hi &#123;name&#125;,Welcome to &#123;region&#125;.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(template_string.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;Bornforthis&quot;</span>, region=<span class=\"string\">&#x27;上海&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 上海.</span><br><span class=\"line\"></span><br><span class=\"line\">new_string = template_string.<span class=\"built_in\">format</span>(name=<span class=\"string\">&#x27;AI悦创&#x27;</span>, region=<span class=\"string\">&#x27;北京&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>保留指定小数位</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is &#123;:.3f&#125;.&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">190</span>)  <span class=\"comment\"># .3f 保留三位小数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190.000</span>.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时，放入数字是不会报错了。</p>\n</blockquote>\n<h3 id=\"6-2-f\"><a href=\"#6-2-f\" class=\"headerlink\" title=\"6.2 f\"></a>6.2 f</h3><ol>\n<li>直接读取变量</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;Bornforthis&quot;</span></span><br><span class=\"line\">region = <span class=\"string\">&quot;厦门&quot;</span></span><br><span class=\"line\">string = <span class=\"string\">f&quot;Hi <span class=\"subst\">&#123;name&#125;</span>,Welcome to <span class=\"subst\">&#123;region&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Hi Bornforthis,Welcome to 厦门.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>保留小数位</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">money = <span class=\"number\">190</span></span><br><span class=\"line\">string = <span class=\"string\">f&quot;Money is <span class=\"subst\">&#123;money:<span class=\"number\">.3</span>f&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190.000</span>.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-格式化\"><a href=\"#6-3-格式化\" class=\"headerlink\" title=\"6.3 % 格式化\"></a>6.3 % 格式化</h3><ul>\n<li><code>%d</code>: 整数</li>\n<li><code>%s</code>: 字符串</li>\n<li><code>%f</code>: 浮点数</li>\n</ul>\n<ol>\n<li>单个位置传入</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %d&quot;</span></span><br><span class=\"line\">new_s = string % <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % <span class=\"number\">19</span>)</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %d&quot;</span> % <span class=\"number\">190</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">new_string: Money <span class=\"keyword\">is</span> <span class=\"number\">13</span></span><br><span class=\"line\">直接放: Money <span class=\"keyword\">is</span> <span class=\"number\">19</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>多个位置传入</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span></span><br><span class=\"line\">new_s = string % (<span class=\"number\">13</span>, <span class=\"string\">&#x27;发大财&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % (<span class=\"number\">888</span>, <span class=\"string\">&#x27;暴富&#x27;</span>))</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span> % (<span class=\"number\">190</span>, <span class=\"string\">&quot;超有钱&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">13</span> 发大财</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">888</span> 暴富</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span> 超有钱</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span></span><br><span class=\"line\">new_s = string % (<span class=\"number\">13</span>, <span class=\"string\">&#x27;make a million&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % (<span class=\"number\">888</span>, <span class=\"string\">&#x27;sudden wealth&#x27;</span>))</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %d %s&quot;</span> % (<span class=\"number\">190</span>, <span class=\"string\">&#x27;super rich&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">13</span> make a million</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">888</span> sudden wealth</span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">190</span> <span class=\"built_in\">super</span> rich</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>保留小数位</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">&quot;Money is %.3f&quot;</span></span><br><span class=\"line\">new_s = string % <span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(new_s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(string % <span class=\"number\">18</span>)</span><br><span class=\"line\">string = <span class=\"string\">&quot;Money is %.3f&quot;</span> % <span class=\"number\">180</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(string)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">19.000</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">18.000</span></span><br><span class=\"line\">Money <span class=\"keyword\">is</span> <span class=\"number\">180.000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-f-和-format、-的优缺点\"><a href=\"#6-4-f-和-format、-的优缺点\" class=\"headerlink\" title=\"6.4 f 和 format、% 的优缺点\"></a>6.4 f 和 format、% 的优缺点</h3><p><code>format</code> 和 <code>%</code> 都像模版，提前做好模版后面有需要时可以直接使用；</p>\n<p>而 <code>f</code> 就像在银行当中，柜员边问你边登记，不能提前做好模版。</p>\n<h2 id=\"7-字符串不可变性\"><a href=\"#7-字符串不可变性\" class=\"headerlink\" title=\"7. 字符串不可变性\"></a>7. 字符串不可变性</h2><p>字符串是不可变的，不可以改变字符串中的任何元素，如需改变字符串中的元素，则需要新建一个字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;hello bornforthis&quot;</span></span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">TypeError: <span class=\"string\">&#x27;str&#x27;</span> <span class=\"built_in\">object</span> does <span class=\"keyword\">not</span> support item assignment</span><br></pre></td></tr></table></figure>\n\n<p>除了使用 replace 还可以使用字符串拼接：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;hello bornforthis&quot;</span></span><br><span class=\"line\">news = <span class=\"string\">&quot;a&quot;</span> + s[<span class=\"number\">1</span>:]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(news)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">aello bornforthis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-字符串转义\"><a href=\"#8-字符串转义\" class=\"headerlink\" title=\"8. 字符串转义\"></a>8. 字符串转义</h2><table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>含义</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\\\</code></td>\n<td>反斜杠符号，为了在字符串中得到 <code>\\</code></td>\n<td><code>s = &quot;bor\\\\nforthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格，类似删除键</td>\n<td><code>s = &quot;bornff\\borthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n<td><code>s = &quot;bornfor\\nthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n<td><code>s = &quot;born\\tfor\\tthis&quot;</code></td>\n</tr>\n<tr>\n<td><code>r</code></td>\n<td>取消转义「R 和 r」都可以</td>\n<td><code>s = r&quot;born\\tfor\\tthis&quot;</code></td>\n</tr>\n</tbody></table>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;bor\\\\nforthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bor\\nforthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">&quot;bornff\\borthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">&quot;bornfor\\nthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornfor</span><br><span class=\"line\">this</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">&quot;born\\tfor\\tthis&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">born    <span class=\"keyword\">for</span>    this</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-字符串的连接\"><a href=\"#9-字符串的连接\" class=\"headerlink\" title=\"9. 字符串的连接\"></a>9. 字符串的连接</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 = <span class=\"string\">&#x27;born&#x27;</span></span><br><span class=\"line\">s2 = <span class=\"string\">&#x27;forthis&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 + s2)  <span class=\"comment\"># 形成了一个字符串</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1, s2)  <span class=\"comment\"># 还是两个独立的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br><span class=\"line\">born forthis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = <span class=\"string\">&#x27;*-love-&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-</span><br></pre></td></tr></table></figure>\n\n<p>我想在上面的输出添加末尾加一个 <code>*</code> 怎么办呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原本:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-</span><br><span class=\"line\">目标:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*</span><br></pre></td></tr></table></figure>\n\n<p><strong>思考一下，如何实现。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 = <span class=\"string\">&#x27;*-love-&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1 * <span class=\"number\">10</span>, end=<span class=\"string\">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-读取用户输入\"><a href=\"#10-读取用户输入\" class=\"headerlink\" title=\"10. 读取用户输入\"></a>10. 读取用户输入</h2><h3 id=\"10-1-input-基本使用\"><a href=\"#10-1-input-基本使用\" class=\"headerlink\" title=\"10.1 input() 基本使用\"></a>10.1 input() 基本使用</h3><p>使用 <code>input()</code> 获取用户输入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_input = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(user_input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">bornforthis</span><br><span class=\"line\">bornforthis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-input-使用输入提示\"><a href=\"#10-2-input-使用输入提示\" class=\"headerlink\" title=\"10.2 input() 使用输入提示\"></a>10.2 input() 使用输入提示</h3><p>但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？</p>\n<p><img src=\"/./04-python-string/image-20231214174641525.png\"></p>\n<p>如何解决？——使用输入提示。</p>\n<p><code>input()</code> 函数里面支持我们写入字符串进行提示。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_input = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Enter your name:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;user input name:&quot;</span>, user_input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---output---</span></span><br><span class=\"line\">Enter your name:&gt;&gt;&gt;bornforthis</span><br><span class=\"line\">user <span class=\"built_in\">input</span> name: bornforthis</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./04-python-string/image-20231214175112464.png\" alt=\"这样就很直观了\"></p>\n<h3 id=\"10-3-input-的特点\"><a href=\"#10-3-input-的特点\" class=\"headerlink\" title=\"10.3 input() 的特点\"></a>10.3 input() 的特点</h3><h4 id=\"10-3-1-input-得到类型皆为字符串「str」\"><a href=\"#10-3-1-input-得到类型皆为字符串「str」\" class=\"headerlink\" title=\"10.3.1 input() 得到类型皆为字符串「str」\"></a>10.3.1 input() 得到类型皆为字符串「str」</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">2</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))  <span class=\"comment\"># 使用 type 检测 input 获取用户输入之后的数据类型</span></span><br><span class=\"line\">:&gt;&gt;&gt;bornforthis</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">3</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12</span></span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12.1</span></span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">5</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">Out[<span class=\"number\">5</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">6</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]  </span><br><span class=\"line\">Out[<span class=\"number\">6</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">7</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">Out[<span class=\"number\">7</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">8</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">19</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">Out[<span class=\"number\">8</span>]: <span class=\"built_in\">str</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">9</span>]: <span class=\"built_in\">type</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"literal\">True</span></span><br><span class=\"line\">Out[<span class=\"number\">9</span>]: <span class=\"built_in\">str</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的代码示例，我们可以知道：通过 <code>input()</code> 获取用户输入，得到的数据类型都是<strong>字符串</strong>。</p>\n<p>得知 <code>input()</code> 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。</p>\n<h4 id=\"10-3-2-方法一：强制类型转换\"><a href=\"#10-3-2-方法一：强制类型转换\" class=\"headerlink\" title=\"10.3.2 方法一：强制类型转换\"></a>10.3.2 方法一：强制类型转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">10</span>]: n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">11</span>]: <span class=\"built_in\">type</span>(n)</span><br><span class=\"line\">Out[<span class=\"number\">11</span>]: <span class=\"built_in\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">12</span>]: <span class=\"comment\"># 存在一些问题</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">13</span>]: s = <span class=\"built_in\">list</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">14</span>]: s  <span class=\"comment\"># 把每一个字符拆开</span></span><br><span class=\"line\">Out[<span class=\"number\">14</span>]: [<span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;]&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">15</span>]: <span class=\"built_in\">type</span>(s)</span><br><span class=\"line\">Out[<span class=\"number\">15</span>]: <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">16</span>]: b = <span class=\"built_in\">bool</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">17</span>]: b</span><br><span class=\"line\">Out[<span class=\"number\">17</span>]: <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">18</span>]: <span class=\"built_in\">type</span>(b)</span><br><span class=\"line\">Out[<span class=\"number\">18</span>]: <span class=\"built_in\">bool</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>适合：数字「整数、浮点数」、字符串、布尔型</li>\n<li>不适合：列表、元组、字典、集合</li>\n</ul>\n<h4 id=\"10-3-3-方法二：使用-eval\"><a href=\"#10-3-3-方法二：使用-eval\" class=\"headerlink\" title=\"10.3.3 方法二：使用 eval()\"></a>10.3.3 方法二：使用 eval()</h4><ol>\n<li><code>eval()</code> 的妙用</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">28</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">29</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">29</span>]: (<span class=\"built_in\">int</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">30</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">31</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">31</span>]: (<span class=\"built_in\">list</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">32</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">33</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">33</span>]: (<span class=\"built_in\">tuple</span>, (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">34</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">35</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">35</span>]: (<span class=\"built_in\">set</span>, &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">36</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">37</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">37</span>]: (<span class=\"built_in\">bool</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">38</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">39</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">39</span>]: (<span class=\"built_in\">dict</span>, &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">2</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>eval()</code> 伴随着的问题</li>\n</ol>\n<p>上面的代码看似解决了我们所遇到的问题，但是也伴随着我们需要注意的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">40</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;string </span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">NameError                                 Traceback (most recent call last)</span><br><span class=\"line\">Cell In[<span class=\"number\">40</span>], line <span class=\"number\">1</span></span><br><span class=\"line\">----&gt; <span class=\"number\">1</span> s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">File &lt;string&gt;:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;string&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n\n<p>稍微分析一下 <code>eval()</code> 的功能“大概”实现原因：</p>\n<ul>\n<li>input 获取用户输入，得到字符串类型。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">44</span>]: s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">45</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">45</span>]: <span class=\"string\">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」</p>\n<p>所以，为什么会导致上面的报错呢？</p>\n<ol>\n<li>获取用户输入：<code>s = eval(input(&#39;:&gt;&gt;&gt;&#39;))</code></li>\n<li>其中 input 会得到 <code>&#39;string&#39;</code>，而通过 <code>eval</code> 转换之后，就类似于 <code>string</code> 变量。但是我们实际上我们在我们之前的代码中，并没有创建 string 这个变量。</li>\n<li>故而报错，当然没有通过上面的分析也可以大概预料到问题，因为报错很直观：<code>NameError: name &#39;string&#39; is not defined</code> 。</li>\n<li>所以，解决方法很直白：<ol>\n<li>一种是你在获取用户输入之前直接提前创建一个叫做 string 的变量；「显然，不是我们想要的」</li>\n<li>另一种则是输入的时，有意加上单引号或者双引号、三引号。</li>\n</ol>\n</li>\n</ol>\n<p>::: code-tabs</p>\n<p>@tab Code 1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">50</span>]: string = <span class=\"string\">&#x27;hello this string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">51</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;string</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">52</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">52</span>]: <span class=\"string\">&#x27;hello this string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">53</span>]: num = <span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">54</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;num</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">55</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">55</span>]: (<span class=\"built_in\">int</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">56</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">57</span>]: <span class=\"built_in\">type</span>(s), s</span><br><span class=\"line\">Out[<span class=\"number\">57</span>]: (<span class=\"built_in\">str</span>, <span class=\"string\">&#x27;string&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>@tab Code 2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">56</span>]: <span class=\"comment\"># Step 1: 探究 eval 的实现原理</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">57</span>]: s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">58</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">58</span>]: <span class=\"string\">&#x27;[1, 2, 3]&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">59</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">60</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: <span class=\"comment\"># eval 大体是实现把字符串外面的引号去掉，实现变回原本的数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">62</span>]: <span class=\"comment\"># Step 2: 探究报错原因</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">63</span>]: s = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class=\"line\">:&gt;&gt;&gt;look</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">64</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">64</span>]: <span class=\"string\">&#x27;look&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">65</span>]: <span class=\"comment\"># 我们可以观察输出的是 &#x27;look&#x27;，如果直接去掉 look 左右的引号将变成：变量。但变量没有被定义，所以</span></span><br><span class=\"line\">    ...: 会报错。</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">66</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;look</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">NameError                                 Traceback (most recent call last)</span><br><span class=\"line\">Cell In[<span class=\"number\">66</span>], line <span class=\"number\">1</span></span><br><span class=\"line\">----&gt; <span class=\"number\">1</span> s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">File &lt;string&gt;:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;look&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: <span class=\"comment\"># Step 3: 解决方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">68</span>]: <span class=\"comment\"># 既然 eval 是直接去掉 look 外面的引号，导致变量不存在报错。所以我有两种解决方法：</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">69</span>]: <span class=\"comment\"># 方法一：提前创建一个变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">70</span>]: <span class=\"comment\"># 方法二：输入的时，有意加上单引号或者双引号、三引号</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">71</span>]: look = <span class=\"string\">&#x27;我提前创建一个 look 变量&#x27;</span>  <span class=\"comment\"># 方法一</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">72</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;look</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">73</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">73</span>]: <span class=\"string\">&#x27;我提前创建一个 look 变量&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">74</span>]: s = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;:&gt;&gt;&gt;&quot;</span>))  <span class=\"comment\"># 方法二：我提前加一个引号，input 也会给它一个引号，最后有两对引号，eval 拆掉一对引号，还剩一对引号。——成功得到字符串</span></span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"string\">&#x27;look&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">75</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">75</span>]: <span class=\"string\">&#x27;look&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>:::</p>\n<ol start=\"3\">\n<li><code>eval()</code> 小技巧</li>\n</ol>\n<p>任务要求：获取户输入，实现两位的加减乘除。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">58</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\">Out[<span class=\"number\">58</span>]: <span class=\"number\">2</span>  <span class=\"comment\"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;1 + 1&#x27;) == 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">59</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">2</span> - <span class=\"number\">1</span></span><br><span class=\"line\">Out[<span class=\"number\">59</span>]: <span class=\"number\">1</span>  <span class=\"comment\"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;2 - 1&#x27;) == 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">60</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">9</span> * <span class=\"number\">8</span></span><br><span class=\"line\">Out[<span class=\"number\">60</span>]: <span class=\"number\">72</span>  <span class=\"comment\"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;9 * 8&#x27;) == 72</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">61</span>]: <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class=\"line\">:&gt;&gt;&gt;<span class=\"number\">9</span> / <span class=\"number\">3</span></span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-3-4-浅谈-input-的设计理念\"><a href=\"#10-3-4-浅谈-input-的设计理念\" class=\"headerlink\" title=\"10.3.4 浅谈 input 的设计理念\"></a>10.3.4 浅谈 input 的设计理念</h4><p>在 Python 中，使用 <code>input()</code> 函数时，它会从标准输入（通常是键盘）读取一行文本，并且这一行文本会被当作字符串处理。这是因为用户输入的内容可能包括各种字符，包括数字、字母和符号。由于 <code>input()</code> 函数不能预知用户将要输入什么类型的数据，它默认将输入内容作为字符串返回，这样可以保持最大的灵活性和兼容性。</p>\n<p>如果你需要将这个字符串转换为其他数据类型，比如整数或浮点数，你可以使用相应的转换函数，例如 <code>int()</code> 或 <code>float()</code>，来进行转换。这里是一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 input() 获取用户输入，并存储为字符串</span></span><br><span class=\"line\">user_input = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入一个数字: &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字符串转换为整数</span></span><br><span class=\"line\">number = <span class=\"built_in\">int</span>(user_input)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印转换后的整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入的整数是:&quot;</span>, number)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，如果用户输入的不是一个有效的整数，<code>int()</code> 函数会抛出一个 <code>ValueError</code>。因此，在实际使用中，通常需要加上错误处理来确保程序的健壮性。</p>\n<h2 id=\"11-小试牛刀\"><a href=\"#11-小试牛刀\" class=\"headerlink\" title=\"11. 小试牛刀\"></a>11. 小试牛刀</h2><p>获取用户连续输入的两个整数，得到两个整数的和。</p>\n<p><strong>要求：</strong></p>\n<ul>\n<li>只能使用一个 input 函数；</li>\n<li>用户输入格式：num1 num2</li>\n<li>输出计算结果；</li>\n</ul>\n<p><strong>输入：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p>::: code-tabs</p>\n<p>@tab Code1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = <span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>).replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nums)</span><br></pre></td></tr></table></figure>\n\n<p>@tab Code2</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;:&gt;&gt;&gt;&#x27;</span>).split()</span><br><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"built_in\">int</span>(nums[<span class=\"number\">0</span>]) + <span class=\"built_in\">int</span>(nums[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure>\n\n<p>:::</p>\n"}],"PostAsset":[{"_id":"source/_posts/post-name/image-1.png","post":"clzod40h90006jp8n5bx76ufk","slug":"image-1.png","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/image.png","post":"clzod40h80004jp8n36i2h46x","slug":"image.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231208131933540.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231208131933540.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231208133549593.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231208133549593.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231208133942865.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231208133942865.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231208141259131.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231208141259131.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231211161559839.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231211161559839.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231214174641525.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231214174641525.png","modified":1,"renderable":0},{"_id":"source/_posts/04-python-string/image-20231214175112464.png","post":"clzod40ha0009jp8n0g701onu","slug":"image-20231214175112464.png","modified":1,"renderable":0}],"PostCategory":[{"post_id":"clzod40h80004jp8n36i2h46x","category_id":"clzod40h90007jp8n2xrx321q","_id":"clzod40hb000cjp8ne0xjbm1c"}],"PostTag":[{"post_id":"clzod40h80004jp8n36i2h46x","tag_id":"clzod40ha0008jp8n6l7ea51s","_id":"clzod40ha000bjp8nb2o7c3nv"},{"post_id":"clzod40h90006jp8n5bx76ufk","tag_id":"clzod40ha000ajp8narsn93xs","_id":"clzod40hb000djp8ncvt79trf"}],"Tag":[{"name":"Java","_id":"clzod40ha0008jp8n6l7ea51s"},{"name":"Python","_id":"clzod40ha000ajp8narsn93xs"}]}}