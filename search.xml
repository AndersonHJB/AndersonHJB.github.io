<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我从Intel升级到了M芯片的Macbook体验，以及我的Mac软件推荐</title>
      <link href="/posts/daebc472.html"/>
      <url>/posts/daebc472.html</url>
      
        <content type="html"><![CDATA[<p>你好，我是悦创。</p><p>现在 m2 pro 都出了，主要是性能提升并不是很大，似乎 cpu 只有 10% 不到，而且我也用不上 GPU，为了升级 m2pro 要多花 3000 块钱，考虑再三还是放弃了，买了我的 m1pro 的 macbookpro，续航最强的 16寸版本。</p><h1 id="为什么-16-寸"><a href="#为什么-16-寸" class="headerlink" title="为什么 16 寸"></a>为什么 16 寸</h1><p>我在买电脑之前一直想象自己要买一个 14寸的笔记本，因为着实受不了这个重量。后来考虑到做设计和写代码比较需要大屏幕，再加上我不太可能外界屏幕（因为家里公司都没有外接显示器）也不打算配一个，因为我之前 16寸的 19款 MacBook Pro 的尺寸非常合适，所以最终考虑了三个多小时，还是选的 16寸。</p><p>对于 16寸和 14寸的选择，我的建议是：</p><ul><li><p>写代码工作因为有的时候一行会比较长，较宽的屏幕更好展现</p></li><li><p>写代码 app 时右侧挂虚拟机，查看预览效果，所以较宽的屏幕更好展现</p></li><li><p>经常出差建议 macbookair 或者 14寸 pro</p></li><li><p>如果不打算外接显示器使用，建议酌情考虑 16寸</p></li><li><p>需要长续航选择16寸</p></li></ul><hr><h1 id="我的这台机器"><a href="#我的这台机器" class="headerlink" title="我的这台机器"></a>我的这台机器</h1><p>我选择了官翻机，一个是官翻机是支持14天无理由退货的，如果买到发现什么问题或者不喜欢还可以退掉。一个是官翻机从官网发货，快递走的空运也非常快（当然没有我淘宝店闪送快），一个是价格足够便宜（比淘宝店现在的还便宜）。还有一点是支持二十四期分期的。（这里建议一下，就是你即使可以全款付，如果是免息分期的话还是建议分期，毕竟也是白嫖一千多的分期手续费呢，而且分期算完价格如果凑不整的话还比全款便宜几块钱）</p><p>所以我的配置是</p><ul><li>M1 Pro Max</li><li>16寸</li><li>32G 内存</li><li>1TB 存储</li></ul><p>价格两万五左右吧，这个也是考虑一方面内存真的不太够用了，之前 intel 下我的 16g 内存在日常使用占用满了不说，还吃了 10 个 G 的虚拟内存。</p><p>而换到 m1 之后我的内存中虚拟内存的占用为0。</p><img src="/posts/daebc472/image.png" class=""><p><img src="/./01-MacBookPro16.assets/image-20240816225409655.png"></p>]]></content>
      
      
      <categories>
          
          <category> 好物推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 评测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog</title>
      <link href="/posts/c0155143.html"/>
      <url>/posts/c0155143.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>post_name</title>
      <link href="/posts/9776190d.html"/>
      <url>/posts/9776190d.html</url>
      
        <content type="html"><![CDATA[<h1 id="你啊后"><a href="#你啊后" class="headerlink" title="你啊后"></a>你啊后</h1><p><img src="/posts/9776190d/image-1.png" alt="alt text"></p><p><img src="/posts/9776190d/image.png" alt="alt text"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-str NoteBook</title>
      <link href="/posts/fa256f4b.html"/>
      <url>/posts/fa256f4b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符串的定义"><a href="#1-字符串的定义" class="headerlink" title="1. 字符串的定义"></a>1. 字符串的定义</h2><p><strong>字符串是由字母、数字和特殊字符来组成的序列。</strong></p><img src="/posts/fa256f4b/image-20231208131933540.png" class="" title="有序性"><h2 id="2-创建字符串"><a href="#2-创建字符串" class="headerlink" title="2. 创建字符串"></a>2. 创建字符串</h2><p><strong>如何创建字符串？</strong></p><p>——使用 **<span style="color:orange">单引号、双引号</span>或者<span style="color:orange">三引号</span>**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;bornforthis&#x27;</span></span><br><span class="line">number = <span class="string">&quot;18&quot;</span></span><br><span class="line">paragraph = <span class="string">&#x27;&#x27;&#x27;Hello,Bornforthis!</span></span><br><span class="line"><span class="string">Hello,World!&#x27;&#x27;&#x27;</span></span><br><span class="line">paragraph_two = <span class="string">&quot;&quot;&quot;Hello,Bornforthis!</span></span><br><span class="line"><span class="string">Hello,World!&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>为什么 Python 同时支持三种创建字符串的方法？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&#x27;I am bornforthis.&#x27;</span>  <span class="comment"># 在英文当中的常规表达式</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br></pre></td></tr></table></figure><p>但是英文当中可以缩写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&#x27;I&#x27;</span>m bornforthis.<span class="string">&#x27;  # 在英文当中也可以这样缩写</span></span><br><span class="line"><span class="string">print(string)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 输出</span></span><br><span class="line"><span class="string">  File &quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;, line 15</span></span><br><span class="line"><span class="string">    string = &#x27;</span>I<span class="string">&#x27;m bornforthis.&#x27;</span>  <span class="comment"># 在英文当中也可以这样缩写</span></span><br><span class="line">                ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p><strong>因为，开头是单引号，所以 Python 会寻找到下一个第一次出现的单引号进行匹配。而第一个单引号不在字符串的末尾，所以导致整个字符串异常。（没有完全包裹字符串全部内容）</strong></p><p>如何解决上面描述的问题呢？——使用双引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;I&#x27;m bornforthis.&quot;</span>  <span class="comment"># 外面使用双引号进行包裹即可</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">I<span class="string">&#x27;m bornforthis.</span></span><br></pre></td></tr></table></figure><ul><li>有时候我们需要字符串里面有单引号或双引号，此时发挥作用： <strong><span style="color:orange">单双引号混用，是第一个原因</span></strong></li></ul><p>那么三引号呢？</p><p>假设我们现在需要存储如下文本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span><br><span class="line"></span><br><span class="line">浅者见浅，深者见深——黄家宝</span><br><span class="line"></span><br><span class="line">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span><br><span class="line"></span><br><span class="line">先实现功能，再去优化，否则一切会很乱。——AI悦创</span><br><span class="line"></span><br><span class="line">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure><p>放入字符串，我们如何在 Python 代码实现呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浅者见浅，深者见深——黄家宝</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">先实现功能，再去优化，否则一切会很乱。——AI悦创</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class="comment"># 外面使用双引号进行包裹即可</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">  File <span class="string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;</span>, line <span class="number">15</span></span><br><span class="line">    string = <span class="string">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创</span></span><br><span class="line"><span class="string">                                                     ^</span></span><br><span class="line"><span class="string">SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure><p>常规的单引号、双引号是不支持多行文本，但是有一个方法可以间接实现看似多行文本，但实际是单行，在每一行的末尾添加  <code>\</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">浅者见浅，深者见深——黄家宝\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">先实现功能，再去优化，否则一切会很乱。——AI悦创\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class="comment"># 外面使用双引号进行包裹即可</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure><p>从上面的输出可知，每行结尾添加 <code>\</code> 只能实现看起来换行，实际上还是一行。「就是：一行显示不完，换行显示而已，但是本身还是一行」</p><p><img src="/./04-python-string/image-20231208133549593.png"></p><p>此时，我们使用三引号测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;&quot;&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浅者见浅，深者见深——黄家宝</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">先实现功能，再去优化，否则一切会很乱。——AI悦创</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;&quot;&quot;</span>  <span class="comment"># 外面使用双引号进行包裹即可</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 </span><br><span class="line"></span><br><span class="line">浅者见浅，深者见深——黄家宝</span><br><span class="line"></span><br><span class="line">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。</span><br><span class="line"></span><br><span class="line">先实现功能，再去优化，否则一切会很乱。——AI悦创</span><br><span class="line"></span><br><span class="line">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure><p>可以从上面的输出可知，原本什么格式，输出就是什么格式。「原样输出」「三个单引号的效果和上面一样」</p><ul><li><strong><span style="color:orange">三个单引号或者三个双引号，实现原样输出。</span></strong></li><li><strong><span style="color:orange">多行注释</span></strong></li><li>**<span style="color:orange">单双三引号混用</span>**（代码略）</li></ul><p><img src="/./04-python-string/image-20231208133942865.png" alt="多行注释"></p><h2 id="3-字符串长度"><a href="#3-字符串长度" class="headerlink" title="3. 字符串长度"></a>3. 字符串长度</h2><p>如何获取一个字符串的长度呢？——使用 <code>len()</code></p><p><strong><code>len()</code>: 返回字符串中字符长度或者字符数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">paragraph = <span class="string">&quot;Hello,Bornforthis!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(paragraph))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><p>在使用 len 获取字符串长度时，是从数字 1 开始数的。</p><h2 id="4-字符串中的字符获取"><a href="#4-字符串中的字符获取" class="headerlink" title="4. 字符串中的字符获取"></a>4. 字符串中的字符获取</h2><h3 id="4-1-获取单个字符"><a href="#4-1-获取单个字符" class="headerlink" title="4.1 获取单个字符"></a>4.1 获取单个字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法: string = &quot;bornforthis&quot;</span></span><br><span class="line"><span class="string">select = string[position]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 获取字符 b</span></span><br><span class="line">select = string[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 f</span></span><br><span class="line">select = string[<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s 「使用三种方法实现」</span></span><br><span class="line">select1 = string[<span class="number">10</span>]</span><br><span class="line">select2 = string[<span class="built_in">len</span>(string) - <span class="number">1</span>]</span><br><span class="line">select3 = string[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(select1, select2, select3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">b</span><br><span class="line">f</span><br><span class="line">s s s</span><br></pre></td></tr></table></figure><h3 id="4-2-获取多个连续字符「子字符串」"><a href="#4-2-获取多个连续字符「子字符串」" class="headerlink" title="4.2 获取多个连续字符「子字符串」"></a>4.2 获取多个连续字符「子字符串」</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法: string = &quot;bornforthis&quot;</span></span><br><span class="line"><span class="string">select = string[start: end]</span></span><br><span class="line"><span class="string">PS: end 记得 +1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 获取字符 bor</span></span><br><span class="line">select = string[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment"># bo</span></span><br><span class="line">select = string[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># bor</span></span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 for</span></span><br><span class="line">select = string[<span class="number">4</span>:<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this</span></span><br><span class="line">select = string[<span class="number">7</span>:<span class="number">12</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">bor</span><br><span class="line"><span class="keyword">for</span></span><br><span class="line">this</span><br></pre></td></tr></table></figure><h3 id="4-3-获取多个不连续的字符"><a href="#4-3-获取多个不连续的字符" class="headerlink" title="4.3 获取多个不连续的字符"></a>4.3 获取多个不连续的字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法: string = &quot;0123456789&quot;</span></span><br><span class="line"><span class="string">select = string[start: end: sep]</span></span><br><span class="line"><span class="string">PS: end 记得 +1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 获取字符 02468</span></span><br><span class="line">select = string[<span class="number">0</span>:<span class="built_in">len</span>(string):<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 13579</span></span><br><span class="line">select = string[<span class="number">1</span>:<span class="built_in">len</span>(string):<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 bnri</span></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">select = string[<span class="number">0</span>: <span class="built_in">len</span>(string):<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 ofts</span></span><br><span class="line">select = string[<span class="number">1</span>: <span class="built_in">len</span>(string):<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">02468</span><br><span class="line"><span class="number">13579</span></span><br><span class="line">bnri</span><br><span class="line">ofts</span><br></pre></td></tr></table></figure><h3 id="4-4-优化"><a href="#4-4-优化" class="headerlink" title="4.4 优化"></a>4.4 优化</h3><p>如果，我们要提取的字符是从开头到结尾，则我们可以省略开头和结尾，留空即可。</p><p>所以上面 4.3 的代码可以等价如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法: string = &quot;0123456789&quot;</span></span><br><span class="line"><span class="string">select = string[:: sep]</span></span><br><span class="line"><span class="string">PS: end 记得 +1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 获取字符 02468</span></span><br><span class="line">select = string[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 13579</span></span><br><span class="line">select = string[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 bnri</span></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">select = string[::<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取 ofts</span></span><br><span class="line">select = string[<span class="number">1</span>::<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(select)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">02468</span><br><span class="line"><span class="number">13579</span></span><br><span class="line">bnri</span><br><span class="line">ofts</span><br></pre></td></tr></table></figure><h3 id="4-5-字符串倒序"><a href="#4-5-字符串倒序" class="headerlink" title="4.5 字符串倒序"></a>4.5 字符串倒序</h3><h4 id="4-5-1-实现"><a href="#4-5-1-实现" class="headerlink" title="4.5.1 实现"></a>4.5.1 实现</h4><p>字符串的第三个位置，控制的是字符提取的方向。默认为正数 1，如果我们改成 -1，则会变成反方向。</p><p>::: warning</p><p>正负控制方向，数字大小控制步长。</p><p>:::</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">reverse = string[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(reverse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">sihtrofnrob</span><br></pre></td></tr></table></figure><h4 id="4-5-2-存在的问题"><a href="#4-5-2-存在的问题" class="headerlink" title="4.5.2 存在的问题"></a>4.5.2 存在的问题</h4><p>::: info 思考🤔</p><p>上面代码 <code>string[::-1]</code> 前两位省略了什么数字？尝试填写上去。</p><p>:::</p><p>你有可能是这么想的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line"><span class="comment"># print(len(string))</span></span><br><span class="line">select = string[<span class="number">0</span>:<span class="number">11</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(select)  <span class="comment"># 无结果</span></span><br></pre></td></tr></table></figure><p>想必你也发现了，没有得到结果也没有报错。</p><p><strong>Why？</strong></p><p><img src="/./04-python-string/image-20231208141259131.png"></p><p>由上面分析，我们应该如何解决？</p><h4 id="4-5-3-解决方法"><a href="#4-5-3-解决方法" class="headerlink" title="4.5.3 解决方法"></a>4.5.3 解决方法</h4><h5 id="4-5-3-1-方法一：调换位置"><a href="#4-5-3-1-方法一：调换位置" class="headerlink" title="4.5.3.1 方法一：调换位置"></a>4.5.3.1 方法一：调换位置</h5><ul><li>能否解决：可以</li><li>存在什么问题？：少了一个字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">select = string[<span class="number">11</span>:<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(select)  <span class="comment"># sihtrofnro</span></span><br></pre></td></tr></table></figure><p><strong>为什么少一个字符？</strong></p><p>——存在一个悖论，因为结束🔚是 0，但是 <code>0 + 1</code> 时得到 1，而 1 是从左到右的第二个字符。故而 +1 是无法实现和解决了。</p><p>但是，我们可以利用不写结尾，得到最后一个缺失的字符：<code>string[11::-1]</code> 。</p><p>虽然解决，但是我们偏离了我的一开始的问题：<strong>前两位省略了什么数字？</strong>「因为，又回到了一开始省略的状态」</p><h5 id="4-5-3-2-方法二：重写开始结尾"><a href="#4-5-3-2-方法二：重写开始结尾" class="headerlink" title="4.5.3.2 方法二：重写开始结尾"></a>4.5.3.2 方法二：重写开始结尾</h5><p><strong>想想字符串的有序性，从右到左。</strong></p><p>为什么要纠结前面两个空的数字是多少？——为了之后得到某一部分的字符倒序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">select = string[-<span class="number">1</span>:-<span class="number">12</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(select)  <span class="comment"># sihtrofnrob</span></span><br></pre></td></tr></table></figure><p><img src="/./04-python-string/image-20231211161559839.png"></p><p><strong>小试牛刀：</strong> 获取 <code>rofn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">select = string[-<span class="number">5</span>:-<span class="number">9</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(select)  <span class="comment"># rofn</span></span><br></pre></td></tr></table></figure><h2 id="5-字符串内置方法"><a href="#5-字符串内置方法" class="headerlink" title="5. 字符串内置方法"></a>5. 字符串内置方法</h2><h3 id="5-1-upper"><a href="#5-1-upper" class="headerlink" title="5.1 .upper()"></a>5.1 .upper()</h3><p>将字符串内容，全部转成大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">upper_string = string.upper()</span><br><span class="line"><span class="built_in">print</span>(upper_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">BORNFORTHIS</span><br></pre></td></tr></table></figure><h3 id="5-2-lower"><a href="#5-2-lower" class="headerlink" title="5.2 .lower()"></a>5.2 .lower()</h3><p>将字符串的内容，全部转成小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;BORNFORTHIS&quot;</span></span><br><span class="line">lower_string = string.lower()</span><br><span class="line"><span class="built_in">print</span>(lower_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">bornforthis</span><br></pre></td></tr></table></figure><h3 id="5-3-capitalize"><a href="#5-3-capitalize" class="headerlink" title="5.3 .capitalize()"></a>5.3 .capitalize()</h3><p>将字符串首字母，转换成大写。「只对第一个字母大写，其它后面的字符会变成小写」</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornForthis To Aiyc&quot;</span></span><br><span class="line">capitalize_string = string.capitalize()</span><br><span class="line"><span class="built_in">print</span>(capitalize_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Bornforthis to aiyc</span><br></pre></td></tr></table></figure><h3 id="5-4-title"><a href="#5-4-title" class="headerlink" title="5.4 .title()"></a>5.4 .title()</h3><p>将字符串中的每个单词的首字母，转换成大写，其余的字符都转换成小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis to aiyc&quot;</span></span><br><span class="line">title_string = string.title()</span><br><span class="line"><span class="built_in">print</span>(title_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Bornforthis To Aiyc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis-to-aiyc&quot;</span>  <span class="comment"># 不管是什么间隔，都会转换成首字母大写</span></span><br><span class="line">title_string = string.title()</span><br><span class="line"><span class="built_in">print</span>(title_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Bornforthis-To-Aiyc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforThis to aiYc&quot;</span>  <span class="comment"># 其余的字符都转换成小写</span></span><br><span class="line">title_string = string.title()</span><br><span class="line"><span class="built_in">print</span>(title_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Bornforthis To Aiyc</span><br></pre></td></tr></table></figure><h3 id="5-5-startswith"><a href="#5-5-startswith" class="headerlink" title="5.5 .startswith()"></a>5.5 .startswith()</h3><p>检测字符串是不是以特定字符或单词开头，返回布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">startswith_string = string.startswith(<span class="string">&quot;b&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(startswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">startswith_string = string.startswith(<span class="string">&quot;bo&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(startswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">startswith_string = string.startswith(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(startswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">startswith_string = string.startswith(<span class="string">&quot;b1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(startswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-6-endswith"><a href="#5-6-endswith" class="headerlink" title="5.6 .endswith()"></a>5.6 .endswith()</h3><p>检测字符串是不是以特定字符或单词结尾，返回布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">endswith_string = string.endswith(<span class="string">&quot;s&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(endswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">endswith_string = string.endswith(<span class="string">&quot;is&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(endswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">endswith_string = string.endswith(<span class="string">&quot;i&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(endswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">endswith_string = string.endswith(<span class="string">&quot;s6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(endswith_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-7-count"><a href="#5-7-count" class="headerlink" title="5.7 .count()"></a>5.7 .count()</h3><p>计算特定字符或单词在目标字符串中存在的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">count_string = string.count(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(count_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">count_string = string.count(<span class="string">&#x27;or&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(count_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">count_string = string.count(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(count_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">count_string = string.count(<span class="string">&#x27;ap&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(count_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="5-8-find"><a href="#5-8-find" class="headerlink" title="5.8 .find()"></a>5.8 .find()</h3><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。「也就是出现重复的，也只是返回第一次出现的下标」如果是查找单词，那么 <code>find()</code> 返回目标单词的第一个字符的下标。</p><p>如果，查询的字符或单词不存在，则返回 <code>-1</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">find_string = string.find(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(find_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">find_string = string.find(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(find_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">find_string = string.find(<span class="string">&#x27;for&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(find_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">find_string = string.find(<span class="string">&#x27;aiyc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(find_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="5-9-index"><a href="#5-9-index" class="headerlink" title="5.9 .index()"></a>5.9 .index()</h3><p>寻找目标字符或单词在特定字符串中，第一次出现的下标。如果是查找单词，那么 <code>index()</code> 返回目标单词的第一个字符的下标。</p><p>如果，查询的字符或单词不存在，则<strong>报错</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">index_result = string.index(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(index_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">index_result = string.index(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(index_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class="number">83</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    index_result = string.index(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">index_result = string.index(<span class="string">&#x27;for&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(index_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">index_result = string.index(<span class="string">&#x27;aiyc&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(index_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class="number">83</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    index_result = string.index(<span class="string">&#x27;aiyc&#x27;</span>)</span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><h3 id="5-10-isdigit"><a href="#5-10-isdigit" class="headerlink" title="5.10 .isdigit()"></a>5.10 .isdigit()</h3><p>判断字符串是不是纯数字字符串，字符串中但凡有一个字符是非数字，则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;12345678&quot;</span></span><br><span class="line">isdigit_result = string.isdigit()</span><br><span class="line"><span class="built_in">print</span>(isdigit_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;123 45678&quot;</span></span><br><span class="line">isdigit_result = string.isdigit()</span><br><span class="line"><span class="built_in">print</span>(isdigit_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-11-isalpha"><a href="#5-11-isalpha" class="headerlink" title="5.11 .isalpha()"></a>5.11 .isalpha()</h3><p>判断字符串是不是纯字母字符串，字符串中但凡有一个非字母的，则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">isalpha_result = string.isalpha()</span><br><span class="line"><span class="built_in">print</span>(isalpha_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;born forthis&quot;</span></span><br><span class="line">isalpha_result = string.isalpha()</span><br><span class="line"><span class="built_in">print</span>(isalpha_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-12-isalnum"><a href="#5-12-isalnum" class="headerlink" title="5.12 .isalnum()"></a>5.12 .isalnum()</h3><p>判断字符串是不是纯数字、纯字母或纯数字字母字符串，字符串中但凡出现非数字、字母元素，则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">boolean = string.isalnum()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;12345678&quot;</span></span><br><span class="line">boolean = string.isalnum()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis8888888888&quot;</span></span><br><span class="line">boolean = string.isalnum()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis 8888888888&quot;</span></span><br><span class="line">boolean = string.isalnum()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-13-isupper"><a href="#5-13-isupper" class="headerlink" title="5.13 .isupper()"></a>5.13 .isupper()</h3><p>判断字符串中的字母否全大写，全大写则返回 True，否则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;BORNFORTHIS&quot;</span></span><br><span class="line">boolean = string.isupper()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;BORNFORTHIS12-、&quot;</span></span><br><span class="line">boolean = string.isupper()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;BORNforthis&quot;</span></span><br><span class="line">boolean = string.isupper()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">boolean = string.isupper()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-14-islower"><a href="#5-14-islower" class="headerlink" title="5.14 .islower()"></a>5.14 .islower()</h3><p>判断字符串中字母是不是全小写，全小写则返回 True，否则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">boolean = string.islower()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis121-、&quot;</span></span><br><span class="line">boolean = string.islower()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthisA121-、&quot;</span></span><br><span class="line">boolean = string.islower()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-15-isspace"><a href="#5-15-isspace" class="headerlink" title="5.15 .isspace()"></a>5.15 .isspace()</h3><p>判断字符串是否为纯空格，多少个空格都可以。纯空格则返回 True，否则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;   &quot;</span></span><br><span class="line">boolean = string.isspace()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;&quot;</span></span><br><span class="line">boolean = string.isspace()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">boolean = string.isspace()</span><br><span class="line"><span class="built_in">print</span>(boolean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="5-16-strip"><a href="#5-16-strip" class="headerlink" title="5.16 .strip()"></a>5.16 .strip()</h3><p>默认去掉目标字符串的前后空白字符，如果指定参数，则去掉指定字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;   bornforthis   &quot;</span></span><br><span class="line">strip_string = string.strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉前后空白字符后:&quot;</span>, strip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串:    bornforthis   </span><br><span class="line">去掉前后空白字符后: bornforthis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;-----bornforthis-----&quot;</span></span><br><span class="line">strip_string = string.strip(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉前后 &#x27;-&#x27; 字符后:&quot;</span>, strip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: -----bornforthis-----</span><br><span class="line">去掉前后 <span class="string">&#x27;-&#x27;</span> 字符后: bornforthis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;--- --bornforthis-- ---&quot;</span></span><br><span class="line">strip_string = string.strip(<span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 只去掉连续的减号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉前后 &#x27;-&#x27; 字符后:&quot;</span>, strip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: --- --bornforthis-- ---</span><br><span class="line">去掉前后 <span class="string">&#x27;-&#x27;</span> 字符后:  --bornforthis-- </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;--- --bornforthis-- ---&quot;</span>  <span class="comment"># 如果想去掉减号和空格呢？</span></span><br><span class="line">strip_string = string.strip(<span class="string">&#x27;- &#x27;</span>)  <span class="comment"># 填入要去掉的字符「不计较先后顺序」</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉前后 &#x27;- &#x27; 字符后:&quot;</span>, strip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: --- --bornforthis-- ---</span><br><span class="line">去掉前后 <span class="string">&#x27;- &#x27;</span> 字符后: bornforthis</span><br></pre></td></tr></table></figure><h3 id="5-17-lstrip"><a href="#5-17-lstrip" class="headerlink" title="5.17 .lstrip()"></a>5.17 .lstrip()</h3><p>默认去掉字符串左边的空白字符，如果指定参数，则去掉左边的指定字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;   bornforthis   &quot;</span></span><br><span class="line">lstrip_string = string.lstrip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉左边空白字符后:&quot;</span>, lstrip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串:    bornforthis   </span><br><span class="line">去掉左边空白字符后: bornforthis   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;----bornforthis----&quot;</span></span><br><span class="line">lstrip_string = string.lstrip(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉左边 &#x27;-&#x27; 后:&quot;</span>, lstrip_string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ----bornforthis----</span><br><span class="line">去掉左边 <span class="string">&#x27;-&#x27;</span> 后: bornforthis----</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;-- --bornforthis----&quot;</span></span><br><span class="line">lstrip_string = string.lstrip(<span class="string">&#x27;- &#x27;</span>)  <span class="comment"># 不分先后顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉左边 &#x27;- &#x27; 后:&quot;</span>, lstrip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: -- --bornforthis----</span><br><span class="line">去掉左边 <span class="string">&#x27;- &#x27;</span> 后: bornforthis----</span><br></pre></td></tr></table></figure><h3 id="5-18-rstrip"><a href="#5-18-rstrip" class="headerlink" title="5.18 .rstrip()"></a>5.18 .rstrip()</h3><p>默认去掉字符串右边的空白字符，如果指定参数，则去掉右边的指定字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;   bornforthis   &quot;</span></span><br><span class="line">rstrip_string = string.rstrip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉右边空白字符后:&quot;</span>, rstrip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串:    bornforthis   </span><br><span class="line">去掉右边空白字符后:    bornforthis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;----bornforthis----&quot;</span></span><br><span class="line">rstrip_string = string.rstrip(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉右边 &#x27;-&#x27; 后:&quot;</span>, rstrip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ----bornforthis----</span><br><span class="line">去掉右边 <span class="string">&#x27;-&#x27;</span> 后: ----bornforthis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;----bornforthis-- --&quot;</span></span><br><span class="line">rstrip_string = string.rstrip(<span class="string">&#x27;- &#x27;</span>)  <span class="comment"># 不分先后顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;去掉右边 &#x27;- &#x27; 后:&quot;</span>, rstrip_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ----bornforthis-- --</span><br><span class="line">去掉右边 <span class="string">&#x27;- &#x27;</span> 后: ----bornforthis</span><br></pre></td></tr></table></figure><h3 id="5-19-replace"><a href="#5-19-replace" class="headerlink" title="5.19 .replace()"></a>5.19 .replace()</h3><p><code>.replace(old, new, count)</code> 第一个位置传入待替换的旧「old」字符，第二个位置传入要替换的新字符「new」，默认替换全部，count 控制替换次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;   bornforthis   &quot;</span></span><br><span class="line">replace_string = string.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 把空白字符替换成 *</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换后:&quot;</span>, replace_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串:    bornforthis   </span><br><span class="line">替换后: ***bornforthis***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;ai-bornforthis-ai&quot;</span></span><br><span class="line">replace_string = string.replace(<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;love&#x27;</span>)  <span class="comment"># 把 ai 替换成 love，默认全部替换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换后:&quot;</span>, replace_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai-bornforthis-ai</span><br><span class="line">替换后: love-bornforthis-love</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;ai-bornforthis-ai&quot;</span></span><br><span class="line">replace_string = string.replace(<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;love&#x27;</span>, <span class="number">1</span>)  <span class="comment"># 替换一次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;替换后:&quot;</span>, replace_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai-bornforthis-ai</span><br><span class="line">替换后: love-bornforthis-ai</span><br></pre></td></tr></table></figure><h3 id="5-20-split"><a href="#5-20-split" class="headerlink" title="5.20 .split()"></a>5.20 .split()</h3><p><code>.split(sep, maxsplit)</code> 以特定字符进行分割，默认空格分割。如果传入参数「sep」，则以参数进行分割。返回分割后的列表。maxsplit 用于控制分割几次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;ai bornforthis ai&quot;</span></span><br><span class="line">split_string = string.split()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分割后:&quot;</span>, split_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai bornforthis ai</span><br><span class="line">分割后: [<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;bornforthis&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;ai-bornforthis-ai&quot;</span></span><br><span class="line">split_string = string.split(<span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 以 - 好分割</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分割后:&quot;</span>, split_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai-bornforthis-ai</span><br><span class="line">分割后: [<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;bornforthis&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;ai-bornforthis-love&quot;</span></span><br><span class="line">split_string = string.split(<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分割后:&quot;</span>, split_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai-bornforthis-love</span><br><span class="line">分割后: [<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;bornforthis-love&#x27;</span>]</span><br></pre></td></tr></table></figure><p>::: warning</p><p>注意⚠️：使用 spilt 分割时，不管每个字符之间有几个空格，都将会正常的分割出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;ai  bornforthis  ai    book&quot;</span></span><br><span class="line">new_s = s.split()</span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">[<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;bornforthis&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;book&#x27;</span>]</span><br></pre></td></tr></table></figure><p>当我们指定 split 的间隔时，spilt 会严格按照我们指定的分割符号来分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;ai  bornforthis  ai    book&quot;</span></span><br><span class="line">new_s = s.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">[<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;bornforthis&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;book&#x27;</span>]</span><br></pre></td></tr></table></figure><p>上面多输出的结果空字符串，就是证明。</p><p>其实，在学习的过程当中，还是需要经常举一反三的。如果是其它连续字符会不会有这样情况呢？——答案是肯定的，也会有这样的情况。</p><p>你可以自行分析和编写代码试一试～</p><p>:::</p><h3 id="5-21-rsplit"><a href="#5-21-rsplit" class="headerlink" title="5.21 .rsplit()"></a>5.21 .rsplit()</h3><p><code>.rsplit(sep, maxsplit)</code> 从字符串右边进行分割，也可以传入参数「sep」，进行指定分割。返回分割后的列表。maxsplit 指定分割次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;ai-bornforthis-love&quot;</span></span><br><span class="line">rsplit_string = string.rsplit(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分割后:&quot;</span>, rsplit_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai-bornforthis-love</span><br><span class="line">分割后: [<span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;bornforthis&#x27;</span>, <span class="string">&#x27;love&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;ai-bornforthis-love&quot;</span></span><br><span class="line">rsplit_string = string.rsplit(<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分割后:&quot;</span>, rsplit_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: ai-bornforthis-love</span><br><span class="line">分割后: [<span class="string">&#x27;ai-bornforthis&#x27;</span>, <span class="string">&#x27;love&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="5-22-join"><a href="#5-22-join" class="headerlink" title="5.22 .join()"></a>5.22 .join()</h3><p>以特定字符使字符串间隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;bornforthis&quot;</span></span><br><span class="line">join_string = <span class="string">&#x27;-&#x27;</span>.join(string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原本的字符串:&quot;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拼接后:&quot;</span>, join_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">原本的字符串: bornforthis</span><br><span class="line">分割后: b-o-r-n-f-o-r-t-h-i-s</span><br></pre></td></tr></table></figure><h2 id="6-字符串格式化"><a href="#6-字符串格式化" class="headerlink" title="6. 字符串格式化"></a>6. 字符串格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Hi Bornforthis,Welcome to XiaMen.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to XiaMen.</span><br></pre></td></tr></table></figure><ul><li>所存在的问题：需要换一个人名或者地区，就需要重新创建一个全新的字符串。</li><li>我们更希望有类似模版，让我们不同的人名、地面填写进去。而不是每个人都从头创建一个新字符串。</li></ul><p>当然，这个时候有可能会想到使用字符串的加法，但字符串加法存在问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bornforthis&quot;</span></span><br><span class="line">region = <span class="string">&quot;XiaMen&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;Hi &quot;</span></span><br><span class="line">string2 = <span class="string">&quot;,Welcome to &quot;</span></span><br><span class="line">string3 = <span class="string">&quot;.&quot;</span></span><br><span class="line">result = string1 + name + string2 + region + string3</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to XiaMen.</span><br></pre></td></tr></table></figure><p>由上面的代码可知，虽然实现了。但是很繁琐，如果更复杂的字符串就不合适了。</p><p>而且另一个问题就是，在 Python 中不同的数据类型不能直接相加，除非强制转换类型为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Money is &quot;</span> + <span class="number">190</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/40-YEWENTE/demo1.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    string = <span class="string">&quot;Money is &quot;</span> + <span class="number">190</span></span><br><span class="line">TypeError: can only concatenate <span class="built_in">str</span> (<span class="keyword">not</span> <span class="string">&quot;int&quot;</span>) to <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;Money is &quot;</span> + <span class="built_in">str</span>(<span class="number">190</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">190</span></span><br></pre></td></tr></table></figure><p>—— <strong>format</strong> 就应运而生了。</p><h3 id="6-1-format"><a href="#6-1-format" class="headerlink" title="6.1 .format()"></a>6.1 .format()</h3><ol><li>单个花括号 <code>&#123;&#125;</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Hi &#123;&#125;,Welcome to XiaMen.&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;aiyuechuang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi aiyuechuang,Welcome to XiaMen.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template_string = <span class="string">&quot;Hi &#123;&#125;,Welcome to XiaMen.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(template_string.<span class="built_in">format</span>(<span class="string">&quot;Bornforthis&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to XiaMen.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_string = template_string.<span class="built_in">format</span>(<span class="string">&quot;AI悦创&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi AI悦创,Welcome to XiaMen.</span><br></pre></td></tr></table></figure><ol start="2"><li>一个花括号以上「按顺序填充」</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Hi &#123;&#125;,Welcome to &#123;&#125;.&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;aiyuechuang&quot;</span>, <span class="string">&quot;厦门&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi aiyuechuang,Welcome to 厦门.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template_string = <span class="string">&quot;Hi &#123;&#125;,Welcome to &#123;&#125;.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(template_string.<span class="built_in">format</span>(<span class="string">&quot;Bornforthis&quot;</span>, <span class="string">&quot;上海&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to 上海.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_string = template_string.<span class="built_in">format</span>(<span class="string">&quot;AI悦创&quot;</span>, <span class="string">&quot;北京&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure><ol start="3"><li>多个花括号指定位置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Hi &#123;1&#125;,Welcome to &#123;0&#125;.&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;厦门&quot;</span>, <span class="string">&quot;aiyuechuang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi aiyuechuang,Welcome to 厦门.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template_string = <span class="string">&quot;Hi &#123;1&#125;,Welcome to &#123;0&#125;.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(template_string.<span class="built_in">format</span>(<span class="string">&quot;上海&quot;</span>, <span class="string">&quot;Bornforthis&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to 上海.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_string = template_string.<span class="built_in">format</span>(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;AI悦创&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure><ol start="4"><li>参数指定</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Hi &#123;name&#125;,Welcome to &#123;region&#125;.&quot;</span>.<span class="built_in">format</span>(region=<span class="string">&#x27;厦门&#x27;</span>, name=<span class="string">&#x27;aiyuechuang&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi aiyuechuang,Welcome to 厦门.</span><br><span class="line"></span><br><span class="line">template_string = <span class="string">&quot;Hi &#123;name&#125;,Welcome to &#123;region&#125;.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(template_string.<span class="built_in">format</span>(name=<span class="string">&quot;Bornforthis&quot;</span>, region=<span class="string">&#x27;上海&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to 上海.</span><br><span class="line"></span><br><span class="line">new_string = template_string.<span class="built_in">format</span>(name=<span class="string">&#x27;AI悦创&#x27;</span>, region=<span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi AI悦创,Welcome to 北京.</span><br></pre></td></tr></table></figure><ol start="5"><li>保留指定小数位</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Money is &#123;:.3f&#125;.&quot;</span>.<span class="built_in">format</span>(<span class="number">190</span>)  <span class="comment"># .3f 保留三位小数</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">190.000</span>.</span><br></pre></td></tr></table></figure><blockquote><p>此时，放入数字是不会报错了。</p></blockquote><h3 id="6-2-f"><a href="#6-2-f" class="headerlink" title="6.2 f"></a>6.2 f</h3><ol><li>直接读取变量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Bornforthis&quot;</span></span><br><span class="line">region = <span class="string">&quot;厦门&quot;</span></span><br><span class="line">string = <span class="string">f&quot;Hi <span class="subst">&#123;name&#125;</span>,Welcome to <span class="subst">&#123;region&#125;</span>.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Hi Bornforthis,Welcome to 厦门.</span><br></pre></td></tr></table></figure><ol start="2"><li>保留小数位</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="number">190</span></span><br><span class="line">string = <span class="string">f&quot;Money is <span class="subst">&#123;money:<span class="number">.3</span>f&#125;</span>.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">190.000</span>.</span><br></pre></td></tr></table></figure><h3 id="6-3-格式化"><a href="#6-3-格式化" class="headerlink" title="6.3 % 格式化"></a>6.3 % 格式化</h3><ul><li><code>%d</code>: 整数</li><li><code>%s</code>: 字符串</li><li><code>%f</code>: 浮点数</li></ul><ol><li>单个位置传入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Money is %d&quot;</span></span><br><span class="line">new_s = string % <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"><span class="built_in">print</span>(string % <span class="number">19</span>)</span><br><span class="line">string = <span class="string">&quot;Money is %d&quot;</span> % <span class="number">190</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">new_string: Money <span class="keyword">is</span> <span class="number">13</span></span><br><span class="line">直接放: Money <span class="keyword">is</span> <span class="number">19</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">190</span></span><br></pre></td></tr></table></figure><ol start="2"><li>多个位置传入</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Money is %d %s&quot;</span></span><br><span class="line">new_s = string % (<span class="number">13</span>, <span class="string">&#x27;发大财&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"><span class="built_in">print</span>(string % (<span class="number">888</span>, <span class="string">&#x27;暴富&#x27;</span>))</span><br><span class="line">string = <span class="string">&quot;Money is %d %s&quot;</span> % (<span class="number">190</span>, <span class="string">&quot;超有钱&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">13</span> 发大财</span><br><span class="line">Money <span class="keyword">is</span> <span class="number">888</span> 暴富</span><br><span class="line">Money <span class="keyword">is</span> <span class="number">190</span> 超有钱</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Money is %d %s&quot;</span></span><br><span class="line">new_s = string % (<span class="number">13</span>, <span class="string">&#x27;make a million&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"><span class="built_in">print</span>(string % (<span class="number">888</span>, <span class="string">&#x27;sudden wealth&#x27;</span>))</span><br><span class="line">string = <span class="string">&quot;Money is %d %s&quot;</span> % (<span class="number">190</span>, <span class="string">&#x27;super rich&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">13</span> make a million</span><br><span class="line">Money <span class="keyword">is</span> <span class="number">888</span> sudden wealth</span><br><span class="line">Money <span class="keyword">is</span> <span class="number">190</span> <span class="built_in">super</span> rich</span><br></pre></td></tr></table></figure><ol start="3"><li>保留小数位</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;Money is %.3f&quot;</span></span><br><span class="line">new_s = string % <span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(new_s)</span><br><span class="line"><span class="built_in">print</span>(string % <span class="number">18</span>)</span><br><span class="line">string = <span class="string">&quot;Money is %.3f&quot;</span> % <span class="number">180</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">19.000</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">18.000</span></span><br><span class="line">Money <span class="keyword">is</span> <span class="number">180.000</span></span><br></pre></td></tr></table></figure><h3 id="6-4-f-和-format、-的优缺点"><a href="#6-4-f-和-format、-的优缺点" class="headerlink" title="6.4 f 和 format、% 的优缺点"></a>6.4 f 和 format、% 的优缺点</h3><p><code>format</code> 和 <code>%</code> 都像模版，提前做好模版后面有需要时可以直接使用；</p><p>而 <code>f</code> 就像在银行当中，柜员边问你边登记，不能提前做好模版。</p><h2 id="7-字符串不可变性"><a href="#7-字符串不可变性" class="headerlink" title="7. 字符串不可变性"></a>7. 字符串不可变性</h2><p>字符串是不可变的，不可以改变字符串中的任何元素，如需改变字符串中的元素，则需要新建一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello bornforthis&quot;</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson3.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>除了使用 replace 还可以使用字符串拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello bornforthis&quot;</span></span><br><span class="line">news = <span class="string">&quot;a&quot;</span> + s[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(news)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">aello bornforthis</span><br></pre></td></tr></table></figure><h2 id="8-字符串转义"><a href="#8-字符串转义" class="headerlink" title="8. 字符串转义"></a>8. 字符串转义</h2><table><thead><tr><th>转义字符</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td><code>\\</code></td><td>反斜杠符号，为了在字符串中得到 <code>\</code></td><td><code>s = &quot;bor\\nforthis&quot;</code></td></tr><tr><td><code>\b</code></td><td>退格，类似删除键</td><td><code>s = &quot;bornff\borthis&quot;</code></td></tr><tr><td><code>\n</code></td><td>换行</td><td><code>s = &quot;bornfor\nthis&quot;</code></td></tr><tr><td><code>\t</code></td><td>制表符</td><td><code>s = &quot;born\tfor\tthis&quot;</code></td></tr><tr><td><code>r</code></td><td>取消转义「R 和 r」都可以</td><td><code>s = r&quot;born\tfor\tthis&quot;</code></td></tr></tbody></table><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;bor\\nforthis&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">bor\nforthis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;bornff\borthis&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">bornforthis</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;bornfor\nthis&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">bornfor</span><br><span class="line">this</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;born\tfor\tthis&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">born    <span class="keyword">for</span>    this</span><br></pre></td></tr></table></figure><h2 id="9-字符串的连接"><a href="#9-字符串的连接" class="headerlink" title="9. 字符串的连接"></a>9. 字符串的连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;born&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;forthis&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 + s2)  <span class="comment"># 形成了一个字符串</span></span><br><span class="line"><span class="built_in">print</span>(s1, s2)  <span class="comment"># 还是两个独立的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">bornforthis</span><br><span class="line">born forthis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;*-love-&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-</span><br></pre></td></tr></table></figure><p>我想在上面的输出添加末尾加一个 <code>*</code> 怎么办呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原本:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-</span><br><span class="line">目标:*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*-love-*</span><br></pre></td></tr></table></figure><p><strong>思考一下，如何实现。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;*-love-&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 * <span class="number">10</span>, end=<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="10-读取用户输入"><a href="#10-读取用户输入" class="headerlink" title="10. 读取用户输入"></a>10. 读取用户输入</h2><h3 id="10-1-input-基本使用"><a href="#10-1-input-基本使用" class="headerlink" title="10.1 input() 基本使用"></a>10.1 input() 基本使用</h3><p>使用 <code>input()</code> 获取用户输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user_input = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(user_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">bornforthis</span><br><span class="line">bornforthis</span><br></pre></td></tr></table></figure><h3 id="10-2-input-使用输入提示"><a href="#10-2-input-使用输入提示" class="headerlink" title="10.2 input() 使用输入提示"></a>10.2 input() 使用输入提示</h3><p>但是上面的代码，有点小问题：在运行的时候并不能很直观的知道，程序需要我们输入，何况非程序员用户呢？</p><p><img src="/./04-python-string/image-20231214174641525.png"></p><p>如何解决？——使用输入提示。</p><p><code>input()</code> 函数里面支持我们写入字符串进行提示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user_input = <span class="built_in">input</span>(<span class="string">&#x27;Enter your name:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;user input name:&quot;</span>, user_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---output---</span></span><br><span class="line">Enter your name:&gt;&gt;&gt;bornforthis</span><br><span class="line">user <span class="built_in">input</span> name: bornforthis</span><br></pre></td></tr></table></figure><p><img src="/./04-python-string/image-20231214175112464.png" alt="这样就很直观了"></p><h3 id="10-3-input-的特点"><a href="#10-3-input-的特点" class="headerlink" title="10.3 input() 的特点"></a>10.3 input() 的特点</h3><h4 id="10-3-1-input-得到类型皆为字符串「str」"><a href="#10-3-1-input-得到类型皆为字符串「str」" class="headerlink" title="10.3.1 input() 得到类型皆为字符串「str」"></a>10.3.1 input() 得到类型皆为字符串「str」</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))  <span class="comment"># 使用 type 检测 input 获取用户输入之后的数据类型</span></span><br><span class="line">:&gt;&gt;&gt;bornforthis</span><br><span class="line">Out[<span class="number">2</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">12</span></span><br><span class="line">Out[<span class="number">3</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">12.1</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  </span><br><span class="line">Out[<span class="number">6</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">Out[<span class="number">7</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line">Out[<span class="number">8</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">type</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line">Out[<span class="number">9</span>]: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>通过上面的代码示例，我们可以知道：通过 <code>input()</code> 获取用户输入，得到的数据类型都是<strong>字符串</strong>。</p><p>得知 <code>input()</code> 的特点后，如何解决这个问题呢？——用户如何实现：直接输入原有的类型并得到原有的类型。</p><h4 id="10-3-2-方法一：强制类型转换"><a href="#10-3-2-方法一：强制类型转换" class="headerlink" title="10.3.2 方法一：强制类型转换"></a>10.3.2 方法一：强制类型转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">type</span>(n)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="comment"># 存在一些问题</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: s = <span class="built_in">list</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: s  <span class="comment"># 把每一个字符拆开</span></span><br><span class="line">Out[<span class="number">14</span>]: [<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;]&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">type</span>(s)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: b = <span class="built_in">bool</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: b</span><br><span class="line">Out[<span class="number">17</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="built_in">type</span>(b)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><ul><li>适合：数字「整数、浮点数」、字符串、布尔型</li><li>不适合：列表、元组、字典、集合</li></ul><h4 id="10-3-3-方法二：使用-eval"><a href="#10-3-3-方法二：使用-eval" class="headerlink" title="10.3.3 方法二：使用 eval()"></a>10.3.3 方法二：使用 eval()</h4><ol><li><code>eval()</code> 的妙用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">28</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">29</span>]: (<span class="built_in">int</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">31</span>]: (<span class="built_in">list</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">33</span>]: (<span class="built_in">tuple</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">35</span>]: (<span class="built_in">set</span>, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">37</span>]: (<span class="built_in">bool</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">39</span>]: (<span class="built_in">dict</span>, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><code>eval()</code> 伴随着的问题</li></ol><p>上面的代码看似解决了我们所遇到的问题，但是也伴随着我们需要注意的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;string </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">Cell In[<span class="number">40</span>], line <span class="number">1</span></span><br><span class="line">----&gt; <span class="number">1</span> s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">File &lt;string&gt;:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;string&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>稍微分析一下 <code>eval()</code> 的功能“大概”实现原因：</p><ul><li>input 获取用户输入，得到字符串类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: s = <span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">:&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: s</span><br><span class="line">Out[<span class="number">45</span>]: <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br></pre></td></tr></table></figure><p>从上面的代码可以得知，eval 大概率实现的是去掉字符串左右两边的引号。「这个地方 eval 或许不是按我说的实现，但是为了让你们更好理解原理，先这样来。」</p><p>所以，为什么会导致上面的报错呢？</p><ol><li>获取用户输入：<code>s = eval(input(&#39;:&gt;&gt;&gt;&#39;))</code></li><li>其中 input 会得到 <code>&#39;string&#39;</code>，而通过 <code>eval</code> 转换之后，就类似于 <code>string</code> 变量。但是我们实际上我们在我们之前的代码中，并没有创建 string 这个变量。</li><li>故而报错，当然没有通过上面的分析也可以大概预料到问题，因为报错很直观：<code>NameError: name &#39;string&#39; is not defined</code> 。</li><li>所以，解决方法很直白：<ol><li>一种是你在获取用户输入之前直接提前创建一个叫做 string 的变量；「显然，不是我们想要的」</li><li>另一种则是输入的时，有意加上单引号或者双引号、三引号。</li></ol></li></ol><p>::: code-tabs</p><p>@tab Code 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: string = <span class="string">&#x27;hello this string&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;string</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: s</span><br><span class="line">Out[<span class="number">52</span>]: <span class="string">&#x27;hello this string&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: num = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;num</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">55</span>]: (<span class="built_in">int</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: <span class="built_in">type</span>(s), s</span><br><span class="line">Out[<span class="number">57</span>]: (<span class="built_in">str</span>, <span class="string">&#x27;string&#x27;</span>)</span><br></pre></td></tr></table></figure><p>@tab Code 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: <span class="comment"># Step 1: 探究 eval 的实现原理</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s = <span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">:&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  </span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s</span><br><span class="line">Out[<span class="number">58</span>]: <span class="string">&#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class="line">:&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: s</span><br><span class="line">Out[<span class="number">60</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: <span class="comment"># eval 大体是实现把字符串外面的引号去掉，实现变回原本的数据类型</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: <span class="comment"># Step 2: 探究报错原因</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: s = <span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">:&gt;&gt;&gt;look</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: s</span><br><span class="line">Out[<span class="number">64</span>]: <span class="string">&#x27;look&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: <span class="comment"># 我们可以观察输出的是 &#x27;look&#x27;，如果直接去掉 look 左右的引号将变成：变量。但变量没有被定义，所以</span></span><br><span class="line">    ...: 会报错。</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class="line">:&gt;&gt;&gt;look</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">Cell In[<span class="number">66</span>], line <span class="number">1</span></span><br><span class="line">----&gt; <span class="number">1</span> s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class="line"></span><br><span class="line">File &lt;string&gt;:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;look&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="comment"># Step 3: 解决方法</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: <span class="comment"># 既然 eval 是直接去掉 look 外面的引号，导致变量不存在报错。所以我有两种解决方法：</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: <span class="comment"># 方法一：提前创建一个变量</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">70</span>]: <span class="comment"># 方法二：输入的时，有意加上单引号或者双引号、三引号</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: look = <span class="string">&#x27;我提前创建一个 look 变量&#x27;</span>  <span class="comment"># 方法一</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;:&gt;&gt;&gt;&quot;</span>))</span><br><span class="line">:&gt;&gt;&gt;look</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: s</span><br><span class="line">Out[<span class="number">73</span>]: <span class="string">&#x27;我提前创建一个 look 变量&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: s = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;:&gt;&gt;&gt;&quot;</span>))  <span class="comment"># 方法二：我提前加一个引号，input 也会给它一个引号，最后有两对引号，eval 拆掉一对引号，还剩一对引号。——成功得到字符串</span></span><br><span class="line">:&gt;&gt;&gt;<span class="string">&#x27;look&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: s</span><br><span class="line">Out[<span class="number">75</span>]: <span class="string">&#x27;look&#x27;</span></span><br></pre></td></tr></table></figure><p>:::</p><ol start="3"><li><code>eval()</code> 小技巧</li></ol><p>任务要求：获取户输入，实现两位的加减乘除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">1</span> + <span class="number">1</span></span><br><span class="line">Out[<span class="number">58</span>]: <span class="number">2</span>  <span class="comment"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;1 + 1&#x27;) == 2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">Out[<span class="number">59</span>]: <span class="number">1</span>  <span class="comment"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;2 - 1&#x27;) == 1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">9</span> * <span class="number">8</span></span><br><span class="line">Out[<span class="number">60</span>]: <span class="number">72</span>  <span class="comment"># eval(input(&#x27;:&gt;&gt;&gt;&#x27;)) == eval(&#x27;9 * 8&#x27;) == 72</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;:&gt;&gt;&gt;&#x27;</span>))</span><br><span class="line">:&gt;&gt;&gt;<span class="number">9</span> / <span class="number">3</span></span><br><span class="line">Out[<span class="number">61</span>]: <span class="number">3.0</span></span><br></pre></td></tr></table></figure><h4 id="10-3-4-浅谈-input-的设计理念"><a href="#10-3-4-浅谈-input-的设计理念" class="headerlink" title="10.3.4 浅谈 input 的设计理念"></a>10.3.4 浅谈 input 的设计理念</h4><p>在 Python 中，使用 <code>input()</code> 函数时，它会从标准输入（通常是键盘）读取一行文本，并且这一行文本会被当作字符串处理。这是因为用户输入的内容可能包括各种字符，包括数字、字母和符号。由于 <code>input()</code> 函数不能预知用户将要输入什么类型的数据，它默认将输入内容作为字符串返回，这样可以保持最大的灵活性和兼容性。</p><p>如果你需要将这个字符串转换为其他数据类型，比如整数或浮点数，你可以使用相应的转换函数，例如 <code>int()</code> 或 <code>float()</code>，来进行转换。这里是一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 input() 获取用户输入，并存储为字符串</span></span><br><span class="line">user_input = <span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为整数</span></span><br><span class="line">number = <span class="built_in">int</span>(user_input)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印转换后的整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入的整数是:&quot;</span>, number)</span><br></pre></td></tr></table></figure><p>在这个例子中，如果用户输入的不是一个有效的整数，<code>int()</code> 函数会抛出一个 <code>ValueError</code>。因此，在实际使用中，通常需要加上错误处理来确保程序的健壮性。</p><h2 id="11-小试牛刀"><a href="#11-小试牛刀" class="headerlink" title="11. 小试牛刀"></a>11. 小试牛刀</h2><p>获取用户连续输入的两个整数，得到两个整数的和。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Worldsss</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p><img src="/posts/4a17b156/image.png" alt="alt text"></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&#x27;I&#x27;</span>m bornforthis.<span class="string">&#x27;  # 在英文当中也可以这样缩写</span></span><br><span class="line"><span class="string">print(string)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 输出</span></span><br><span class="line"><span class="string">  File &quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/39-YDN/lesson2.py&quot;, line 15</span></span><br><span class="line"><span class="string">    string = &#x27;</span>I<span class="string">&#x27;m bornforthis.&#x27;</span>  <span class="comment"># 在英文当中也可以这样缩写</span></span><br><span class="line">                ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 \</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">浅者见浅，深者见深——黄家宝\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">先实现功能，再去优化，否则一切会很乱。——AI悦创\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">凡是你不能清晰写下来的东西，都是你还没有真正理解的东西&quot;</span>  <span class="comment"># 外面使用双引号进行包裹即可</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">我们有时候不仅仅要看选择项以内的答案，也要去思考选择项以外的答案。——AI悦创 浅者见浅，深者见深——黄家宝起的最早的是理想主义者，跑的最快的是骗子，而胆子最大的是那些冒险家，害怕错过一切，疯狂往里冲的是韭菜，而真正的成功者，可能还没有入场。先实现功能，再去优化，否则一切会很乱。——AI悦创凡是你不能清晰写下来的东西，都是你还没有真正理解的东西</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试是个分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
